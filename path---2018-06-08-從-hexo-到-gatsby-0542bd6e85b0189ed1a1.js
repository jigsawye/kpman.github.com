webpackJsonp([0xb65cb06ac56f],{385:function(n,a){n.exports={data:{site:{siteMetadata:{title:"kpman | code",siteUrl:"https://code.kpman.cc",disqusShortname:"kpmancode"}},markdownRemark:{id:"/Users/kpman/workspace/kpman.github.com/content/_posts/2018-06-08-從-Hexo-到-Gatsby.md absPath of file >>> MarkdownRemark",html:'<p>本篇文章記錄了我將部落格從 Hexo 轉換到 Gatsby 的過程，以及這過程當中相關設定的經驗分享。</p>\n<p><img src="https://i.imgur.com/yGnymMq.png" alt="From Hexo to Gatsby"></p>\n<!-- more -->\n<p>本篇文章並非詳細介紹 Gatsby，如想了解更多，請至<a href="https://www.gatsbyjs.org/">官方網站</a>。</p>\n<h2 id="緣由"><a href="#%E7%B7%A3%E7%94%B1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>緣由</h2>\n<p>Hexo 是一套歷史已久的 static site generator，此部落格原本就是利用 Hexo 架起來的。然而，後起之秀 Gatsby 採用著不同的資料流處理方式，加上優異的架構，最重要的是該團隊獲得資金並成立公司的<a href="https://twitter.com/gatsbyjs/status/999684072501792768">新聞</a>一出，我對於這個專案後續維護更加看好，就決定搬家到 Gatsby。</p>\n<h2 id="搬移過程"><a href="#%E6%90%AC%E7%A7%BB%E9%81%8E%E7%A8%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>搬移過程</h2>\n<p>此處列出一些在搬部落格過程中需要注意的點，並作大綱的列點，可以選擇自己喜歡的部份研究。</p>\n<ul>\n<li><a href="#markdown-%E6%95%B4%E7%90%86">Markdown 整理</a></li>\n<li><a href="#url-%E4%B8%80%E8%87%B4%E6%80%A7">URL 一致性</a></li>\n<li><a href="#page-%E8%A8%AD%E8%A8%88">Page 設計</a></li>\n<li><a href="#favicon">Favicon</a></li>\n<li><a href="#gatsby-plugins--useful-packages">Gatsby plugin &#x26; useful packages</a></li>\n</ul>\n<h2 id="markdown-整理"><a href="#markdown-%E6%95%B4%E7%90%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Markdown 整理</h2>\n<p>Hexo 原生就提供產生文章的 CLI API，因此使用上蠻方便，只要一個指令就可以自動產生 Markdown 檔。而 Gatsby 就得要自行選擇文檔的類型，因為當初選用 Hexo 就是它可以利用 Markdown 寫部落格，所以轉換到 Gatsby 自然就沿用 Markdown 了。</p>\n<h3 id="gatsby-source-filesystem"><a href="#gatsby-source-filesystem" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>gatsby-source-filesystem</h3>\n<p>在部落格架構設計上，我把所有原始檔放在 <code class="language-text">./content/_posts</code> 底下。但想讓 Gatsby 知道文件位置，就得利用 <code class="language-text">gatsby-source-filesystem</code> 這個 plugin，如下設定：</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// gatsby-config.js</span>\nplugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    resolve<span class="token punctuation">:</span> <span class="token string">\'gatsby-source-filesystem\'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'posts\'</span><span class="token punctuation">,</span> <span class="token comment">// Name this source</span>\n      path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./content/_posts\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>ps. Gatsby 的範例都利用 <code class="language-text">``(backtick)</code> 包住字串，但我還是習慣使用 single quote。</p>\n<h3 id="gatsby-transformer-remark"><a href="#gatsby-transformer-remark" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>gatsby-transformer-remark</h3>\n<p>把原始 file 讀進來之後，Gatsby 也提供了專為 Markdown 檔處理的 plugin，名為 <code class="language-text">gatsby-transformer-remark</code>。<br>\n經過這個 plugin 處理過的資料，會被轉成 Gatsby 架構下的 <code class="language-text">node</code>，此 node 的 type 為 <code class="language-text">MarkdownRemark</code>，該 node 會增加許多有用資訊，例如：<code class="language-text">html</code>, <code class="language-text">headings</code>, <code class="language-text">excerpt</code> 等等，省下許多 parse Markdown 檔的功夫。</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// gatsby-config.js</span>\nplugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'gatsby-transformer-remark\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>後續還會介紹更多這個 plugin 的設定方式，也可直接參考 <a href="https://github.com/kpman/kpman.github.com/blob/0f02b98eaa23e92f794adf4a14bfda4c1ec3be0d/gatsby-config.js#L24-L42">repo</a></p>\n<h2 id="url-一致性"><a href="#url-%E4%B8%80%E8%87%B4%E6%80%A7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>URL 一致性</h2>\n<p>當初利用 Hexo 建立出來的 URL 為類似 <code class="language-text">/2017/07/03/利用-Hub-來自動發-GitHub-PR/</code> 這樣的 pattern，\n為了不 breaking 既有 URL，我選擇將新版的 URL 設計和當初一樣。</p>\n<p>此時就得讓 Gatsby 讀懂日期，這邊當初猶豫是要從 Markdown 裡面拿或者是從檔名拿日期。\n將日期寫在檔名有多一個好處，就是可以利用檔名來做排序，基於這樣就決定將原本的所有 Markdown 檔都加上日期，修改過後的檔名為 <code class="language-text">2017-07-03-利用-Hub-來自動發-GitHub-PR.md</code>。</p>\n<h3 id="oncreatenode"><a href="#oncreatenode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>onCreateNode</h3>\n<p>Gatsby 提供 <code class="language-text">onCreateNode</code> 此 API 操作，原理上是在 Gatsby 要 createNode 時，在該 node 上面加上一些我們用的到的資訊。\n我在此處便是利用 RegExp 將檔名給 parse 出來，並在 node 上面新增一個 field 叫做 <code class="language-text">slug</code>，也就是 URL 上面除了 domain 後面的 <a href="https://nodejs.org/api/url.html"><code class="language-text">pathname</code></a> 部分。</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// gatsby-node.js</span>\n<span class="token keyword">const</span> <span class="token constant">BLOG_POST_FILENAME_REGEX</span> <span class="token operator">=</span> <span class="token regex">/([0-9]+)-([0-9]+)-([0-9]+)-(.+)\\.md$/</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">onCreateNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> node<span class="token punctuation">,</span> getNode<span class="token punctuation">,</span> boundActionCreators <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> createNodeField <span class="token punctuation">}</span> <span class="token operator">=</span> boundActionCreators<span class="token punctuation">;</span>\n\n  <span class="token comment">// 確定是 Markdown 檔再做操作</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'MarkdownRemark\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> relativePath <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token constant">BLOG_POST_FILENAME_REGEX</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>relativePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> year <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> month <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> day <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> filename <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 組出我們要的 slug pattern</span>\n    <span class="token keyword">const</span> slug <span class="token operator">=</span> <span class="token template-string"><span class="token string">`/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>month<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>day<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/`</span></span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 在該 node 上面多增加一個欄位，未來可以 Query</span>\n    <span class="token function">createNodeField</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      node<span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'slug\'</span><span class="token punctuation">,</span>\n      value<span class="token punctuation">:</span> slug<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>有了前述的 node 資料之後，我們在 Gatsby 創造這些 page，讓使用者在進入 <code class="language-text">/YYYY/MM/DD/&lt;blog-title&gt;/</code> 這樣的 URL 可以順利取得文章內容。</p>\n<h3 id="createpages"><a href="#createpages" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>createPages</h3>\n<p>Gatsby 提供的另一個 API 叫做 <code class="language-text">createPages</code>，此 API 就是你所有的 page 都需要透過該 API 來創造，如此一來 Gatsby 才可以正確的回傳該頁面。</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// gatsby-node.js</span>\nexports<span class="token punctuation">.</span>createPages <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> graphql<span class="token punctuation">,</span> boundActionCreators <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> createPage <span class="token punctuation">}</span> <span class="token operator">=</span> boundActionCreators<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> allMarkdown <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">graphql</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`\n    {\n      allMarkdownRemark {\n        edges {\n          node {\n            fields {\n              slug # 此處的 slug 就是上述 onCreateNode 時候加上去的\n            }\n          }\n        }\n      }\n    }\n  `</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  allMarkdown<span class="token punctuation">.</span>data<span class="token punctuation">.</span>allMarkdownRemark<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> node <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> slug <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>fields<span class="token punctuation">;</span>\n\n    <span class="token function">createPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      path<span class="token punctuation">:</span> slug<span class="token punctuation">,</span> <span class="token comment">// 告訴 Gatsby 這個 URL path</span>\n      <span class="token comment">// 這邊選用的 component，就可以在 pageQuery 使用 context 所傳進去的 slug</span>\n      component<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./src/templates/post.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      layout<span class="token punctuation">:</span> <span class="token string">\'index\'</span><span class="token punctuation">,</span>\n      context<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Data passed to context is available in page queries as GraphQL variables.</span>\n        slug<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>-</p>\n<h2 id="page-設計"><a href="#page-%E8%A8%AD%E8%A8%88" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Page 設計</h2>\n<p>在 Gatsby 的架構內，每一個需要不同 URL 的頁面都需要自己創造一個 page，例如：首頁、每一篇文章、archive 頁面等等，底下列出此部落格需要的 URL：</p>\n<ul>\n<li><code class="language-text">/</code>: index page</li>\n<li><code class="language-text">/YYYY/MM/DD/&lt;blog-title&gt;/</code>: article page</li>\n<li><code class="language-text">/archives</code>: archives page</li>\n<li><code class="language-text">/tags/&lt;tag&gt;</code>: tags page</li>\n</ul>\n<h3 id="index-page"><a href="#index-page" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>index page</h3>\n<p>因為 Gatsby 底下會自動的把 <code class="language-text">./src/pages/*.js</code> 自動 create page，所以我們在設計首頁的時候，就是去修改 <code class="language-text">./src/pages/index.js</code> 此頁即可。</p>\n<p>該頁最主要就是把所有的文章時間、title 等資料拿出來，GraphQL 的 query 如下：</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql">// src/pages/index.js\nexport const pageQuery <span class="token operator">=</span> graphql`\n  <span class="token keyword">query</span> BlogIndexQuery <span class="token punctuation">{</span>\n    <span class="token comment"># query 依照 date 排序</span>\n    allMarkdownRemark<span class="token punctuation">(</span><span class="token attr-name">sort</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">fields</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>frontmatter___date<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token attr-name">order</span><span class="token punctuation">:</span> DESC <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      edges <span class="token punctuation">{</span>\n        node <span class="token punctuation">{</span>\n          fields <span class="token punctuation">{</span>\n            slug\n          <span class="token punctuation">}</span>\n          html <span class="token comment"># 需要把 html 拿回來 render</span>\n          frontmatter <span class="token punctuation">{</span>\n            title\n            <span class="token comment"># 可以在此處就把 date format 成我們要的格式</span>\n            date<span class="token punctuation">(</span><span class="token attr-name">formatString</span><span class="token punctuation">:</span> <span class="token string">"MMM DD, YYYY"</span><span class="token punctuation">)</span>\n            tags\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n`;</code></pre>\n      </div>\n<p>上述的 <code class="language-text">html</code> 也可以用 <code class="language-text">excerpt</code> 去拿，但我選擇拿 html 再選擇我要的顯示在首頁部分內容。</p>\n<h3 id="archives-page"><a href="#archives-page" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>archives page</h3>\n<p>該頁面與 index page 大同小異，該 page 位於 <code class="language-text">./src/pages/archives.js</code>，唯一不同的是因為 archives page 有一種整理的效果，因此我們只要拿 title、date、tags 即可。</p>\n<h3 id="tags-page"><a href="#tags-page" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>tags page</h3>\n<p>tags page 顧名思義就是每篇文章我會給一些 tag，寫在 Markdown 最上方，所以可以利用套件幫我們產生的 frontmatter 拿到每一篇的 tags 資料，但要怎樣擁有不同頁的 tag 呢？</p>\n<p>此時就必須在 createPage 的時候就將所有的 tag 拿出來，然後產生每一個 tag 的 page。</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">//</span>\nexports<span class="token punctuation">.</span>createPages <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> graphql<span class="token punctuation">,</span> boundActionCreators <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> createPage <span class="token punctuation">}</span> <span class="token operator">=</span> boundActionCreators<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> allMarkdown <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">graphql</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`\n    {\n      allMarkdownRemark {\n        edges {\n          node {\n            frontmatter {\n              tags\n            }\n          }\n        }\n      }\n    }\n  `</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  allMarkdown<span class="token punctuation">.</span>data<span class="token punctuation">.</span>allMarkdownRemark<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> node <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> tags <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>frontmatter<span class="token punctuation">;</span>\n\n    tags<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>tag <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">createPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        path<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/tags/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// 此處創造 tag URL</span>\n        component<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./src/templates/tags.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 選擇用 tags template</span>\n        layout<span class="token punctuation">:</span> <span class="token string">\'index\'</span><span class="token punctuation">,</span>\n        context<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          tag<span class="token punctuation">,</span> <span class="token comment">// 傳進去讓 tags template 的 pageQuery 可以使用該 tag 去 query</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>創造完每一頁 tag 的 page 之後，我們來看看 tags template 應該怎樣寫。</p>\n<div class="gatsby-highlight" data-language="graphql">\n      <pre class="language-graphql"><code class="language-graphql">// ./src/templates/tags.js\nexport const pageQuery <span class="token operator">=</span> graphql`\n  <span class="token keyword">query</span> PostByTag<span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    allMarkdownRemark<span class="token punctuation">(</span>\n      <span class="token attr-name">filter</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">frontmatter</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">tags</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">in</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">$tag</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n      <span class="token attr-name">sort</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">fields</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>frontmatter___date<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token attr-name">order</span><span class="token punctuation">:</span> DESC <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      edges <span class="token punctuation">{</span>\n        node <span class="token punctuation">{</span>\n          id\n          html\n          fields <span class="token punctuation">{</span>\n            slug\n          <span class="token punctuation">}</span>\n          frontmatter <span class="token punctuation">{</span>\n            title\n            date<span class="token punctuation">(</span><span class="token attr-name">formatString</span><span class="token punctuation">:</span> <span class="token string">"MMM DD, YYYY"</span><span class="token punctuation">)</span>\n            tags\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n`;</code></pre>\n      </div>\n<p>最關鍵的就是 Query 的參數了，利用 createPage 傳進來的 <code class="language-text">$tag</code>，我們在 <code class="language-text">allMarkdownRemark</code> 的參數就利用到了 <code class="language-text">filter</code>、<code class="language-text">sort</code> 等使用情境，拿回所有擁有這個 tag 的文章資料再去做 render。</p>\n<h2 id="favicon"><a href="#favicon" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Favicon</h2>\n<p>當初設定 Favicon 也遇到一些問題，本來以為放在 <code class="language-text">/static/favicon.ico</code> 就可以讓瀏覽器抓到，可是怎麼嘗試都不成功。\n後來請教同事 <a href="https://github.com/jigsawye">@jigsawye</a> 才發現原來是要利用 loader，也就是直接將 favicon file 給 <code class="language-text">import</code> 到環境內，再利用 <code class="language-text">react-helmet</code> 做操作。</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// ./src/layouts/Head.js</span>\n<span class="token keyword">import</span> Helmet <span class="token keyword">from</span> <span class="token string">\'react-helmet\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> Favicon <span class="token keyword">from</span> <span class="token string">\'../assets/favicon.png\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Head</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Helmet<span class="token operator">></span>\n    <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"icon"</span> type<span class="token operator">=</span><span class="token string">"image/png"</span> sizes<span class="token operator">=</span><span class="token string">"30x30"</span> href<span class="token operator">=</span><span class="token punctuation">{</span>Favicon<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Helmet<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Head<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>-</p>\n<h2 id="gatsby-plugins--useful-packages"><a href="#gatsby-plugins--useful-packages" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gatsby plugins &#x26; useful packages</h2>\n<p>推薦幾個在架設這個部落格用到的 Gatsby plugin</p>\n<ul>\n<li><code class="language-text">gatsby-plugin-react-next</code>: v1 還是內建 react v15，所以需要裝這套</li>\n<li><code class="language-text">gatsby-plugin-react-helmet</code>: 操作該頁面的 HTML meta 資料</li>\n<li><code class="language-text">gatsby-remark-prismjs</code>: 可以將 Markdown 內的程式碼做上色</li>\n<li><code class="language-text">gatsby-remark-autolink-headers</code>: 可以讓 Markdown 的 Heading 都自動加上 id，瀏覽更方便</li>\n<li><code class="language-text">gatsby-plugin-sitemap</code>：自動產生 Sitemap</li>\n<li><code class="language-text">gatsby-plugin-feed</code>：自動產生 RSS feed，production 才會輸出，輸出檔名為 <code class="language-text">/rss.xml</code></li>\n<li><code class="language-text">gatsby-plugin-google-analytics</code>: 可以載入 GA 使用</li>\n<li><code class="language-text">disqus-react</code>: Disqus 官方的 React 套件</li>\n</ul>\n<h2 id="結論"><a href="#%E7%B5%90%E8%AB%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>結論</h2>\n<p>這次的搬家花了不少心力，其中最多的時間其實是在重新架構整個 layout，而搬家過後因為 client side render，整體速度提昇不少，也對於 Gatsby 的生態圈蠻看好，希望可以持續發展。</p>\n<p>雖然現在市面上有很多撰寫文章的平台（例如：Medium），不過這種一手打造的部落格，擁有自己 content 的感覺，或許就是工程師的浪漫吧。</p>',
excerpt:"本篇文章記錄了我將部落格從 Hexo 轉換到 Gatsby 的過程，以及這過程當中相關設定的經驗分享。 本篇文章並非詳細介紹 Gatsby，如想了解更多，請至 官方網站 。 緣由 Hexo 是一套歷史已久的 static site generator…",fields:{slug:"/2018/06/08/從-Hexo-到-Gatsby/"},frontmatter:{title:"從 Hexo 到 Gatsby",date:"Jun 08, 2018",tags:["hexo","gatsby"]}}},pathContext:{slug:"/2018/06/08/從-Hexo-到-Gatsby/"}}}});
//# sourceMappingURL=path---2018-06-08-從-hexo-到-gatsby-0542bd6e85b0189ed1a1.js.map