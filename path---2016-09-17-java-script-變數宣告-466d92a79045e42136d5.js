webpackJsonp([0xfb567a7ef215],{382:function(n,a){n.exports={data:{site:{siteMetadata:{title:"kpman | code",siteUrl:"https://code.kpman.cc",disqusShortname:"kpmancode"}},markdownRemark:{id:"/Users/kpman/workspace/kpman.github.com/content/_posts/2016-09-17-JavaScript-變數宣告.md absPath of file >>> MarkdownRemark",html:'<p>JS 宣告變數的方式在 ES6 之後增加了 <code class="language-text">let</code> 和 <code class="language-text">const</code>，這篇文章將會談談 <code class="language-text">var</code>、<code class="language-text">let</code> 和 <code class="language-text">const</code>之間的差異。</p>\n<p><img src="https://i.imgur.com/Jgd8jj5.jpg"></p>\n<!-- more -->\n<h2 id="變數宣告的過程"><a href="#%E8%AE%8A%E6%95%B8%E5%AE%A3%E5%91%8A%E7%9A%84%E9%81%8E%E7%A8%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>變數宣告的過程</h2>\n<p><img src="https://i.imgur.com/ya351ON.png"></p>\n<p>如圖所見，JS 內變數的宣告總共會經歷三個階段</p>\n<ul>\n<li>Declaration: 在相對應的作用域範圍內註冊變數名字</li>\n<li>Initialization: 分配記憶體使用</li>\n<li>Assignment: 賦予該變數的值</li>\n</ul>\n<h2 id="var"><a href="#var" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>var</h2>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> x<span class="token punctuation">;</span> <span class="token comment">// Declaration, Initialization</span>\nx <span class="token operator">=</span> <span class="token string">\'Hello World\'</span><span class="token punctuation">;</span> <span class="token comment">// Assignment</span>\n\n<span class="token comment">// all in one line</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">\'Hello World\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">var</code> 廣泛被使用，直到 ES6 推出後才有了其他的替代方式，而如果 var 被宣告在函數內，則沒有辦法在函數外部取得該變數。</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">someFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> innerVar <span class="token operator">=</span> <span class="token string">\'hi\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> innerVar<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>innerVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: innerVar is not defined</span></code></pre>\n      </div>\n<h2 id="let"><a href="#let" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>let</h2>\n<p>在 ES6 後，出現了 <code class="language-text">let</code> 的方式宣告變數，它和 <code class="language-text">var</code> 有共同的作用，便是在函數中封閉，額外的效果是在 block statement 內也是封閉，作用域變得更小範圍，可以減少錯誤的發生。</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">let</span> x<span class="token punctuation">;</span> <span class="token comment">// Declaration, Initialization</span>\nx <span class="token operator">=</span> <span class="token string">\'Hello World\'</span><span class="token punctuation">;</span> <span class="token comment">// Assignment</span>\n\n<span class="token comment">// all in one line</span>\n<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token string">\'Hello World\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> innerLet <span class="token operator">=</span> <span class="token string">\'hi\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do nothing</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>innerLet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: innerLet is not defined</span></code></pre>\n      </div>\n<p>上述例子代表 innerLet 只能在 block statement 內存活，跳出這個 block statement 就無法取得，我們將 let 換成 var 看看：</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> innerLet <span class="token operator">=</span> <span class="token string">\'hi\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do nothing</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>innerLet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hi</span></code></pre>\n      </div>\n<p>由上述可以清楚看到將 <code class="language-text">let</code> 宣告的方式改成 <code class="language-text">var</code> 則可以在 block statement 之外取得該變數，這就是 <code class="language-text">let</code> 相對於 <code class="language-text">var</code> 作用域更小的關係。</p>\n<h2 id="const"><a href="#const" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>const</h2>\n<p><code class="language-text">const</code> 顧名思義就是 constant 的縮寫，ES6 新的語法，代表說只要當宣告過後，該賦予的值就不能被更動，更嚴格來說，是該變數指向的記憶體位址不能被更動。因此，當利用 const 宣告了 <code class="language-text">Array</code> 或是 <code class="language-text">Object</code>，只要不重新賦予值，而是更動 array 或 object 內部狀況，是可以被接受的操作方式，參考以下例子：</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>\n<span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Assignment to constant variable.</span>\n\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 3.14159 ];</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span>pi <span class="token operator">=</span> <span class="token constant">PI</span><span class="token punctuation">;</span> <span class="token comment">// { pi: 3.14159 };</span>\n\narr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Assignment to constant variable.</span>\nobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Assignment to constant variable.</span></code></pre>\n      </div>\n<h2 id="hoisting"><a href="#hoisting" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hoisting</h2>\n<p>在利用 <code class="language-text">var</code>, <code class="language-text">let</code>, <code class="language-text">const</code> 宣告變數的時候，變數都會自動的做 <code class="language-text">Hoisting</code>，也就是被抬升到該作用域的最高處，但是抬升過後，<code class="language-text">var</code> 會對於變數賦予值 <code class="language-text">undefined</code>，而 <code class="language-text">let</code>, <code class="language-text">const</code>一樣也會被抬升，但是沒有初始值，因此會有 ReferenceError 發生。</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n<span class="token keyword">var</span> hello<span class="token punctuation">;</span>\nhello <span class="token operator">=</span> <span class="token string">"I\'m a variable"</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>world<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: world is not defined</span>\n<span class="token keyword">let</span> world<span class="token punctuation">;</span>\nworld <span class="token operator">=</span> <span class="token string">"I\'m a variable"</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="結論"><a href="#%E7%B5%90%E8%AB%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>結論</h2>\n<p>在 ES6 推出後，應該盡可能的利用 <code class="language-text">let</code> 和 <code class="language-text">const</code> 去宣告變數，因為它們的限制更高，會減少出錯的機會。若有使用 ESLint，甚至有條件限制使用 <code class="language-text">var</code>。若是情況一定需要使用 <code class="language-text">var</code>，也應該在作用域的最一開始就宣告變數，以免發生 hoisting 導致無法預期的結果出現。</p>\n<h3 id="reference"><a href="#reference" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>reference</h3>\n<ul>\n<li><a href="https://www.sitepoint.com/how-to-declare-variables-javascript/">How to Declare Variables in Javascript</a></li>\n<li><a href="https://github.com/rccoder/blog/issues/15">如何在 JavaScript 中声明变量</a></li>\n</ul>',fields:{slug:"/2016/09/17/JavaScript-變數宣告/"},frontmatter:{title:"JavaScript 變數宣告",date:"Sep 17, 2016",tags:["js"]}}},pathContext:{slug:"/2016/09/17/JavaScript-變數宣告/"}}}});
//# sourceMappingURL=path---2016-09-17-java-script-變數宣告-466d92a79045e42136d5.js.map