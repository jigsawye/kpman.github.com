<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[kpman | code]]></title>
  <subtitle><![CDATA[記錄開發過程大小事]]></subtitle>
  <link href="http://code.kpman.cc/atom.xml" rel="self"/>
  <link href="http://code.kpman.cc"/>
  <updated>2016-09-13T15:29:20.830Z</updated>
  <id>http://code.kpman.cc/</id>
  <author>
    <name><![CDATA[kpman | code]]></name>
    <email><![CDATA[s92f002@gmail.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[babel 相關名詞簡介]]></title>
    <link href="http://code.kpman.cc/2016/09/13/babel-相關名詞簡介/"/>
    <id>http://code.kpman.cc/2016/09/13/babel-相關名詞簡介/</id>
    <published>2016-09-13T15:27:11.000Z</published>
    <updated>2016-09-13T15:28:24.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/babel/logo/master/babel.png" alt=""></p>
<p>babel 是現代前端工程師都不陌生的工具，它可以將 ES6(+) 的語法轉換為 ES5 甚至是更低的版本，利用 babel 可以讓開發者即刻享受到 ES6 語法所帶來的便利性。<br>然而許多 babel 相關的名詞卻常常困擾想要入門的新手們，因此利用這篇文章簡介那些與 babel 相關的名詞，以 babel 6 為主。</p>
<p>本篇將會會介紹到：</p>
<ul>
<li>.babelrc</li>
<li>babel-cli (with babel-node)</li>
<li>babel-preset vs. babel-plugin</li>
<li>babel-register</li>
<li>babel-polyfill</li>
<li>babel-plugin-transform-runtime ＆ babel-runtime</li>
<li>babel-loader</li>
<li>babel-eslint</li>
</ul>
<a id="more"></a>
<p>本篇文章並非完善的介紹整個 babel 生態系，而是作者整理自己常見且容易搞錯的 babel 相關名詞。</p>
<h2 id="一、-babelrc">一、.babelrc</h2>
<p>這是 babel 這個工具需要用到的 conf file，以下所介紹到的各項都需要做設定讓 babel 知道該如何做轉換。</p>
<p>方法一：</p>
<p>直接寫獨立的 <code>.babelrc</code> 檔，一個基本的格式如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  "<span class="attribute">parser</span>": <span class="value"><span class="string">"babel-eslint"</span></span>,</div><div class="line">  "<span class="attribute">extends</span>": <span class="value"><span class="string">"airbnb"</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>方法二：</p>
<p>直接寫進 <code>package.json</code> 檔</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  <span class="string">"name"</span>: <span class="string">"my-package"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"babel"</span>: {</div><div class="line">    <span class="comment">// your babel config here</span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="二、babel-cli">二、babel-cli</h2>
<p>利用 npm 安裝 babel-cli 將會同時註冊 <code>babel</code> 和 <code>babel-node</code> 兩個最常見的指令。</p>
<p><code>npm install babel-cli --save-dev</code></p>
<p>利用上述指令安裝在 project 的目錄底下。</p>
<h3 id="babel">babel</h3>
<p>可以直接在 command line 下 babel 做 ES6 的語法轉換，<br>常用的情景為將 src 資料夾 build 成 lib 資料夾，<br>因為身為 library 開發者，不要預設使用者有 ES6 的環境為佳，<br>上述簡單的指令如下：</p>
<p><code>babel src -d lib</code></p>
<p>若需更多參數，請參考官方教學。</p>
<h3 id="babel-node">babel-node</h3>
<p>可以利用 <code>babel-node myEs6.js</code> 直接運行 ES6 的 code，<br>當然需要 .babelrc 檔還有相關的 presets 或是 plugins 檔做為 babel 轉換的依據。</p>
<p>而 <code>babel-node</code> 運行的時候會預設載入 <code>babel-polyfill</code> 使用，<br>因此會佔大量的記憶體空間，官方不建議在 production 環境使用。</p>
<h2 id="三、babel-preset_vs-_babel-plugin">三、babel-preset vs. babel-plugin</h2>
<p>這兩個 presets 和 plugins 在 <code>.babelrc</code> 檔內會很常看到，<br>其中的差異便是 preset 是 plugins 的集合，<br>一個 preset 當中可以包含其他 preset 和好幾個不同的 plugins，<br>例如 <code>babel-preset-es2015</code> 當中包含了<br><code>transform-es2015-arrow-functions</code><br><code>transform-es2015-block-scoped-functions</code><br>等 21 個不同的 plugins。</p>
<p><strong>順序問題</strong></p>
<p>babel 在執行 transform 的過程，會 plugins 先載入，且按照由上往下（由左向右）的順序載入，<br>但是要注意的事情，presets 會在 plugins 之後，然後載入的順序是由下往上（由右向左）的反向順序。</p>
<h3 id="stage">stage</h3>
<p>babel 的 preset 有不同的 stage，最常見的 <code>Stage 0 preset</code> 就包含了</p>
<ul>
<li>preset-stage-1</li>
<li>preset-stage-2</li>
<li>preset-stage-3</li>
</ul>
<p>而 stage 數字越大的 preset 所包含的 plugins 代表越接近進入 release 核心，<br>許多開發者會直接採用 stage 0 的 preset 使用就是因為其包含了 stage 1, 2, 3 的 presets.</p>
<h2 id="四、babel-register">四、babel-register</h2>
<p>當載入 babel-register 後，其接下來的 es6 語法都可以被設定的 .babelrc 做轉換，<br>載入的方式通常需要一個 entry.js 檔，由於在這個進入點 node 並不知道 es6 語法，<br>因此於此需要利用 <code>require(&#39;babel-register&#39;)</code> 的方式載入</p>
<p><code>entry.js</code> 進入點簡單範例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'babel-register'</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">'./yourEs6Index'</span>);</div></pre></td></tr></table></figure>

<p>因此未來執行 <code>node entry.js</code> 就可以利用 <code>babel-register</code> 動態載入的方式進行轉換語法。</p>
<h2 id="五、babel-polyfill">五、babel-polyfill</h2>
<p>什麼是 <code>polyfill</code>?</p>
<p>wiki: In web development, a polyfill is code that implements a feature on web browsers that do not support the feature.</p>
<p>因此 <code>babel-polyfill</code> 顧名思義就是 babel 幫我們做了一些現階段還沒有被支援的 feature，好讓我們在現階段就可以利用一些未來原生會支援的 feature，<br>例如：<code>Promise</code>, <code>Array.from</code>, <code>Object.assign</code>, <code>Array.includes</code> 等。</p>
<p><strong>babel-node</strong><br>當利用 babel-node 去運行 js 檔的時候，會<strong>預設</strong>載入 <code>babel-polyfill</code>，<br>因此你即刻可利用 babel-node run 一個帶有 promise 的 js 檔，<br>而不需再另外 require <code>bluebird</code> 等套件。</p>
<h2 id="六、babel-plugin-transform-runtime_＆_babel-runtime">六、babel-plugin-transform-runtime ＆ babel-runtime</h2>
<p>在做轉換的時候，若利用 <code>babel-polyfill</code> 會做 global scope，所以當你今天是要做 lib/tool 模式，沒辦法控制你的運行環境，則不適合利用 babel-polyfill，需要用 <code>babel-plugin-transform-runtime</code> 為佳。</p>
<ol>
<li><code>babel-plugin-transform-runtime</code> 會把多個檔案 reference 到 <code>babel-runtime</code> 這個 package，因此當你使用 <code>transform-runtime</code> 就一定要裝 <code>babel-runtime</code></li>
<li><code>babel-plugin-transform-runtime</code> 的轉換機制也是 alias 到 <code>core-js</code>，就和 <code>babel-polyfill</code> 一樣，所以不用再 require <code>babel-polyfill</code></li>
<li>官方建議安裝方法如下： transform 安裝進 devDependencies</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-plugin-transform-runtime</div><div class="line">$ npm install --save babel-runtime</div></pre></td></tr></table></figure>

<h2 id="七、babel-loader">七、babel-loader</h2>
<p><code>loader</code> 是 <code>webpack</code> 用來載入各種不同文件的工具，而 <code>babel-loader</code> 就是 webpack 用來執行 babel 的方式。</p>
<p>利用 <code>babel-loader</code> 可以利用 webpack 打包時候同時進行 babel 的轉換，以下是簡單範例檔：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: {</div><div class="line">  loaders: [</div><div class="line">    {</div><div class="line">      test: <span class="regexp">/\.js$/</span>,</div><div class="line">      loaders: [<span class="string">'babel'</span>],</div><div class="line">      exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">    },</div><div class="line">  ],</div><div class="line">},</div></pre></td></tr></table></figure>

<p>因為 <code>babel-loader</code> 的速度很慢，官方強烈建議把 <code>node_modules</code> exclude 掉。</p>
<h2 id="八、babel-eslint">八、babel-eslint</h2>
<p><code>ESLint</code> 可以說是近代最偉大的 linter 工具發明了，它可以讓使用者高度客製化的 parser 語法，而目前原生的 ESLint 支援的語法有 <code>ES6/ES7</code>, <code>JSX</code>, and <code>object rest/spread</code>，如果你用到的更多 babel 語法則需要 babel-eslint 來幫忙。</p>
<p><code>$ npm install eslint@3.x babel-eslint@6 --save-dev</code></p>
<p>.eslintrc 範例檔</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  "<span class="attribute">parser</span>": <span class="value"><span class="string">"babel-eslint"</span></span>,</div><div class="line">  "<span class="attribute">rules</span>": <span class="value">{</span></div><div class="line">    "<span class="attribute">strict</span>": <span class="value"><span class="number">0</span></span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="結論">結論</h2>
<p>當然 babel 的套件不僅僅如此，還有 <code>babelify</code> 等相關工具尚未有時間介紹，本篇所做的介紹希望能對於部分開發者有幫助。<br>若有不清楚或者會誤導讀者的方向，還請不吝指教。</p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/babel/" term="babel"/>
    <category scheme="http://code.kpman.cc/tags/es6/" term="es6"/>
    <category scheme="http://code.kpman.cc/tags/js/" term="js"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[node.js 爬 Facebook 留言版]]></title>
    <link href="http://code.kpman.cc/2016/05/17/node-js-爬-Facebook-留言版/"/>
    <id>http://code.kpman.cc/2016/05/17/node-js-爬-Facebook-留言版/</id>
    <published>2016-05-17T13:54:04.000Z</published>
    <updated>2016-05-17T15:31:57.000Z</updated>
    <content type="html"><![CDATA[<p>聽到網路爬蟲，有很多專案都是建立在 python 上面，在文字處理分析上， python 有很強大的套件可以使用，然而隨著 node.js 的發展越來越廣泛，也有許多因應的套件產生，今天將會介紹利用 FB 提供的 Graph API 來爬留言版。</p>
<p><img src="http://i.imgur.com/2Qckxbc.jpg" alt="Facebook Comment Plugin"></p>
<a id="more"></a>
<p>本文並非會有教學範例檔，僅會針對 FB 提供的 Graph API 做簡單的範例。<br>此處的範例會利用 ES6 的 <code>template strings</code> 語法。</p>
<h2 id="1-_了解_FB_留言版架構">1. 了解 FB 留言版架構</h2>
<p>最近 FB 推出了可以回覆他人的功能，因此留言有可能會有巢狀情形，但可以觀察到的是，目前 FB 的機制就是至多一層的回覆。因此簡單的架構如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">comment <span class="number">1</span></div><div class="line">  - reply_comment <span class="number">1</span></div><div class="line">  - reply_comment <span class="number">2</span></div><div class="line">comment <span class="number">2</span></div><div class="line">  - reply_comment <span class="number">1</span></div><div class="line">  _ reply_comment <span class="number">2</span></div><div class="line"><span class="keyword">...</span></div><div class="line"><span class="keyword">...</span></div></pre></td></tr></table></figure>

<h2 id="2-_確定該網址的留言數">2. 確定該網址的留言數</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`http:<span class="comment">//graph.facebook.com/?id=${URL}`</span></div></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET <span class="string">'http://graph.facebook.com/?id=http://www.google.com'</span></div><div class="line">{</div><div class="line">  id: <span class="string">"http://www.google.com"</span>,</div><div class="line">  shares: <span class="number">31205003</span>,</div><div class="line">  comments: <span class="number">1323</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>因此可以知道 www.google.com 在 FB Graph API 有 1323 筆留言數。</p>
<h2 id="3-_利用_Graph_API_拿第一層留言">3. 利用 Graph API 拿第一層留言</h2>
<p>Graph API 在留言版其實是公開，只要給定 URL 就可以拿到該網址的留言，<br>這邊要注意的是需要確定該 URL 是 OG:URL 的參數給 FB 才拿的到。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`http:<span class="comment">//graph.facebook.com/comments?id=${URL}&limit=${comments}&filter=stream`</span></div></pre></td></tr></table></figure>

<p>底下是 return sample json</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  created_time: <span class="string">"2012-04-16T12:45:03+0000"</span>,</div><div class="line">  from: {</div><div class="line">    name: <span class="string">"Sunil Maheshwari"</span>,</div><div class="line">    id: <span class="string">"100000525493028"</span></div><div class="line">  },</div><div class="line">  message: <span class="string">"hello"</span>,</div><div class="line">  can_remove: <span class="literal">false</span>,</div><div class="line">  like_count: <span class="number">0</span>,</div><div class="line">  user_likes: <span class="literal">false</span>,</div><div class="line">  id: <span class="string">"381702034999_21746175"</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>若此處沒有加上 <code>&amp;limit</code> 的話，會拿到比較少的數量。<br>加上 <code>&amp;filter=stream</code> 參數，則會一併將回覆狀態的留言拿回來。<br>因為在此記錄部落格使用，在實作上並不會加上 <code>&amp;filter=stream</code> 這個參數，以免拿第二層的時候重複還需要做額外處理。</p>
<h2 id="4-_拿_Graph_API_第二層留言">4. 拿 Graph API 第二層留言</h2>
<p>在拿第一層的時候，因為是 public API 狀態，因此不需要 token，且網址利用 http 就可以。<br>但在拿第二層留言，就需要 https + access_token 狀態。</p>
<p>最簡單取得 access_token 方式是到 <a href="https://developers.facebook.com/tools/explorer/" target="_blank" rel="external">FB graph explorer</a> 申請 access_token 來實作。</p>
<p>接著需要串接的 API 格式為：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`https:<span class="comment">//graph.facebook.com/${id}/comments?access_token=${token}`</span></div></pre></td></tr></table></figure>

<p>上述 id 就是第一層拿回來的 json 格式內的 id，<br>token 則是 access_token。</p>
<p>在實作上因為無法透過第一層的 API 得到是否有無第二層留言，因此若要完整的拿取全部的留言，則需要將全部的 id 跑過一次才可以得到完整的結果。</p>
<h2 id="reference">reference</h2>
<ul>
<li><a href="http://www.oneminuteinfo.com/2015/06/use-api-to-get-fb-comments-plugin-posts.html" target="_blank" rel="external">Using Facebook Graph API To Crawl Comments from a Facebook Comments Plugin</a></li>
<li><a href="https://developers.facebook.com/tools/explorer/" target="_blank" rel="external">FB graph explorer</a></li>
</ul>
]]></content>
    <category scheme="http://code.kpman.cc/tags/nodejs/" term="nodejs"/>
    <category scheme="http://code.kpman.cc/tags/api/" term="api"/>
    <category scheme="http://code.kpman.cc/tags/facebook/" term="facebook"/>
    <category scheme="http://code.kpman.cc/tags/parser/" term="parser"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[在 slack 建立 hubot]]></title>
    <link href="http://code.kpman.cc/2016/04/18/在-slack-建立-hubot/"/>
    <id>http://code.kpman.cc/2016/04/18/在-slack-建立-hubot/</id>
    <published>2016-04-18T14:42:02.000Z</published>
    <updated>2016-04-18T16:15:36.000Z</updated>
    <content type="html"><![CDATA[<p>slack 推出 bot 在 2016 這個時間點已經不算新鮮事，隨著 messenger 也推出自家的 bot 後，才真正開始接觸架設自己的 bot，網路上查到都是日文的資源較多，因此記錄這篇過程，希望能幫助到其他中文開發者。</p>
<p><img src="http://i.imgur.com/qzHh7bb.png" alt="slakbot &amp; hubot"></p>
<a id="more"></a>
<h2 id="零、懶人包指令">零、懶人包指令</h2>
<p>先把會用到的全部指令列在這邊，下面會分項目做解釋</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">npm install -<span class="keyword">g</span> hubot coffee-script yo generator-hubot</div><div class="line"><span class="built_in">mkdir</span> hubot</div><div class="line"><span class="keyword">cd</span> hubot</div><div class="line">yo hubot</div><div class="line">npm install hubot-slack --save</div><div class="line">git init</div><div class="line">git <span class="built_in">add</span> .</div><div class="line">git commit -<span class="keyword">m</span> <span class="string">"Initial commit"</span></div><div class="line">GET HUBOT_SLACK_TOKEN // http<span class="variable">s:</span>//my.slack.<span class="keyword">com</span>/services/<span class="keyword">new</span>/hubot</div><div class="line">Install the Heroku Toolbelt // http<span class="variable">s:</span>//toolbelt.heroku.<span class="keyword">com</span>/ </div><div class="line">heroku create <span class="string">"project-name"</span></div><div class="line">heroku confi<span class="variable">g:add</span> HEROKU_URL=http<span class="variable">s:</span>//<span class="string">"project-name"</span>.herokuapp.<span class="keyword">com</span></div><div class="line">heroku confi<span class="variable">g:add</span> HUBOT_SLACK_TOKEN=<span class="string">"xoxb-********-********"</span></div><div class="line">git push heroku master</div></pre></td></tr></table></figure>

<h2 id="一、安裝本地環境">一、安裝本地環境</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> -g hubot coffee-script yo generator-hubot</span></div></pre></td></tr></table></figure>

<p>hubot 會用到 coffee-script 和 yo 去產生整個專案，所以需要安裝在全域 <code>-g</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> hubot</div><div class="line"><span class="keyword">cd</span> hubot</div></pre></td></tr></table></figure>

<p>此處創建資料夾可建立自己的名字</p>
<h2 id="二、產生_hubot_專案">二、產生 hubot 專案</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">yo</span> hubot</div></pre></td></tr></table></figure>

<p>這邊會問你一些問題，記得在 <code>adapter</code> 打 <code>slack</code><br>此舉會讓官方產生預設 heroku 的 <code>Procfile</code> 裡面多了這一行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">web</span>: <span class="string">bin/hubot -a slack</span></div></pre></td></tr></table></figure>

<p>這是為了讓 heroku 啟動時候知道怎樣運作的指令</p>
<h2 id="三、安裝_hubot-slack_套件">三、安裝 hubot-slack 套件</h2>
<p>這是 slack 官方維護的套件，穩定度應該頗高，安裝後一併做一個專案 git 初始化並 commit</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> hubot-slack <span class="comment">--save</span></span></div><div class="line">git init</div><div class="line">git <span class="keyword">add</span> .</div><div class="line">git <span class="keyword">commit</span> -m <span class="string">"Initial commit"</span></div></pre></td></tr></table></figure>

<h2 id="四、取得_HUBOT_SLACK_TOKEN">四、取得 HUBOT_SLACK_TOKEN</h2>
<p>到<a href="https://my.slack.com/services/new/hubot" target="_blank" rel="external">此處</a>建立新的 hubot service<br>若有多個 team 帳號，請記得確定你登入的帳號是在哪一個 team 底下</p>
<p>取一個 hubot 要在 slack 內的名字，下圖用 <code>hubot</code> 做示範</p>
<p><img src="http://i.imgur.com/bpsLcz7.png" alt="hubot"></p>
<p>接著下一步就可以取得 HUBOT_SLACK_TOKEN，記得把這個 TOKEN 記下來</p>
<h2 id="五、本機端測試">五、本機端測試</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HUBOT_SLACK_TOKEN=xoxb-<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>-<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> ./bin/hubot --adapter slack</div></pre></td></tr></table></figure>

<p>本機端記得先安裝 redis，hubot 會用到，<br>順利的話就可以在 slack 啟動 hubot 囉！</p>
<p><img src="http://i.imgur.com/EWkWV3Q.png" alt="hubot in slack"><br>可以打開 hubot 跟它對話，<br>如果看到 <code>PONG</code> 則代表成功</p>
<h2 id="六、將本地端_server_放上_heroku">六、將本地端 server 放上 heroku</h2>
<p>slack 官方推薦的平台是 heroku，這邊介紹如何運作，<br>要記得的原理就是其實上述已經在本機端可以運行了，<br>這個步驟就是將 server 放到 heroku 上面去跑而已。</p>
<p>首先安裝 Heroku Toolbelt，這部份請看 <a href="https://toolbelt.heroku.com/" target="_blank" rel="external">heroku 官方教學</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">heroku create <span class="string">"project-name"</span></div><div class="line">heroku confi<span class="variable">g:add</span> HEROKU_URL=http<span class="variable">s:</span>//<span class="string">"project-name"</span>.herokuapp.<span class="keyword">com</span></div><div class="line">heroku confi<span class="variable">g:add</span> HUBOT_SLACK_TOKEN=<span class="string">"xoxb-********-********"</span></div><div class="line">git push heroku master</div></pre></td></tr></table></figure>

<p>這個 project-name 其實就是未來你的 herokuapp 的 URL，<br>不能和其他人重複，因此名字可以想自己容易記得即可。</p>
<p><code>heroku config:add</code> 是將一些變數丟給遠端的 heroku 知道，<br>讓他可以抓到 <code>HEROKU_URL</code> <code>HUBOT_SLACK_TOKEN</code> 等，<br>接著就是將 local 這個 git repo push 到 heroku 上面。</p>
<h2 id="七、注意事項">七、注意事項</h2>
<p>等到 heroku 跑完後，hubot 的 server 已經跑在 heroku 上面了，<br>而免費的 heroku dyno 有每 24 小時一定要停機 6 小時的規定，<br>因此若要拿來當正式的 bot 服務，<br>建議自己架 server 或者就付費買 heroku 的服務。</p>
<p>另外，在 hubot 專案底下的 <code>hubot-heroku-keepalive</code> 就是會固定戳 heroku，避免 30 分鐘後這個 dyno 就休息了。</p>
<p>在 heroku 上面有免費的 redis add-on 可以用，<br>每個月有 30mb 的免費使用量。</p>
<h2 id="reference">reference</h2>
<ul>
<li><a href="https://hubot.github.com/docs/" target="_blank" rel="external">hubot official doc</a></li>
<li><a href="https://www.npmjs.com/package/hubot-slack" target="_blank" rel="external">hubot-slack npm README</a></li>
<li><a href="https://github.com/slackhq/hubot-slack#configuration" target="_blank" rel="external">hubot configuration on heroku</a> 推薦看這份</li>
</ul>
<p>有任何問題，歡迎留言討論。</p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/bot/" term="bot"/>
    <category scheme="http://code.kpman.cc/tags/slack/" term="slack"/>
    <category scheme="http://code.kpman.cc/tags/hubot/" term="hubot"/>
    <category scheme="http://code.kpman.cc/tags/heroku/" term="heroku"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[從 deploy node.js 專案所學]]></title>
    <link href="http://code.kpman.cc/2015/09/12/從deploy-node-js-專案所學/"/>
    <id>http://code.kpman.cc/2015/09/12/從deploy-node-js-專案所學/</id>
    <published>2015-09-12T15:18:17.000Z</published>
    <updated>2015-09-12T16:22:41.000Z</updated>
    <content type="html"><![CDATA[<p>學習 Node.js 已經兩年之餘，這段時間陸陸續續在開發上遇到一些問題（雷），然而隨著時間累積的叫做經驗，因此藉由此篇文章記錄從本機 development 環境到遠端 Linux 上的 production 所得到的經驗。</p>
<p><img src="http://i.imgur.com/GtZ5ROB.jpg" alt="Deploy"></p>
<a id="more"></a>
<p>以下的 localhost 環境皆為 Mac 10.10，express.js，<br>而 deploy 的環境皆為 Linux 14.04 環境。</p>
<h2 id="1-_環境變數">1. 環境變數</h2>
<p>NODE_ENV 是運行 Node.js 重要的變數，在本機開發的時候預設為 <code>NODE_ENV=development</code>。</p>
<p>在執行 <code>app.js</code> (aka <code>bin/www</code>) 時，選擇需要的變數 (development || production)，若要運行為 production 環境指令為</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">$ NODE_ENV</span>=<span class="string">production node bin/www</span></div></pre></td></tr></table></figure>

<p>當然這個 <code>NODE_ENV</code> 值可以直接 export 在你所運行的環境當中，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>export <span class="constant">NODE_ENV</span>=production</div><div class="line"><span class="variable">$ </span>node bin/www</div></pre></td></tr></table></figure>

<p>而若不想每次開啟 shell 都要重新 export 一次，可以將 export 指令寫進 <code>~/.bashrc</code> 內，之後開啟 shell 就會設定 NODE_ENV=production 了！</p>
<hr>
<p>Q：那如何在 express.js 框架下的 app.js 拿到環境變數呢？<br>A：只要利用 express 框架為我們做好的 API 如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line">app.<span class="keyword">get</span>(<span class="string">'env'</span>)</div></pre></td></tr></table></figure>

<p>即可得到 <code>NODE_ENV</code> 值。</p>
<h2 id="2-_config_檔設定">2. config 檔設定</h2>
<p>關於 config 檔的設定，每個人有不同的習慣，我介紹我常用的 config 檔設定方式。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// config.js</span></div><div class="line"><span class="keyword">var</span> config = {</div><div class="line">  development: {</div><div class="line">    port: <span class="number">3000</span>,</div><div class="line">    <span class="comment">// anything else</span></div><div class="line">  },</div><div class="line">  production: {</div><div class="line">    port: <span class="number">3001</span>,</div><div class="line">    <span class="comment">// anything else</span></div><div class="line">  }</div><div class="line">};</div><div class="line"><span class="built_in">module</span>.exports = config;</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="keyword">var</span> config = require(<span class="string">'./config.js'</span>)[app.<span class="keyword">get</span>(<span class="string">'env'</span>)];</div><div class="line"><span class="keyword">var</span> port = config.port <span class="comment">// production mode will return 3001</span></div></pre></td></tr></table></figure>

<p>這樣設定 config 檔後，未來就可以利用 NODE_ENV 的不同來判斷應該要連接的資料，例如在 dev DB 和 production DB 的分開等等情況。</p>
<h2 id="3-_ejs_樣板引擎快取問題">3. ejs 樣板引擎快取問題</h2>
<p>在樣板引擎方面我習慣 ejs，而 ejs 會在 <code>production</code> 的狀態下把 view template 快取起來，加速 render 的時間，因此需要做 restart node server 的情況才可以解決快取問題。</p>
<p>ps. 或許這個問題有其他更好解法，非常歡迎協助補充。</p>
<h2 id="4-_node_執行_-js_檔">4. node 執行 .js 檔</h2>
<p>因為曾經撞過這些雷，單純就是經驗不足，以致於值得記錄一下 XD</p>
<p>直接提供 debug 經驗談：</p>
<ul>
<li>chmod -x yourfile.js // 權限問題</li>
<li>讀檔＆寫檔 // 請確定<code>相對路徑</code>和<code>絕對路徑</code>在環境的問題</li>
<li>第一行請加上 <code>#!/usr/bin/env node</code> // 讓環境找得到 node 去執行它</li>
</ul>
<h2 id="5-_MongoDB_的匯出和匯入">5. MongoDB 的匯出和匯入</h2>
<p>Q：在本機端匯出和匯入都好好的，不知道為什麼到遠端的環境就沒有辦法匯入？<br>A：原因是語系問題，記得在 DB 匯入前先執行 export 或寫入 bashrc 檔</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> LC_ALL=<span class="string">"en_US.UTF-8"</span></div></pre></td></tr></table></figure>

<h2 id="後記">後記</h2>
<p>花時間經歷過的才會印象深刻，上述這幾點都是我利用時間所換來的，將此記錄在這邊，也希望能或多或少幫助到一些人：）</p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/node-js/" term="node.js"/>
    <category scheme="http://code.kpman.cc/tags/deploy/" term="deploy"/>
    <category scheme="http://code.kpman.cc/tags/tips/" term="tips"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[從 Pocket 儲存全文到 Evernote]]></title>
    <link href="http://code.kpman.cc/2015/07/23/從Pocket-儲存全文到Evernote/"/>
    <id>http://code.kpman.cc/2015/07/23/從Pocket-儲存全文到Evernote/</id>
    <published>2015-07-23T13:21:26.000Z</published>
    <updated>2015-07-23T13:56:50.000Z</updated>
    <content type="html"><![CDATA[<p>Pocket 是一款可以稍候待讀的 app，其漂亮的介面和離線閱讀的功能，使我對於它愛不釋手。<br>然而從英語語系出發的 Pocket 團隊，雖然在專業版提供全文檢索（full text search）的功能，但是在繁體中文上面還是略顯不足，常常找不到已經封存的文章內容，因此本篇記錄利用 Pocket 儲存到 Evernote 的過程。</p>
<p><img src="http://i.imgur.com/g9vZzcB.png" alt="RSS to Evernote"></p>
<a id="more"></a>
<p>Pocket 的閱讀介面是它的一大優勢，而 Evernote 的搜尋功能是有目共睹的準確，我們將利用 IFTTT 這個自動化工具來實作「當我從 Pocket 封存項目後，自動儲存全文到 Evernote」。</p>
<h2 id="0-_IFTTT_內建_Pocket_問題所在">0. IFTTT 內建 Pocket 問題所在</h2>
<p>有使用 <a href="https://ifttt.com" target="_blank" rel="external">IFTTT</a> 的朋友應該知道說其實它有內建 Pocket 的選項，但是由於它提供的 Pocket 儲存只有所謂的 Excerpt 的功能，也就是只有部分的內容，並沒有辦法全文儲存到 Evernote 的 note 當中。</p>
<p><img src="http://i.imgur.com/Q90mCAB.png" alt="ifttt pocket feature"></p>
<p>因此我們的解決步驟為：</p>
<ol>
<li>建立 Pocket archive item 的 public full text RSS feed</li>
<li>創建 RSS to Evernote 的 recipe</li>
<li>問題解決</li>
</ol>
<p>未來就可以利用 Evernote 強大的搜尋功能來做到找到曾經閱讀封存的文章。</p>
<h2 id="1-_建立_Pocket_的_Full_Text_RSS_來源">1. 建立 Pocket 的 Full Text RSS 來源</h2>
<ul>
<li>首先到 <a href="https://getpocket.com/privacy_controls" target="_blank" rel="external"><code>Pocket &gt; Options &gt; Privacy</code></a> 把 RSS feed 設為 public</li>
<li>點選 <code>Archive feed</code> 取得 Pocket 帳戶底下封存項目的 RSS feed link，連結應該為 <code>http://getpocket.com/users/&lt;你的帳號&gt;/feed/read</code></li>
<li>到 <a href="http://fivefilters.org/content-only/" target="_blank" rel="external"><code>fivefilters</code></a> 建立 full text RSS，貼上你的 feed url 後，按下 Create feed</li>
<li>把視窗連結記錄下來，這連結即為你的 full text RSS 來源</li>
</ul>
<h2 id="2-_創建_RSS_to_Evernote_Recipe">2. 創建 RSS to Evernote Recipe</h2>
<ul>
<li>根據此 <a href="https://ifttt.com/recipes/183722-save-full-text-of-new-pocket-item-to-evernote" target="_blank" rel="external"><code>recipe</code></a> 創建你自己的版本</li>
<li>將上述的 full text RSS 連結貼上</li>
<li>根據步驟創建你的 IFTTT recipe</li>
</ul>
<p>完成上述步驟後，即可在 Evernote 你所命名的筆記本內看到你在 pocket 所封存的項目囉。</p>
<h2 id="使用心得">使用心得</h2>
<p>其實在 pocket mobile app 上面，有直接儲存到 Evernote 的選項，但我閱讀文章完如果值得存下來的，我習慣直接 archive 起來。<br>實際使用這個 recipe 後，發現有一些網站的 full text RSS 抓的並不是很準確，速度也沒有很快，通常都要半個小時後才會在 Evernote 出現，但在網頁版並沒有存到 Evernote 的選項，在權衡下，我還是選擇使用此 recipe 來做為未來可以在 Evernote 搜尋的自動化工具。</p>
<h3 id="reference">reference</h3>
<p><a href="https://capeably.wordpress.com/2014/06/21/automate-full-text-of-pocket-backup-to-evernote-with-ifttt-and-fivefilters/" target="_blank" rel="external">Automate Full Text of Pocket Backup to Evernote with IFTTT and FiveFilters</a></p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/pocket/" term="pocket"/>
    <category scheme="http://code.kpman.cc/tags/evernote/" term="evernote"/>
    <category scheme="http://code.kpman.cc/tags/tool/" term="tool"/>
    <category scheme="http://code.kpman.cc/tags/ifttt/" term="ifttt"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Linux 之 command line 上手]]></title>
    <link href="http://code.kpman.cc/2015/05/10/Linux-之-command-line-上手/"/>
    <id>http://code.kpman.cc/2015/05/10/Linux-之-command-line-上手/</id>
    <published>2015-05-10T03:25:44.000Z</published>
    <updated>2015-05-10T03:57:28.000Z</updated>
    <content type="html"><![CDATA[<p>開發者對於 command line 一定不陌生，然而 Mac OS 會受到許多開發者的青睞，是因為其本身就是依照 unix 系統做開發，因此對於虛擬主機需要用到 command line 自然不陌生，整合性很好。</p>
<p>這篇 blog 記錄網站開發超過兩年半經驗的我，最常用到的終端機指令 (command line)。</p>
<p><img src="http://i.imgur.com/hGb22rh.png" alt=""></p>
<a id="more"></a>
<p>本篇針對的讀者是 mac 新手。</p>
<h2 id="環境設定">環境設定</h2>
<p>建議下載 iterm2 來使用，有興趣可參考<a href="/2015/02/07/Sublime-與-iTerm-的視窗配置/">設定</a></p>
<h2 id="常用指令">常用指令</h2>
<p>前面加上錢字號($)代表此行為 command line 開始，真正在打的時候不用加入<code>$</code></p>
<p><code>$ cd</code>: 移動 root 位置<br><code>$ cd ..</code>: 移動到目前所在位置的上一層<br><code>$ cd ../..</code>: 移動到目前所在位置的上兩層</p>
<p><code>$ pwd</code>: 列出目前完整路徑 —&gt; 可以知道自己現在在哪邊，再決定要如何利用 <code>cd</code> 移動</p>
<p><code>$ ls</code>: 列出所在目錄的檔案<br><code>$ ls -a</code>: 列出的目錄檔案包含隱藏檔<br><code>$ ls -al</code>: 列出的目錄檔案包含隱藏檔 &amp; 檔案屬性和權限</p>
<p><code>$ vi(m) **.xx</code>: 創建檔名為<code>**</code>，附檔名為<code>xx</code>的檔案 —&gt; 之後會進入vi(m) 文字編輯模式，推薦查閱<a href="http://linux.vbird.org/linux_basic/0310vi.php" target="_blank" rel="external">鳥哥vim教學</a></p>
<p><code>$ mkdir ***</code>: 創建名稱為<code>***</code>的資料夾<br><code>$ rmdir ***</code>: 移除名稱為<code>***</code>的資料夾 —&gt; 需確定資料夾為空</p>
<p><code>$ cp dest1 dest2</code>: 把 dest1 檔案複製到 dest2 的位置<br><code>$ mv dest1 dest2</code>: 把 dest1 檔案移動到 dest2 的位置，亦可作為變更檔名使用，例如 <code>$ mv test.txt no-test.txt</code>，就可以把檔名 test 的文字檔改變成為 no-test 檔名。</p>
<p><code>$ sudo su</code>: 取得 root 權限</p>
<p>以上列出我最常用的指令，許多指令都可以帶有特殊的參數，unix base底下的command line也不只這些，想要更進一步，可以再多去參考書籍或是教學。</p>
<h2 id="reference">reference</h2>
<p><a href="http://linux.vbird.org/linux_basic/0220filemanager.php#dir_path" target="_blank" rel="external">鳥哥 Linux 檔案與目錄管理</a></p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/linux/" term="linux"/>
    <category scheme="http://code.kpman.cc/tags/command-line/" term="command line"/>
    <category scheme="http://code.kpman.cc/tags/iterm2/" term="iterm2"/>
    <category scheme="http://code.kpman.cc/tags/終端機/" term="終端機"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[利用 crontab 來做 Linux 固定排程]]></title>
    <link href="http://code.kpman.cc/2015/02/11/利用-crontab-來做-Linux-固定排程/"/>
    <id>http://code.kpman.cc/2015/02/11/利用-crontab-來做-Linux-固定排程/</id>
    <published>2015-02-11T03:57:45.000Z</published>
    <updated>2015-02-11T05:02:32.000Z</updated>
    <content type="html"><![CDATA[<p>近期有個需求，要在 Linux 上執行固定週期的時程，發現利用 crontab 這個內建的功能便可以完成，本篇記錄使用過程以及相關的參數。</p>
<p><img src="http://i.imgur.com/kcFpx34.png" alt=""></p>
<a id="more"></a>
<h2 id="crontab_介紹">crontab 介紹</h2>
<p>crontab 是 Linux 內建的機制，可以根據設置的時間參數來執行例行性的工作排程。</p>
<p><img src="http://i.imgur.com/OGytWih.gif" alt=""></p>
<p>上述這張圖可以清楚的顯示出前五項參數應該要帶進去的數字。<br>依序是<code>分鐘</code>, <code>小時</code>, <code>日期</code>, <code>月份</code>, <code>星期</code>, <code>command</code><br>參數為<code>0-59</code>, <code>0-23</code>, <code>1-31</code>, <code>1-21</code>, <code>0-6</code>, <code>需要執行的command</code></p>
<p>※ 月份參數為<code>0</code>代表星期日</p>
<h2 id="參數特殊字符意義">參數特殊字符意義</h2>
<p><code>【*】</code>：星號，代表任何時刻都接受的意思<br><code>【,】</code>：逗號，代表分隔時段。例如：<code>30 9,17 * * * command</code>，代表早上9點半和下午五點半都執行 command。<br><code>【-】</code>：減號，代表一段時間範圍。例如：<code>15 9-12 * * * command</code>，代表從9點到12點的每個15分都執行 command。<br><code>【/n】</code>：斜線，n代表數字，表示每個 n 單位間隔。例如：<code>*/5 * * * * command</code>，代表每隔 5 分鐘執行一次 command。</p>
<p>還有一些人性化的參數，一次取代全部五個數字參數</p>
<p><code>【@reboot】</code> ：僅在開機的時候執行一次。<br><code>【@yearly】</code> ：一年執行一次，和<code>0 0 1 1 * command</code>效果一樣。<br><code>【@annually】</code>：（和<code>@yearly</code>一樣）<br><code>【@monthly】</code>：一個月執行一次，和<code>0 0 1 * * command</code>效果一樣。<br><code>【@weekly】</code>：一個星期執行一次，和<code>0 0 * * 0 command</code>效果一樣。<br><code>【@daily】</code>：每天執行，和<code>0 0 * * * command</code>效果一樣。<br><code>【@midnight】</code>：（和<code>@daily</code>一樣）<br><code>【@hourly】</code> ：每小時執行，和<code>0 * * * * command</code>效果一樣。</p>
<h2 id="crontab_操作">crontab 操作</h2>
<p>crontab 是會根據不同的使用者去判定可以操作的範圍。</p>
<p><code>$ crontab -l</code>: 列出該使用者擁有的 crontab 指令<br><code>$ crontab -e</code>: 編輯該使用者的 crontab 指令<br><code>$ crontab -r</code>: 將使用者的 crontab 全部清除！（ <strong>小心使用</strong> ）</p>
<p>編輯完後就可以存檔離開，Linux 系統便會依照你設定的排程固定做事，非常方便。</p>
<p>※ 下達指令請用 <strong>絕對路徑</strong> 避免錯誤</p>
<h2 id="範例參考">範例參考</h2>
<p><code>$ */5 * * * * /home/ubuntu/test.sh</code>：每五分鐘執行一次測試 shell script<br><code>$ 0 9 * * 1-6 node /home/ubuntu/workspace/report.js</code>：每天早上九點（除了星期日）執行 report.js 這隻檔案</p>
<h3 id="reference">reference</h3>
<p><a href="http://kvz.io/blog/2007/07/29/schedule-tasks-on-linux-using-crontab/" target="_blank" rel="external">Schedule Tasks on Linux Using Crontab</a><br><a href="http://linux.vbird.org/linux_basic/0430cron.php#whatiscron_linux" target="_blank" rel="external">鳥哥的 Linux 私房菜 例行性工作排程 (crontab)</a></p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/code/" term="code"/>
    <category scheme="http://code.kpman.cc/tags/linux/" term="linux"/>
    <category scheme="http://code.kpman.cc/tags/crontab/" term="crontab"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Sublime 與 iTerm 的視窗配置]]></title>
    <link href="http://code.kpman.cc/2015/02/07/Sublime-與-iTerm-的視窗配置/"/>
    <id>http://code.kpman.cc/2015/02/07/Sublime-與-iTerm-的視窗配置/</id>
    <published>2015-02-07T11:55:04.000Z</published>
    <updated>2015-02-07T13:14:35.000Z</updated>
    <content type="html"><![CDATA[<p>常用的編輯器是 Sublime Text 3，但是終端機是 iTerm2，兩者一直沒有 IDE 般的整合。<br>本篇記錄下如何更改 iTerm2 的視窗配置，讓兩者操作體驗上有更佳的配合。</p>
<p><img src="http://i.imgur.com/wI92DCX.png" alt=""></p>
<a id="more"></a>
<h3 id="一般情境">一般情境</h3>
<p>一般在 Sublime 和 iTerm 之間切換，我都是利用 <code>cmd+tab</code> 來做切換，但是這樣的使用情境，如果在筆電上開發，則會在執行 iTerm 的時候遮到 Sublime 的內容。如下圖所示：</p>
<p><img src="http://i.imgur.com/7lg3dx4.png" alt=""></p>
<p>讓我們更改 iTerm 的視窗配置，來改善這樣的情況！</p>
<h3 id="iTerm_視窗設定">iTerm 視窗設定</h3>
<p><img src="http://i.imgur.com/gfMTEKP.png" alt=""></p>
<p>根據上圖，依序找到 Profiles —&gt; Window —&gt; Style: Bottom of screen<br>調整完後視窗的高度會根據設定的 Rows 高度來決定。</p>
<h3 id="快捷鍵設定">快捷鍵設定</h3>
<p>根據個人習慣，在不與 Sublime 相關的快捷鍵衝突，我建議採用 <code>cmd+.</code> 來啟動 iTerm。</p>
<p><img src="http://i.imgur.com/Iw6ywHt.png" alt=""></p>
<p>※ 記得重新啟動 iTerms 來檢視設定的效果。</p>
<h3 id="成果_Demo">成果 Demo</h3>
<p>做完上面的設定就大功告成了！</p>
<p>未來在編輯的時候，就可以利用 <code>cmd+.</code> 來啟動＆關閉終端機，操作感覺接近是內建在 Sublime 的環境。</p>
<p>如下圖所示：</p>
<p><img src="http://i.imgur.com/cJNfCCa.png" alt=""></p>
<p>Enjoy!</p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/sublime-text/" term="sublime text"/>
    <category scheme="http://code.kpman.cc/tags/terminal/" term="terminal"/>
    <category scheme="http://code.kpman.cc/tags/tips/" term="tips"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Sublime Text 3 Mac 指南]]></title>
    <link href="http://code.kpman.cc/2014/10/14/sublime-text-3-mac-指南/"/>
    <id>http://code.kpman.cc/2014/10/14/sublime-text-3-mac-指南/</id>
    <published>2014-10-14T07:16:59.000Z</published>
    <updated>2014-10-14T09:50:29.000Z</updated>
    <content type="html"><![CDATA[<p>本篇是我根據自己使用習慣所做的快捷鍵整理，使用sublime text這套編輯器已經有2年之餘，本身是個快捷鍵愛好者，對於發掘好用的快捷鍵樂此不疲，因此整理常用的快捷鍵在這篇，針對的是mac使用者所使用者快捷鍵，希望對各位有幫助。</p>
<a id="more"></a>
<h1 id="快捷鍵">快捷鍵</h1>
<p>左邊為本篇所採用的縮寫，右邊則為鍵盤上面的標示</p>
<ul>
<li>cmd = command</li>
<li>shift = shift</li>
<li>option = option (alt)</li>
<li>control = control</li>
<li>pkg-ctrl = package control (command + shift + p)</li>
</ul>
<h2 id="基礎模式">基礎模式</h2>
<p>「基礎模式」介紹非sublime專用的快捷鍵，是一般使用者都可以快速上手的部分，想要看進階的可以跳過這部份。</p>
<h3 id="1-_cmd_+_o_(open)">1. cmd + o (open)</h3>
<p>快速開啟整個資料夾(專案)</p>
<h3 id="2-_cmd_+_w">2. cmd + w</h3>
<p>關閉視窗分頁</p>
<h3 id="3-_cmd_+_n">3. cmd + n</h3>
<p>開新分頁</p>
<h3 id="4-_cmd_+_shift_+_t">4. cmd + shift + t</h3>
<p>重新開啟剛剛關閉的分頁</p>
<h3 id="5-_cmd_+_shift_+_v">5. cmd + shift + v</h3>
<p>貼上時，符合縮排</p>
<h2 id="畫面配置">畫面配置</h2>
<p>以下介紹sublime的畫面配置，常常因為編輯情境的所需，利用快捷鍵讓自己的畫面配置更加有彈性。</p>
<h3 id="1-_cmd_+_option_+_數字">1. cmd + option + 數字</h3>
<p>分割視窗，讓你的編輯範圍有多個panel。<br>常用為<code>cmd + option + 1</code> 和<code>cmd + option + 2</code> 之間切換。<br>使用情境：左邊.html右邊.css，編輯起來快速又方便。<br>建議：利用空白鍵右邊的兩個連續按鈕搭配數字。</p>
<p><img src="http://i.imgur.com/wWrUvSA.gif" alt=""></p>
<h3 id="2-_cmd_+_k_再_cmd_+_b">2. cmd + k 再 cmd + b</h3>
<p>關閉左側資料夾目錄，讓畫面變得更寬敞。<br>這是我非常使用的一個快捷鍵，可以讓編輯的區域變得更大。</p>
<p><img src="http://i.imgur.com/IiAhOPx.gif" alt=""></p>
<h3 id="3-_cmd_+_shift_+_control_+_f">3. cmd + shift + control + f</h3>
<p>進入zen狀態，單份文件變成全螢幕，且左邊會自動縮排。<br>使用情境：當不常需要切換檔案時，此模式可以專注在單一檔案上，打這篇blog時我便這樣使用。<br>建議：快捷鍵不好記，可以點選<code>View --&gt; Enter Distraction Free Mode</code></p>
<p><img src="http://i.imgur.com/DdD24a5.png" alt="zen"></p>
<h2 id="選取">選取</h2>
<p>底下介紹的部份，回到sublime text編輯器本身，因為重點在編輯部分，因此在此將「選取」特別整理成一區。</p>
<h3 id="1-_cmd_+_d_(可連按)">1. cmd + d (可連按)</h3>
<p>快速選取一範圍內的字串，<code>連按d</code>的話會選取整份文件內相同的字串。<br>當選取完後，可以直接打字，因此就可以將整份文件的字串全部改成新字串。</p>
<p><img src="http://i.imgur.com/tkjccVA.gif" alt=""></p>
<h3 id="2-_cmd_+_l_(可連按)">2. cmd + l (可連按)</h3>
<p>選取游標在內的一行，<code>連按l</code>的話會往下選取下面的行數。</p>
<h3 id="3-_cmd_+_shift_+_l">3. cmd + shift + l</h3>
<p>此功能常與上述<code>cmd + l</code>配合，當選取多行後，按下<code>cmd + shift + l</code>，則會在多行的情況結尾出現游標，可以做多行編輯。<br><img src="http://i.imgur.com/t6Mvfof.gif" alt=""></p>
<h3 id="4-_option_+_滑鼠拖拉">4. option + 滑鼠拖拉</h3>
<p>當按住<code>option</code>後，搭配<code>滑鼠拖拉</code>便可以一次選取多行，並且產生游標。<br><em>注意：拖曳的時候，滑鼠必須是由上到下垂直的選取狀態</em></p>
<p><img src="http://i.imgur.com/4cyN5eD.gif" alt=""></p>
<h3 id="5-_cmd_+_滑鼠點選">5. cmd + 滑鼠點選</h3>
<p>按住<code>cmd</code>後，利用滑鼠在文件內點選，便可以在任何位置新增游標，產生多選狀態做編輯。</p>
<p><img src="http://i.imgur.com/ltNQcxi.gif" alt=""></p>
<h3 id="6-_cmd_+_左_或_右">6. cmd + 左 或 右</h3>
<p>讓你的游標可以快速的回到該行的最前面或是最後面。</p>
<p><img src="http://i.imgur.com/WXyhkDE.gif" alt=""></p>
<h3 id="7-_shift_+_左_或_右">7. shift + 左 或 右</h3>
<p>每按一次會選擇一個字元，可以更加精準的選取自己要的部份。</p>
<p><img src="http://i.imgur.com/yPeO2UF.gif" alt=""></p>
<h3 id="8-_cmd_+_shift_+_左_或_右">8. cmd + shift + 左 或 右</h3>
<p>從游標所在處，往前選取或者往後選取該行到底。</p>
<p><img src="http://i.imgur.com/RX0XyMh.gif" alt=""></p>
<h2 id="尋找">尋找</h2>
<p>在sublime裡面尋找的功能做的非常強大，不論是文件內、或是文件名稱都可以快速找到。<br>底下將會利用GoTo Anything這個強大的內建功能來實作。</p>
<h3 id="1-_cmd_+_p_+_輸入檔名">1. cmd + p + 輸入檔名</h3>
<p>利用<code>cmd + p</code>，之後等視窗出現後，即可輸入你要找的檔名，按下enter即可開啟。</p>
<p><img src="http://i.imgur.com/eH0Lbiu.gif" alt=""></p>
<h3 id="2-_cmd_+_p_+_“:”_+_行數">2. cmd + p + “:” + 行數</h3>
<p>此功能相同於<code>control + g</code>，可以快速的跳到你指定的行數。</p>
<p><img src="http://i.imgur.com/cIp5SYH.gif" alt=""></p>
<h3 id="3-_cmd_+_p_+_“@”_+_function_name">3. cmd + p + “@” + function name</h3>
<p>此功能相同於<code>cmd + r</code>，可以快速跳到定義的function<br>建議：若是知道要找function，建議使用這個而非使用<code>cmd + f</code></p>
<p><img src="http://i.imgur.com/IGdokvK.gif" alt=""></p>
<h3 id="4-_cmd_+_p_+_“#”_+_keyword">4. cmd + p + “#” + keyword</h3>
<p>此功能可以快速找到文件內的關鍵字。<br>個人比較少用這個功能，利用<code>cmd + f</code>時，可以持續按enter找到目標。</p>
<h3 id="5-_cmd_+_shift_+_f">5. cmd + shift + f</h3>
<p>全文搜尋，可以找出「整個project」內的關鍵字。<br>在Find Result內，點選兩下，便可以跳到該文件，這是我覺得最實用的部份。</p>
<p><img src="http://i.imgur.com/RYZ0GOQ.gif" alt=""></p>
<h2 id="快還要更快">快還要更快</h2>
<h3 id="1-_cmd_+_control_+_上_或_下">1. cmd + control + 上 或 下</h3>
<p>將選取起來的行，整段往上或往下移動。<br>使用情境：當幾行code需要移動不算太大範圍的時候，可以使用這個快捷鍵，而不用剪下再貼上。</p>
<p><img src="http://i.imgur.com/R3jxRrV.gif" alt=""></p>
<h3 id="2-_cmd_+_/">2. cmd + /</h3>
<p>將該行註解。<br>個人建議：搭配<code>cmd + l(連按)</code>可以選取多行，一次註解起來。</p>
<p><img src="http://i.imgur.com/B85owMN.gif" alt=""></p>
<h2 id="reference">reference</h2>
<ol>
<li><a href="https://blog.generalassemb.ly/sublime-text-3-tips-tricks-shortcuts/" target="_blank" rel="external">GETTING STARTED WITH SUBLIME TEXT 3: 25 TIPS, TRICKS, AND SHORTCUTS</a></li>
<li><a href="http://zh.lucida.me/blog/sublime-text-complete-guide/" target="_blank" rel="external">Sublime Text 全程指南</a></li>
</ol>
]]></content>
    <category scheme="http://code.kpman.cc/tags/sublime-text-3/" term="sublime text 3"/>
    <category scheme="http://code.kpman.cc/tags/sublime-text/" term="sublime text"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Nginx remove .html filename]]></title>
    <link href="http://code.kpman.cc/2014/09/23/nginx-移除-html-附檔名/"/>
    <id>http://code.kpman.cc/2014/09/23/nginx-移除-html-附檔名/</id>
    <published>2014-09-23T02:10:56.000Z</published>
    <updated>2014-09-23T03:06:04.000Z</updated>
    <content type="html"><![CDATA[<p>Nginx是一套輕量化的web server，因為它的輕量、高效能而越來越多人喜歡使用它來做為網頁伺服器或是反向代理伺服器，本篇將介紹靜態網頁在nginx上移除.html附檔名的作法。</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/c/c5/Nginx_logo.svg" alt="Nginx"></p>
<a id="more"></a>
<h3 id="一、Start">一、Start</h3>
<p>本篇要做nginx這套web server的設定檔更改，來達到雖然存取靜態頁面，卻可以利用mydomain.com/user 的URL來拿到所要的靜態頁面。</p>
<blockquote>
<p>其實是我單純是因為不想要看到.html這樣的附檔名，這看起來不專業！</p>
</blockquote>
<p><em>本篇環境為ubuntu14.04下執行。</em></p>
<h3 id="二、Static_file_permission">二、Static file permission</h3>
<p>在nginx下，你要將靜態檔案放在server哪邊都可以，在此我根據之前apache習慣的設定，放在/var/www</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var</div><div class="line"><span class="built_in">sudo</span> mkdir www</div><div class="line"><span class="built_in">sudo</span> chown -R www-data:www-data /var/www/mydomain.com</div><div class="line"><span class="built_in">sudo</span> chmod <span class="number">755</span> /var/www</div></pre></td></tr></table></figure>

<p>如此一來你便可以將整個靜態網站檔案放在/var/www/mydomain.com目錄底下。</p>
<h3 id="三、Nginx_conf_setting">三、Nginx conf setting</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /etc/nginx/sites-enabled</div><div class="line">sudo <span class="keyword">vim</span> mydomain.<span class="keyword">com</span></div></pre></td></tr></table></figure>

<p>修改底下內容為你要的設定</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="title">server</span> {</div><div class="line">  <span class="title">listen</span>        <span class="number">80</span>;</div><div class="line">  <span class="title">root</span>          /var/www/mydomain;</div><div class="line">  <span class="title">index</span>         index.html index.htm;</div><div class="line">  <span class="title">server_name</span>   mydomain;</div><div class="line">  <span class="title">location</span> / {</div><div class="line">    <span class="title">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ <span class="variable">$uri</span>.html;</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>此設定將會當抓到$uri時，nginx會自動帶入<code>$uri/</code>或是<code>$uri.html</code><br>因此我們送出<code>mydomain.com/user</code>，nginx會試著搜尋<code>mydomain.com/user/</code>或<code>mydomain.com/user.html</code>。</p>
<h3 id="四、Remove_default_conf">四、Remove default conf</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span><span class="keyword">default</span></div></pre></td></tr></table></figure>

<p>在我設定的時候，需把default刪除後，才可以正常的讀取到新設定的mydomain.com檔，歡迎各位先進補充這點。</p>
<h3 id="五、Restart_Nginx">五、Restart Nginx</h3>
<p><code>/etc/init.d/nginx restart</code> || <code>sudo service nginx restart</code></p>
<p>如此一來你便可以利用<code>mydomain.com/user</code>純取到相關的靜態頁面了！</p>
<p><strong>reference</strong></p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-virtual-hosts-server-blocks-on-ubuntu-12-04-lts--3" target="_blank" rel="external">How To Set Up nginx Virtual Hosts (Server Blocks) on Ubuntu 12.04 LTS</a></p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/nodejs/" term="nodejs"/>
    <category scheme="http://code.kpman.cc/tags/nginx/" term="nginx"/>
    <category scheme="http://code.kpman.cc/tags/static-file/" term="static file"/>
    <category scheme="http://code.kpman.cc/tags/server/" term="server"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[為你的mac終端機加上alias]]></title>
    <link href="http://code.kpman.cc/2014/04/15/為你的mac終端機加上alias/"/>
    <id>http://code.kpman.cc/2014/04/15/為你的mac終端機加上alias/</id>
    <published>2014-04-15T01:35:37.000Z</published>
    <updated>2014-04-15T02:05:13.000Z</updated>
    <content type="html"><![CDATA[<p>在使用iTerm（終端機）一段時間後，總覺得每次開啟新分頁，要進入到一個很深的資料夾略顯麻煩，因此上網查了簡易的方法，很快速便可以讓自己少打很多code，把時間花在其他更重要事情上。</p>
<p><img src="http://i.imgur.com/Cc5u0nY.png" alt="iterm2"></p>
<a id="more"></a>
<h2 id="alias">alias</h2>
<p>顧名思義就是別名，其語法如下，舉mac的apache server所在為example:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alias</span> goproject=<span class="attribute">'cd</span> /<span class="keyword">Library</span>/WebServer/Documents/yourproject'</div></pre></td></tr></table></figure>

<p>因此在iTerm打上這串後，未來便可以使用<code>goproject</code> 直接執行後面那串，快速又方便。</p>
<h2 id="永久執行alias">永久執行alias</h2>
<p>在設定完alias，原本以為就這樣，結果發現如果重開iTerm後，之前設定的alias都不見了，原因是因為沒有真正寫入bash檔，因此在開啟iTerm的時候，並沒有被載入，所以我們要將</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo vim <span class="regexp">/etc/</span>bashrc</div><div class="line"><span class="comment">// 在bashrc檔裡面加上新的一行</span></div><div class="line">alias goproject=<span class="string">'cd /Library/WebServer/Documents/yourproject'</span></div></pre></td></tr></table></figure>

<p><em>ps. 因為是root權限，存檔的時候記得要用<code>:wq!</code>強制寫入。</em></p>
<p>重新開啟iTerm後，便可以使用goproject來快速進到你要的路徑，當然你也可以自行設定你要的指令。</p>
<h2 id="alias_相關指令">alias 相關指令</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span><span class="comment"> // 列出所有的alias檔</span></div><div class="line">unalias goproject<span class="comment"> // 把goproject這個alias刪掉</span></div></pre></td></tr></table></figure>

<p><strong><em>reference</em></strong></p>
<p><a href="http://www.linfo.org/alias.html" target="_blank" rel="external">How to use the alias command</a></p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/alias/" term="alias"/>
    <category scheme="http://code.kpman.cc/tags/terminal/" term="terminal"/>
    <category scheme="http://code.kpman.cc/tags/mac/" term="mac"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Web好UI設計法則 2]]></title>
    <link href="http://code.kpman.cc/2014/04/14/web好ui設計法則-2/"/>
    <id>http://code.kpman.cc/2014/04/14/web好ui設計法則-2/</id>
    <published>2014-04-14T05:26:18.000Z</published>
    <updated>2014-04-14T13:14:10.000Z</updated>
    <content type="html"><![CDATA[<p>本文譯自<a href="http://www.goodui.org" target="_blank" rel="external">goodui</a>，會寫這系列並非逐字翻譯，而是在研讀過後利用自己的方式表達並記錄分享之，全文圖片版權皆為goodui.org所有，此為系列第2篇。</p>
<a id="more"></a>
<h1 id="6、區分已被選取和可點選區塊">6、區分已被選取和可點選區塊</h1>
<p>利用顏色、深度、對比來讓使用者確切的知道他們現在處於網站的哪一個地方，了解什麼地方可以點選，以便讓他們往下繼續逛他們趕興趣的頁面或內容。頁面上可見的文字區塊大致分成三種情況，分別是可以點(clickable)連結或按鈕、被選取(chosen)項目以及其他文字(plain text)。</p>
<p>底下這張圖示指出，藍色的字代表可以點擊(clickable)，而黑色的字代表你現在正在這個項目(chosen)內，簡單清楚的表達出區分的效果。</p>
<p><img src="http://goodui.org/images/idea006.png" alt="idea006"></p>
<h1 id="7、試著推薦而非列出都一樣的選項">7、試著推薦而非列出都一樣的選項</h1>
<p>當你有多重選項的時候，有一個強調的選項或許對於使用者來說是一個不錯的刺激。</p>
<p>在這篇<a href="http://www.nytimes.com/2010/02/27/your-money/27shortcuts.html?_r=1&amp;" target="_blank" rel="external">心理學研究</a>指出，越少的選項可以讓使用者決定得更快，因此，試著強調某個特定的訴求吧！</p>
<p><img src="http://goodui.org/images/idea007.png" alt="idea007"></p>
<h1 id="8、試著用undo選項，而非確認">8、試著用undo選項，而非確認</h1>
<p>在你要刪除一個動作的時候，如果視窗一直跳出「您確定要刪除嗎？」的訊息，還要你多按一個按鍵才能確定刪除，是不是有點惱人？</p>
<p>原作者提到他相信大多情況我們都不會誤按功能按鈕，有的話也是少數，因此利用重作(undo)的功能而非要使用者一直確認，如此一來能讓使用者更加有掌握感，當他們要進行大量的刪除動作，便可以提高效率，不小心誤刪的情況發生，還有重作的選項可以復原。</p>
<p><img src="http://goodui.org/images/idea008.png" alt="idea008"></p>
<h1 id="9、你的TA是特定族群，而非全部人">9、你的TA是特定族群，而非全部人</h1>
<p>這是一個決策，純看你要針對某特定的族群或是針對全部人，有利有弊是一定的。當你針對某特定族群打廣告，勢必會壓縮到其他的群眾，進而產生排他性。這種策略的風險是你可能會削減自己短期和限制潛在的客戶。</p>
<p><img src="http://goodui.org/images/idea009.png" alt="idea009"></p>
<h1 id="10、給明確的指示">10、給明確的指示</h1>
<p>給使用者明確的指示，讓他們知道點下這一個按鍵或已經滑動到這個頁面的最底端，接下來他該何去何從？千萬不要用那種「或許」、「應該」的字眼造成不確定感。要讓你的使用者知道下一步該怎麼走，至於要不要走，就交給使用者自己去決定了。</p>
<p><img src="http://goodui.org/images/idea010.png" alt="idea010"></p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/goodui/" term="goodui"/>
    <category scheme="http://code.kpman.cc/tags/UI/" term="UI"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Nginx with Node.js in different port]]></title>
    <link href="http://code.kpman.cc/2014/04/11/nginx-with-nodejs-in-different-port/"/>
    <id>http://code.kpman.cc/2014/04/11/nginx-with-nodejs-in-different-port/</id>
    <published>2014-04-10T16:16:33.000Z</published>
    <updated>2014-04-10T16:57:25.000Z</updated>
    <content type="html"><![CDATA[<p>Nginx因為它的輕量、高效能而越來越多人喜歡使用它來做為網頁伺服器或是反向代理伺服器。</p>
<p>由於近期想要把不同的node.js程式放在同一個server，因此開始研究nginx用法，記錄下來我的實作方式。</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/c/c5/Nginx_logo.svg" alt="Nginx"></p>
<a id="more"></a>
<h3 id="一、Domain指向主機">一、Domain指向主機</h3>
<p>將不同的domain都指向你的主機ip，此時都會指向HTTP預設的80 port，後面再用nginx設定由不同的port去處理不同的node.js程式。</p>
<h3 id="二、安裝Nginx_in_Ubuntu">二、安裝Nginx in Ubuntu</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get <span class="operator"><span class="keyword">update</span></span></div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">upgrade</span> // 確定抓到套件</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> nginx</div><div class="line">sudo service nginx <span class="keyword">start</span></div></pre></td></tr></table></figure>

<p>在安裝的時候，記得你如果有其他server在run必須要停掉，不然佔住80 port是沒有辦法裝成功nginx的。</p>
<h3 id="三、將Node-js設定不同port">三、將Node.js設定不同port</h3>
<p>會寫node.js應該會將port listen在不同的port，注意不要用常用的那些port即可。例如：80(HTTP)、22(SSH)。</p>
<h3 id="四、設定Nginx資料夾檔案">四、設定Nginx資料夾檔案</h3>
<p>進到<code>/etc/nginx/sites-enabled</code>，然後創建跟你domain一樣的檔案，記得權限要用<code>sudo</code>去創</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">vim</span> domain1.<span class="keyword">com</span></div></pre></td></tr></table></figure>

<p>檔案內容</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="title">server</span> {</div><div class="line">    <span class="title">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="title">server_name</span> domain1.com;</div><div class="line">    <span class="title">access_log</span> /var/log/nginx/domain1.access.log;</div><div class="line">    <span class="title">location</span> / {</div><div class="line">        <span class="title">proxy_pass</span>    <span class="url">http://127.0.0.1:4000/</span>;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>同理創建domain2.com，記得4000 port要改成你設定的port。</p>
<h3 id="五、重啟Nginx">五、重啟Nginx</h3>
<p><code>/etc/init.d/nginx restart</code></p>
<p>記得做過更動後，要重新啟動nginx才有用。<br>如此一來，不同的domain就可以連到同一台server的不同支node.js去執行了。</p>
<p><strong>reference</strong></p>
<p><a href="http://stackoverflow.com/questions/5009324/node-js-nginx-and-now/5015178#5015178" target="_blank" rel="external">node.js + nginx - And now?</a><br><a href="http://zh.wikipedia.org/wiki/Nginx" target="_blank" rel="external">wikipedia nginx</a></p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/nodejs/" term="nodejs"/>
    <category scheme="http://code.kpman.cc/tags/nginx/" term="nginx"/>
    <category scheme="http://code.kpman.cc/tags/server/" term="server"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[CI初體驗for靜態頁面]]></title>
    <link href="http://code.kpman.cc/2014/04/06/ci初體驗for靜態頁面/"/>
    <id>http://code.kpman.cc/2014/04/06/ci初體驗for靜態頁面/</id>
    <published>2014-04-06T13:30:35.000Z</published>
    <updated>2014-04-06T16:13:14.000Z</updated>
    <content type="html"><![CDATA[<p>第一次因為專案需要，而跟PHP後端工程師配合，我們選定了<a href="http://www.codeigniter.org.tw/" target="_blank" rel="external">CI</a>這套framework來使用，對於CI算是第一次接觸，因此想把從無到有的架設過程給記錄下來。</p>
<p><img src="http://php.quicoto.com/wp-content/uploads/2013/07/codeigniter-logo.png" alt="codeigniter"></p>
<a id="more"></a>
<h2 id="1、擁有php環境">1、擁有php環境</h2>
<p>Mac內建Apache，只要打開即可。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apachectl start</div></pre></td></tr></table></figure>

<h2 id="2、安裝CI">2、安裝CI</h2>
<ul>
<li>到<a href="http://www.codeigniter.org.tw/user_guide/installation/downloads.html" target="_blank" rel="external">官網</a>下載整份文件檔</li>
<li>放進server的路徑下 <code>/Libary/WebServer/Documents/</code></li>
<li>安裝完畢！</li>
</ul>
<h2 id="3、讀取靜態頁面">3、讀取靜態頁面</h2>
<h3 id="新增頁面">新增頁面</h3>
<p>此處新增名為page.php的檔案 <code>application -&gt; view -&gt; cep(optional dir) -&gt; page.php</code></p>
<ul>
<li><img src="http://i.imgur.com/gC7kgs2.png" alt="page.php"></li>
</ul>
<h3 id="新增static_files">新增static files</h3>
<p>如CSS、JS檔，習慣性會創建assets資料夾將他們放進去，並且放在跟application同階層的dir內，如圖。<br><img src="http://i.imgur.com/BLh0okD.png" alt="assets"></p>
<h3 id="新增route">新增route</h3>
<p><code>application -&gt; config -&gt; routes.php</code> 新增如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$route</span>[<span class="string">'(:any)'</span>] = <span class="string">'cep/$1'</span>;</div><div class="line"><span class="variable">$route</span>[<span class="string">'default_controller'</span>] = <span class="string">"cep"</span>;</div><div class="line"><span class="variable">$route</span>[<span class="string">'404_override'</span>] = <span class="string">''</span>;</div></pre></td></tr></table></figure>

<h3 id="新增controller">新增controller</h3>
<p>在controllers資料夾內，新增php檔，內定新的public function，參照welcome.php修改即可。</p>
<p>新增一個class extends CI_Controller，裡面加上page()這個public function。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cep</span> <span class="keyword">extends</span> <span class="title">CI_Controller</span> </span>{</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;load</span><span class="variable">-&gt;view</span>(<span class="string">'cep/index'</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">page</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;load</span><span class="variable">-&gt;view</span>(<span class="string">'cep/page'</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="路徑修改">路徑修改</h3>
<ul>
<li>application -&gt; config -&gt; config.php 改一行 <code>$config[&#39;base_url&#39;]  = &#39;/專案資料夾名字/&#39;;</code></li>
<li>application -&gt; config -&gt; autoload.php 改一行 <code>$autoload[&#39;helper&#39;] = array(&#39;url&#39;);</code> 原本是沒有url，加上url。</li>
<li>page.php這頁的CSS和JS檔，修改成</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"&lt;?php echo base_url(); ?&gt;assets/css/bootstrap.min.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"&lt;?php echo base_url(); ?&gt;assets/css/main.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"&lt;?php echo base_url(); ?&gt;assets/js/vendor/modernizr-2.6.2.min.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>如此一來便可以在<code>http://localhost/專案資料夾/index.php/page</code> 看到靜態頁面了。</p>
<h2 id="4、移除CI_URL上的index-php">4、移除CI URL上的index.php</h2>
<p>因為每次網址上面都需要有index.php，覺得不好看，因此兩個步驟把它改掉。</p>
<ol>
<li>在root加上<code>.htaccess</code>檔，內容如下</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">on</span></div><div class="line"><span class="keyword"><span class="common">RewriteCond</span></span> <span class="number">$1</span> !^(index\.php)</div><div class="line"><span class="keyword"><span class="common">RewriteCond</span></span> <span class="cbracket">%{REQUEST_FILENAME}</span> !-f</div><div class="line"><span class="keyword"><span class="common">RewriteCond</span></span> <span class="cbracket">%{REQUEST_FILENAME}</span> !-d</div><div class="line"><span class="keyword"><span class="common">RewriteRule</span></span> ^(.*)$ index.php/<span class="number">$1</span><span class="sqbracket"> [L,QSA]</span></div></pre></td></tr></table></figure>

<ol>
<li>修改apache設定，將httpd.conf改掉。<br>原本AllowOverride none改成All即可。</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">Directory</span> /Library/WebServer/Documents&gt;</div><div class="line">    <span class="keyword">Options</span> FollowSymLinks</div><div class="line">    AllowOverride <span class="keyword">All</span></div><div class="line">&lt;/<span class="keyword">Directory</span>&gt;</div></pre></td></tr></table></figure>

<ol>
<li>重新啟動apache <code>sudo apachectl restart</code></li>
</ol>
<p><em>後記</em></p>
<p>因尚有其他專案，故本專案檔是全部在一個資料夾內，非直接在web server的root實作。</p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/PHP/" term="PHP"/>
    <category scheme="http://code.kpman.cc/tags/CI/" term="CI"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Web好UI設計法則 1]]></title>
    <link href="http://code.kpman.cc/2014/03/19/web好ui設計法則-1/"/>
    <id>http://code.kpman.cc/2014/03/19/web好ui設計法則-1/</id>
    <published>2014-03-19T09:11:15.000Z</published>
    <updated>2014-03-19T10:11:46.000Z</updated>
    <content type="html"><![CDATA[<p>本文譯自<a href="http://goodui.org" target="_blank" rel="external">goodui</a>，會寫這系列並非逐字翻譯，而是在研讀過後利用自己的方式表達並記錄分享之，全文圖片版權皆為goodui.org所有。</p>
<p><img src="http://i.imgur.com/ve2iCpO.png" alt="goodui"></p>
<a id="more"></a>
<h2 id="1、頁面單欄式而非多欄式">1、頁面單欄式而非多欄式</h2>
<p>採用單欄式的好處是可以讓讀者自然而然的了解閱讀方向為由上而下，採用多欄式的頁面設計，會有額外增加的risk，會讓讀者容易分心。在文章（頁面）的最後採用call to action，引導讀者點進你想要的導向頁面。</p>
<p><img src="http://goodui.org/images/idea001.png" alt="idea001"></p>
<h2 id="2、試著給些小禮物">2、試著給些小禮物</h2>
<p>好朋友間互相送禮，是很正常不過的對吧？在面對你的使用者也是一樣的，根據互惠原則，給禮物是一個激勵使用者的手法，讓使用者會更願意回來你的網站。</p>
<p><img src="http://goodui.org/images/idea002.png" alt="idea002"></p>
<h2 id="3、把相似功能的介面合併在一起">3、把相似功能的介面合併在一起</h2>
<p>在過去，我們很容易將功能差不多的介面，在頁面上分成好多部分。當你的UI越分散，那麼該網站的使用者其學習曲線便越高，試著重新設計你的UI吧，把那些功能相近的按鈕、區塊放在一起。</p>
<p><img src="http://goodui.org/images/idea003.png" alt="idea003"></p>
<h2 id="4、讓別人來說，而非自己說">4、讓別人來說，而非自己說</h2>
<p>列出那些曾經在social media討論本身產品的人，利用他們的見證會比自己在網站上面寫還來的有用。「Our customers say」會比「We are awesome」還更具有說服力。</p>
<p><img src="http://goodui.org/images/idea004.png" alt="idea004"></p>
<h2 id="5、重複你的主要訴求">5、重複你的主要訴求</h2>
<p>你的call to action是網頁中重要的項目，尤其在很長的頁面時，不要吝嗇讓它出現超過一次。當使用者滑到頁面底端時，是該他們做決定的時候了，離開或是完成你的主要訴求。</p>
<p><img src="http://goodui.org/images/idea005.png" alt="idea005"></p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/goodui/" term="goodui"/>
    <category scheme="http://code.kpman.cc/tags/UI/" term="UI"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Sublime Text 2 實用套件]]></title>
    <link href="http://code.kpman.cc/2013/11/30/sublime-text-2-實用套件/"/>
    <id>http://code.kpman.cc/2013/11/30/sublime-text-2-實用套件/</id>
    <published>2013-11-29T16:02:48.000Z</published>
    <updated>2014-03-17T01:43:18.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://upload.wikimedia.org/wikipedia/en/4/4c/Sublime_Text_Logo.png" alt="Sublime Text 2" title="Sublime Text 2"></p>
<p>Sublime Text 2 是網頁開發者都不陌生的一套編輯器，除了單純的文字編輯外，它還有很多實用的套件，這篇來介紹我平常常用的Sublime Text 2 套件。</p>
<a id="more"></a>
<h2 id="編輯環境">編輯環境</h2>
<ol>
<li>Mac 10.9</li>
<li>Sublime Text 2</li>
</ol>
<p>Mac環境，所以快捷鍵會介紹command的配置，若windows版本請自行查閱。</p>
<h3 id="安裝Package_Control">安裝Package Control</h3>
<p>所謂Package Control就是Sublime Text 2 用來裝套件的，因此在裝其他的套件之前，我們必須先來安裝Package Control。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">開啟Sublime Text <span class="number">2</span></div><div class="line">開啟console，快捷鍵ctrl+`</div><div class="line">貼上以下程式碼</div><div class="line"></div><div class="line">import urllib2,os; pf=<span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class="keyword">if</span> not os.path.<span class="built_in">exists</span>(ipp) <span class="keyword">else</span> None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); <span class="keyword">open</span>( os.path.<span class="built_in">join</span>( ipp, pf), <span class="string">'wb'</span> ).<span class="keyword">write</span>( urllib2.urlopen( <span class="string">'http://sublime.wbond.net/'</span> +pf.replace( <span class="string">' '</span>,<span class="string">'%20'</span> )).<span class="keyword">read</span>()); <span class="keyword">print</span>( <span class="string">'Please restart Sublime Text to finish installation'</span>)</div></pre></td></tr></table></figure>

<p>程式碼可以參照<a href="https://sublime.wbond.net/installation#st2" target="_blank" rel="external">官網</a></p>
<p>安裝完後，未來我們就可以使用<code>cmd+shift+p</code>，打入<code>install package</code>，即可啟用Package Control，如下圖</p>
<p><img src="http://i.imgur.com/5n76S9Q.png" alt="install package"></p>
<h3 id="安裝套件步驟">安裝套件步驟</h3>
<ol>
<li>首先<code>cmd+shift+p</code></li>
<li>鍵入<code>install package</code></li>
<li>跳出新的輸入欄位後，在輸入你要的<code>package名稱</code></li>
<li>看著左下角，等它跑完</li>
<li>重新啟動Sublime Text 2 即安裝完成。</li>
</ol>
<h2 id="必裝套件">必裝套件</h2>
<h4 id="一、BracketHighlighter">一、BracketHighlighter</h4>
<p><img src="http://i.imgur.com/2ovEcG8.png" alt=""></p>
<p>這是一套超過196K人裝的套件，如圖所示，寫html常常遇到不知道close tag在哪邊，裡用它可以清楚的將close tag標示出來。<br>另外它有一個很好的地方，就是會在每一行的前面列出來目前的tag，不同的語言還有不同的icon，因此可以更快的知道自己的位置。</p>
<h4 id="二、Emmet">二、Emmet</h4>
<p>以前它叫做Zen coding，現在則改為Emmet。</p>
<p>可以將需要重複的html用很簡短的方式寫出來，例如：</p>
<ol>
<li><code>.container&gt;.col-lg-4*3</code></li>
<li>按下tab後便會出現</li>
<li><img src="http://i.imgur.com/PP9vdmr.png" alt="Emmet"></li>
</ol>
<p>若你發現按下tab後竟然沒有用，記得確定自己是不是在html文件內。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">view --&gt;</span> syntax --&gt; <span class="constant">HTML</span>(<span class="number">5</span>)</span></div></pre></td></tr></table></figure>

<p>在HTML5的文件下，<code>!+tab</code> 會有出現HTML5的snippet出現，非常好用！</p>
<h4 id="三、Pretty_Json">三、Pretty Json</h4>
<p>有利用到JSON的人，想必一定會為了格式上面的問題而煩惱，只要裝上這個，JSON立刻變得很好看。</p>
<p>裝完之後，把你要修改的JSON選取起來，按下快捷鍵</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cmd+ctrl+<span class="built_in">j</span></div></pre></td></tr></table></figure>

<p>立刻就可以把JSON變得很漂亮，也可以自行進去定義縮排大小。</p>
<h4 id="四、flat_theme">四、flat theme</h4>
<p><img src="http://i.imgur.com/pvxRMlX.png" alt="flatland"></p>
<p>其實這個套件全名是flatland才對，可以把Sublime Text 2的整體環境變得扁平化。</p>
<p>安裝方法：</p>
<ol>
<li>打開Package Control</li>
<li>輸入Theme - Flatland即可</li>
</ol>
<hr>
<p>以上介紹了一些我常用的Sublime Text 2 套件，但一直沒有找到好看的主題，如果你有推薦的主題，非常歡迎交流！</p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/sublime-text-2/" term="sublime text 2"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[wordpress解決permalink固定網址問題]]></title>
    <link href="http://code.kpman.cc/2013/08/22/wordpress解決permalink固定網址問題/"/>
    <id>http://code.kpman.cc/2013/08/22/wordpress解決permalink固定網址問題/</id>
    <published>2013-08-22T04:54:15.000Z</published>
    <updated>2013-08-22T05:00:24.000Z</updated>
    <content type="html"><![CDATA[<p>本case為希望主目錄可以直接連到wordpress，但是wordpress是另外放在一個資料夾。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">主目錄：/<span class="keyword">var</span>/www</div><div class="line">wordpress資料夾：/<span class="keyword">var</span>/www/blog</div></pre></td></tr></table></figure>

<a id="more"></a>
<h2 id="一、-htaccess">一、.htaccess</h2>
<p>wordpress會利用.htaccess去更改固定連結，是位在根目錄，也就是<code>/var/www</code>底下，wordpress會根據你的<code>網站位置URL</code>去設定.htaccess</p>
<p>利用終端機產生.htaccess</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">vi</span> .htaccess</div><div class="line">chmod <span class="number">777</span> .htaccess</div></pre></td></tr></table></figure>

<h2 id="二、進入後台設定固定網址permalink">二、進入後台設定固定網址permalink</h2>
<p>這邊我選擇文章名稱的格式</p>
<p><img src="http://i.imgur.com/XlEgUdT.png" alt="固定網址"></p>
<p>因為剛剛上面有設定.htaccess權限打開到最大，因此進後台設定完，記得把chmod改為644，要注意安全性。</p>
<h2 id="三、設定mod_write">三、設定mod_write</h2>
<p>我的wordpress是架在Amazon EC2上的ubuntu，server是apache2，因此上網搜尋相關資料，解決辦法如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> a2enmod rewrite</div><div class="line"><span class="built_in">sudo</span> /etc/init.d/apache2 restart</div></pre></td></tr></table></figure>

<p>只要兩行就可以解決!</p>
<h3 id="後記"><strong><em>後記</em></strong></h3>
<p>在解決這個問題的時候，找了很多資料，一來是不明白.htacces真正的目錄，二來是不知道ubuntu的rewrite要打開，因此在這邊記錄下來，讓有相同困擾的人可以了解。</p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/wordpress/" term="wordpress"/>
    <category scheme="http://code.kpman.cc/tags/apache2/" term="apache2"/>
    <category scheme="http://code.kpman.cc/tags/htaccess/" term="htaccess"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[EC2利用tasksel架wordpress經驗分享]]></title>
    <link href="http://code.kpman.cc/2013/08/21/ec2利用tasksel架wordpress經驗分享/"/>
    <id>http://code.kpman.cc/2013/08/21/ec2利用tasksel架wordpress經驗分享/</id>
    <published>2013-08-20T18:17:04.000Z</published>
    <updated>2013-08-21T06:48:47.000Z</updated>
    <content type="html"><![CDATA[<p>看了這麼久的雲端資源，總算開了算是自己真正學到東西的第一台Amazon EC2 server，目的是想要練習把wordpress架到EC2上，在此分享我的架設經驗。</p>
<p><img src="http://blog.programmableweb.com/wp-content/amazon-web-services1.png" alt="Amazon web service"></p>
<a id="more"></a>
<h2 id="一、擁有AWS帳號">一、擁有AWS帳號</h2>
<p>關於開啟AWS的過程，實際走過一遍之後，阿正老師的<a href="http://blog.soft.idv.tw/?p=823&amp;page=2" target="_blank" rel="external">這篇</a>，其內寫的不錯，推薦跟著走一遍，就會了解很多。</p>
<h2 id="二、開啟自己的instance">二、開啟自己的instance</h2>
<p>在實際走過後，會發現阿正老師<a href="http://blog.soft.idv.tw/?p=824" target="_blank" rel="external">這篇</a>真的超用心，因此接下來主要會利用這篇，再加上些我的補充。</p>
<ul>
<li>instance地理位置</li>
</ul>
<p>提到將主機開的位置，現在已經有tokyo的據點，離台灣更近，所以建議將instance位置設在tokyo</p>
<blockquote>
<p>建議將instance位置設在tokyo</p>
</blockquote>
<ul>
<li>instance選擇方案</li>
</ul>
<p><img src="http://i.imgur.com/U4rs7wk.png" alt="EC2 ubuntu server for free"></p>
<p>利用VISA卡，選擇免費方案（圖中有星星的都是免費方案），在這邊我選擇ubuntu來做為我的系統。</p>
<ul>
<li>key pair創建＆下載</li>
</ul>
<p>在阿正老師的文章內看到關於key pair介紹，很重要，一定要記住要把下載下來的pem給管理好，未來是需要利用它來做ssh登入主機。</p>
<blockquote>
<p>.pem檔需要存好，一台主機配對一個key pair，且不能做更改，</p>
</blockquote>
<h2 id="三、設定Security_Group">三、設定Security Group</h2>
<p>在沒有設定security group的時候，新開的instance可能是鎖起來的，會有SSH連線上的問題。</p>
<ol>
<li>進入console.aws.amazon.com</li>
<li>左方導覽列選擇security group</li>
<li>選擇instance後，下方的tab選取<code>Inbound</code></li>
<li>分別加入<code>SSH</code>&amp;<code>HTTP</code>，Source部分都維持0.0.0.0/0即可，加入後記得要按<code>Apply Rule Change</code>才生效</li>
</ol>
<blockquote>
<p>記得開啟SSH(20)、HTTP(80)</p>
</blockquote>
<h2 id="四、申請Elastic_IP">四、申請Elastic IP</h2>
<p>每一個instance都應該要綁定一個elastice ip，未來可以作為連線使用。</p>
<ol>
<li>同上，進入console.aws.amazon.com</li>
<li>選擇Elastic IPs</li>
<li>選擇Allocate New Address</li>
<li>申請完之後記得要associate到你的instance </li>
</ol>
<blockquote>
<p>申請完elastic ip後，原本的Public domain前半部分會改變為新的ip</p>
</blockquote>
<p><strong><em>* 其實我在實作時，是先做了SSH連線，後來在去申請elastic ip，結果associate完後，我又要ssh連線，發現沒有辦法登入，之後才瞭解是做了elastic ip後，連線的ip也需要一並跟著改變。</em></strong></p>
<h2 id="五、SSH連線進入自己的instance">五、SSH連線進入自己的instance</h2>
<ol>
<li>打開終端機（推薦iterm）</li>
<li><code>chmod 600 ~/.pem</code><br>要記得把.pem檔改權限，不然會登不進去</li>
<li>ssh連線使用以下command line<br><code>ssh -i ~/.pem ubuntu@ip</code><ul>
<li><code>~/.pem</code>是此instance的key pair .pem檔的路徑</li>
<li><code>ubuntu</code>是因為我用ubuntu當做OS，如果當初選擇Amazon linux的話，則需要輸入<code>ec2-user</code>取代ubuntu</li>
<li><code>ip</code>則為instance的ip，進到console，左側選instance，拉到底下看見<br><code>Public DNS: ec2-xx-xxx-xxx-xx.ap-northeast-1.compute.amazonaws.com</code><br>則xx-xxx-xxx-xx改成<code>xx.xxx.xxx.xx</code>即為你的連線ip</li>
</ul>
</li>
<li>連線成功會看到<code>ubuntu@ip-xxx-xxx-xxx-xxx:~$</code>字眼！那就恭喜了！</li>
</ol>
<blockquote>
<p>pem檔的權限要更改為600</p>
</blockquote>
<h2 id="六、環境設定">六、環境設定</h2>
<p>剛進到instance，記得將環境設定一下</p>
<ol>
<li><code>sudo apt-get update</code> + <code>sudo apt-get upgrade</code></li>
<li>如果覺得一直sudo很麻煩，可以利用<code>sudo su</code>取得root權限</li>
</ol>
<hr>
<h3 id="#_安裝tasksel"># 安裝tasksel</h3>
<ol>
<li>是ubuntu底下的lamp懶人包</li>
<li>推薦<a href="http://howtounix.info/howto/LAMP-on-Ubuntu-with-tasksel-tool" target="_blank" rel="external">教學文</a></li>
<li>開始安裝taskel   <code>sudo apt-get install tasksel</code></li>
<li>安裝lamp-server   <code>sudo tasksel install lamp-server</code></li>
</ol>
<h3 id="#_安裝phpmyadmin"># 安裝phpmyadmin</h3>
<ol>
<li><code>sudo apt-get install phpmyadmin</code></li>
<li><a href="http://linadonis.pixnet.net/blog/post/27585552-ubuntu-server-%E5%AE%89%E8%A3%9D-phpmyadmin" target="_blank" rel="external">reference</a></li>
</ol>
<h3 id="#_安裝wordpress"># 安裝wordpress</h3>
<p><img src="http://wow-wp.org/wp-content/uploads/2011/10/wordpress.png" alt="wordpress"></p>
<ol>
<li><a href="https://www.digitalocean.com/community/articles/how-to-install-wordpress-on-ubuntu-12-04" target="_blank" rel="external">超棒教學文</a> 我是跟著文章走，裡面紅色的字記得改成自己的</li>
</ol>
<ul>
<li>cd /var/www</li>
<li>下載wordpress包<br><code>wget http://wordpress.org/latest.tar.gz</code>   </li>
<li>解壓縮<br><code>tar -xzvf latest.tar.gz</code></li>
<li>進到mysql mode<br><code>mysql -u root -p</code></li>
<li>剩下有紅字，推薦看連結XD</li>
</ul>
<h2 id="七、測試連線">七、測試連線</h2>
<p>當你安裝完後，事實上可以利用public domain來連線看看<br>直接在console裡面找到instance的public domian，連線看看是否成功</p>
<ol>
<li><code>cd /var/www</code> </li>
<li><code>sudo vi test.php</code> 創新php檔案，並進到vim模式</li>
<li>按<code>i</code> 進入編輯模式，記得看下面是否出現<code>-- INSERT --</code></li>
<li>打上這一行<code>&lt;?php phpinfo(); ?&gt;</code></li>
<li>按下esc -&gt; 打入<code>:wq</code> -&gt; enter存檔(記得是看iterm下面)</li>
<li>利用public domain/test.php連線測試，看到php的資訊就成功了！</li>
<li>public domain/wordpress 也可以看見你的wordpress有沒有架成功！</li>
</ol>
<h2 id="IP連接instance">IP連接instance</h2>
<p>如果你有自己的ip，想要指到EC2的話，按照下面作法。</p>
<ol>
<li>到godday的DNS manager</li>
</ol>
<ul>
<li>設定你的IP的<code>A record</code></li>
<li>指向instance的<code>Elastic IP</code>即可</li>
</ul>
<p><strong><em>reference</em></strong></p>
<ul>
<li><a href="http://blog.soft.idv.tw/?p=823&amp;page=2" target="_blank" rel="external">阿正老師上篇</a> 阿正老師這兩篇必讀</li>
<li><a href="http://blog.soft.idv.tw/?p=824" target="_blank" rel="external">阿正老師下篇</a> 主機實戰篇</li>
<li><a href="http://blog.rx836.tw/blog/first-amazon-web-services/" target="_blank" rel="external">免費玩Amazon Web Service(AWS) EC2</a> 開機器寫的很詳細，圖文並茂</li>
<li><a href="http://coenraets.org/blog/2012/01/setting-up-wordpress-on-amazon-ec2-in-5-minutes/" target="_blank" rel="external">Setting Up WordPress on Amazon EC2 in 5 minutes</a> 根本神教學，我是受這篇感動才想要把自己的過程給記錄下來。</li>
<li><a href="http://linadonis.pixnet.net/blog/post/27585552-ubuntu-server-%E5%AE%89%E8%A3%9D-phpmyadmin" target="_blank" rel="external">Ubuntu Server 安裝 Phpmyadmin</a> phpmyadmin圖文教學</li>
<li><a href="http://codex.wordpress.org/Giving_WordPress_Its_Own_Directory" target="_blank" rel="external">Giving WordPress Its Own Directory</a> 更換wordpress的路徑位置指向</li>
</ul>
<blockquote>
<p>如果有問題，或者我有寫錯的地方，歡迎留言讓我知道！</p>
</blockquote>
]]></content>
    <category scheme="http://code.kpman.cc/tags/wordpress/" term="wordpress"/>
    <category scheme="http://code.kpman.cc/tags/Amazon/" term="Amazon"/>
    <category scheme="http://code.kpman.cc/tags/EC2/" term="EC2"/>
    <category scheme="http://code.kpman.cc/tags/tasksel/" term="tasksel"/>
    <category scheme="http://code.kpman.cc/tags/ubuntu/" term="ubuntu"/>
    <category scheme="http://code.kpman.cc/tags/AWS/" term="AWS"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Sublime Text 2 實用技巧]]></title>
    <link href="http://code.kpman.cc/2013/06/05/sublime-text-2-實用技巧/"/>
    <id>http://code.kpman.cc/2013/06/05/sublime-text-2-實用技巧/</id>
    <published>2013-06-05T04:53:10.000Z</published>
    <updated>2013-06-05T16:41:38.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://upload.wikimedia.org/wikipedia/en/4/4c/Sublime_Text_Logo.png" alt="Sublime Text 2" title="Sublime Text 2"></p>
<p>Sublime Text 2 是一套越來越火紅的編輯器，如果你是接觸網頁開發，想必對於這套軟體不陌生，以下分享幾個好用的技巧，都是我自己平常比較常使用的技巧，因為我本身是一個懶得看文件的人，所以就整理這篇與大家分享。</p>
<a id="more"></a>
<h2 id="編輯環境">編輯環境</h2>
<ol>
<li>Mac 10.7.5</li>
<li>Sublime Text 2</li>
</ol>
<p>我是使用mac，所以快捷鍵就會是command的配置。</p>
<h2 id="技巧介紹">技巧介紹</h2>
<h3 id="一、Set_Syntax">一、Set Syntax</h3>
<p>有發現你的Sublime Text 2右下角有你正在編輯的環境語言嗎？舉凡JAVA、CSS、HTML5等<br>比如說我現在要從HTML5切到CSS介面，除了由上方的View-&gt;Sytax切換外，可以利用快捷鍵   </p>
<p>切換到CSS範例：   </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shift+<span class="command"><span class="keyword">command</span>+<span class="title">p</span></span></div><div class="line">鍵入sscss</div></pre></td></tr></table></figure>



<p><img src="http://i.imgur.com/51PUAhD.png" alt="Set Syntax" title="Set Syntax"></p>
<p>每一個Color Scheme都會針對不同的語言去做優化，因此值得學習。</p>
<h3 id="二、HTML5_snippet">二、HTML5 snippet</h3>
<p>貼心的Sublime Text 2有內建HTML5的snippet，方法如下：   </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">! + <span class="keyword">tab</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">htm<span class="variable">l:5</span> + <span class="keyword">tab</span></div></pre></td></tr></table></figure>

<p>都可以達成HTML5快速生成已經預定的snippet.   </p>
<p><img src="http://i.imgur.com/grLplgD.png" alt=""></p>
<h3 id="三、Multiple_Selection_同時多個游標">三、Multiple Selection 同時多個游標</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">按住<span class="command"><span class="keyword">command</span>+點選你要的位置</span></div></pre></td></tr></table></figure>


<p>推薦用在處理Array等結構重複性高的資料型態。</p>
<h3 id="四、Column_Selection_同時直行游標">四、Column Selection 同時直行游標</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">按住<span class="keyword">option</span>+按著滑鼠左鍵直行往下拖曳選取</div></pre></td></tr></table></figure>


<p>推薦用在處理html等修改固定class或其他部分。</p>
<p><img src="http://i.imgur.com/1kLSh2P.png" alt=""></p>
<h3 id="五、選取引號內字串">五、選取引號內字串</h3>
<p>通常你都怎樣選取雙引號內的字串呢？<code>&quot;string&quot;</code>利用滑鼠從第一個引號拉到後面那個。</p>
<p>輸入：<code>command + d</code> 即可完成</p>
<h3 id="六、分割畫面">六、分割畫面</h3>
<p>有時候我時常左邊放HTML檔，右邊放SCSS檔，一邊看一邊編輯，這時候就要分割畫面。</p>
<p>輸入：<code>command+option+數量</code></p>
<p>就可以把視窗分割成你要的數量。</p>
<h3 id="七、貼上符合縮排">七、貼上符合縮排</h3>
<p>有時候從網站上複製一段code，常常貼上的部份本身就有縮排，貼完卻只有第一行有縮排，其他跑到前面。</p>
<p>複製完後，輸入：<code>shift+command+v</code></p>
<p>也就是在原本的貼上加上shift就可以解決！</p>
<h3 id="reference"><em>reference</em></h3>
<ol>
<li><a href="http://www.youtube.com/watch?v=41nY3RLBy3w&amp;list=PL8dIIwCMF-SOaSb3_VYUlyULpPyk7iwlh&amp;index=1" target="_blank" rel="external">up chen in 2013 JSDC</a></li>
<li><a href="https://gist.github.com/twosixcode/1988097" target="_blank" rel="external">Paste and Indent</a></li>
</ol>
]]></content>
    <category scheme="http://code.kpman.cc/tags/sublime-text-2/" term="sublime text 2"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[2013 JSDC所見聞]]></title>
    <link href="http://code.kpman.cc/2013/05/20/2013-jsdc所見聞/"/>
    <id>http://code.kpman.cc/2013/05/20/2013-jsdc所見聞/</id>
    <published>2013-05-20T02:57:19.000Z</published>
    <updated>2013-05-20T08:32:40.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/02RzVQA.png" alt="JSDC"></p>
<p>這是第二屆的JSDC，由TonyQ及三大社群舉辦的聚會，非常幸運的我能順利的利用社群票的機制搶到票，在眾多非常有經驗的強者面前，聽完他們的分享，越感覺自己對於網頁開發充滿了熱情！</p>
<a id="more"></a>
<blockquote>
<p>『我們不叫前端工程師，以後請叫我們<em>前端設計師</em>！』</p>
</blockquote>
<p>這是聽完今年的JSDC感覺最有趣的一句話了。這句話帶出了他們的幽默風趣，在Web Develope這一個圈子，能結合設計還有程式的，就是前端工程師，也就是所謂的F2E。</p>
<p>雖然對於網頁開發我自己算是沒有什麼經驗，要談設計我也沒有什麼基礎知識，但我知道這條路是我喜歡的，我會繼續走下去。給自己的目標是十年，我希望十年後我能跟現在我敬佩的前輩們一起討論，一起努力。</p>
<h2 id="議程記錄＆見聞">議程記錄＆見聞</h2>
<h3 id="Day1">Day1</h3>
<ul>
<li><p>【AWS】介紹了他們的服務現在已經針對node.js有放出SDK - 有用過的人歡迎一起分享討論。</p>
</li>
<li><p>【<a href="http://www.slideshare.net/WillHuangTW/java-script-jsdc2013" target="_blank" rel="external">保哥</a>】介紹了他的開發經驗，針對code要怎樣去調教，他說了一句話讓我印象深刻：</p>
</li>
</ul>
<blockquote>
<p>通常你的網站會慢，第一個要查的就是你自己所寫的code，不是你套用的那些framework。</p>
</blockquote>
<p>保哥也推薦利用<a href="jsperf.com">jsperf.com</a>去測試自己的code，雖然執行上面的效果一模一樣，有可能只差一個<code>new</code>效率就差了200倍之多。</p>
<ul>
<li>【<a href="https://speakerdeck.com/linyiru/ai-liao-li-wang-zhan-qian-duan-kai-fa-jing-yan-tan" target="_blank" rel="external">Lawrence</a>】同樣待過資種的Lawrence學長介紹了愛料理的開發，主要是一些用過的套件還有經驗談，舉凡Bootstrap、Font Awesome、template利用Handlebars去完成等。利用Crazyegg、GA去分析，也談到了RWD的問題。最後三句話，始終在腦海中揮之不去。</li>
</ul>
<blockquote>
<p>在技術上有卓越表現，是工程師的浪漫。<br>在設計上有卓越表現，是設計師的浪漫。<br>在產品上有卓越表現，是企劃與PM的浪漫。</p>
</blockquote>
<ul>
<li><p>【<a href="https://speakerdeck.com/evenwu/ru-he-jiao-she-ji-shi-qian-duan-ji-shu" target="_blank" rel="external">Even Wu</a>】Even介紹到了如何教前端技術，投影片的風格太有趣XD聊到了教設計師寫code其實要讓他們自動自發的學習，也是一個最重要的觀念：激勵。這個議程談的不是技術，而是一種經驗和體悟。<br>最後剩下的時間，大家交流的問題也很有趣。就有某設計師提到：他原本是設計師，但他每次提出的效果，前端工程師都跟他說這做不出來，他為了證明做的到，便開始自動自發的學習寫code，來向前端工程師證明。   </p>
</li>
<li><p>【<a href="https://speakerdeck.com/wallat/gong-cheng-shi-tao-sheng-huo-gong-ju-jie-shao-zuo-geng-kuai-dian" target="_blank" rel="external">up chen</a>】介紹了很多實用的工具，但可能我自己本身就是一個很偷懶的人，（偷懶的人都會想要去找一些好用的工具讓自己做事更快）所以覺得這一個議程沒有得到很多新知。<br>但像是sublime text 的column selection便是之前沒有在使用，但是覺得對自己很方便的技巧:)</p>
</li>
<li><p>【Rex Huang】這個主題很酷，在瀏覽器上面建立一個os，而且執行起來很順，重點是利用js去打造的，同時也是大會的贊助商，未來應該很有發展，但是對於現階段的我來說比較艱深，所以就沒有很仔細的記錄筆記。</p>
</li>
<li><p>【KKBOX】kkbox來談談利用node.js開發的心得。介紹了一些node的用法還有經驗，但這種議程最難過的就是自己對於node.js接觸還沒有很深，所以聽起來會有點懵懵懂懂，印象最深刻的就是這句話：</p>
</li>
</ul>
<blockquote>
<p>利用JavaScript去寫後台聽起來很酷，但做起來會想要哭。</p>
</blockquote>
<ul>
<li>【Ruben Tan】是一個聲音很好聽的英文場議程。講者提到了flow control問題，要避免寫太多call back才是，single thread一直是node.js開發的問題。</li>
</ul>
<h3 id="Day_2">Day 2</h3>
<p><img src="http://i.imgur.com/8N7fGlU.png" alt="picture from Josephj" title="F2E is Keystone"></p>
<ul>
<li>【<a href="https://speakerdeck.com/josephj/f2e-the-keystone" target="_blank" rel="external">Josephj(啊嗚)</a>】早在JSDC開始前，就在網路上得知該前輩維護的<a href="http://f2eclass.com" target="_blank" rel="external">資源</a>，對於網頁開發，他待過yahoo!，從IE4開始就寫前台了！投影片上面也列出好幾位很值得學習的前輩，真是看的我心花怒放XD<br>前端魂，是身為前端工程師（設計師？）應該有的精神！</li>
</ul>
<blockquote>
<p>前端，你的名字叫熱血</p>
</blockquote>
<p>前輩也提到，技術不是重點，態度才是，避免盲目的追求技術，好的前端不等於知道很多技術。積極分享、多回饋，這點我真的在Josephj身上看到，從他架設的f2eclass就可以知道他願意分享的態度。</p>
<ul>
<li><p>【<a href="http://jsdc.york.tw:3939/" target="_blank" rel="external">york</a>】這是一場非常酷的live demo，台上講者的投影片，透過連線到jsdc.york.tw可以即時的在自己電腦切換，且下方就demo了socket.io的實作。雖然自己還沒有接觸到這一塊，但知道socket.io是利用websocket去做，在沒有實作websocket的瀏覽器，會切換別的通道，讓他們也可以work，所以支援的瀏覽器很廣。</p>
</li>
<li><p>【<a href="https://speakerdeck.com/jaceju/understanding-the-mvc-mvp-mvvm-in-javascript" target="_blank" rel="external">大澤木小鐵</a>】小鐵與我們分享了在JavaScript上面實作MVC、MVP、MVVM（簡稱MV*）的心法，這場我聽的津津有味！利用圖解的方式搭配很多時事梗XD重點是讓沒什麼經驗的我也可以略懂，相信未來在開發JS的時候，會再想到這一份投影片。</p>
</li>
<li><p>【<a href="https://speakerdeck.com/othree/this" target="_blank" rel="external">othree</a>】othree和我們分享了this的用法。在不同情況呼叫this的時候，他針對的function以及目標會不同。然而我覺得這對我來說也還是太深了XD 開發的經驗還是不太足夠，但這一個主題應該是很多有經驗的前輩們都想要討論的問題，期待自己能好好的加強自己，等到我也遇到this的問題，我相信我又更加進步了。</p>
</li>
<li><p>【<a href="http://www.slideshare.net/lis186/20130519-sketching-with-codejsdc2013" target="_blank" rel="external">阿修(Justin Lee)</a>】阿修介紹到了在與設計溝通的時候，其實為了記錄當下討論的結果，利用inline把效果寫進html最快，等到往後要維護的時候，工程師在自己去maintain，著實讓我上了一課。阿修也示範了一套很酷的Titanium，可以即時的在web編輯app程式，然後利用手機即時連線，為了加速效果，也利用了<a href="https://github.com/dbankier/TiShadow" target="_blank" rel="external">Tishaow</a>去built，存檔的同時就可以即時看到，效率非常高。</p>
</li>
<li><p>【Mozilla】介紹了利用Emscripten去把不同的語言編譯成JavaScript，可以在瀏覽器上面運行這樣。</p>
</li>
<li><p>【<a href="http://www.slideshare.net/nowill/rwd-21436569" target="_blank" rel="external">Nowill</a>】Nowill介紹了RWD的一些想法，她是一個非常有經驗的前輩，參與很多專案，與很多公司有很多合作經驗。她說了，RWD不是口頭上說說就是用media query就可以解決的，還有很多技巧是要自己真的去做過才會知道的。提到了五大秘訣：掌握解析度、流動式布局、使用者經驗、體驗操作、推敲思考。且她也提到，不是每一個網站都適合作RWD，因為在需要圖片解析度，文字閱讀的網站，應該針對不同的case去做因應。</p>
</li>
</ul>
<h2 id="心得">心得</h2>
<p>參與了本次的JSDC，我體會到了那些專注於在一件事情上面的美好，那種熱忱，都是在這些前輩們上面可以看到。前端工程師要做的事情，會一點設計，會知道要怎樣寫程式，其實就是將這世界上美的事物，利用web的方式讓大家看的見。<br>我相信分享是這世界上最美好的事情，聽到許多前輩的分享，我自己會有一種想要讓自己變很強的衝動，但有時候會忘記那些最單純的人際關係。在周遭一些朋友身上，我看見了他們很強，很厲害，讓我打從心底佩服；但不知道為什麼，對於他們我會有一種不太想向他們請教的感覺，或許是他們平時透露出來的訊息吧，讓我感覺不是那麼好。<br>我認為交流是一件很愉悅的事情，可以讓彼此在短時間就可以學習到很多，因此我很樂意分享，把自己知道不多但覺得實用的東西給記錄下來，期許大家可以開心的交流，開心的分享，而並非是那種『我知道這個很好用，但你沒有問，你沒有一起來討論，所以我不想告訴你。』提醒自己，要當一個樂意分享的人，在前端開發這一塊，我又重新充滿電了！</p>
<blockquote>
<p>在變強之前，我想要先變好:)</p>
</blockquote>
<h3 id="reference"><em>reference</em></h3>
<ul>
<li><a href="http://hackfoldr.org/#/jsdctw2013/1xcPi6UutDHCKjgoYH4yUJxQ_728E2VO3og1e3Eq0OtE" target="_blank" rel="external">JSDC懶人包</a></li>
<li><a href="https://docs.google.com/spreadsheet/ccc?key=0AqMUl4JFkRfldEVuNDBkNUNsSlZEbDBFXzYzdTloUkE#gid=0" target="_blank" rel="external">JSDC議程 slide整理</a> - 這份很完整</li>
<li><a href="http://f2eclass.com" target="_blank" rel="external">f2eclass</a></li>
<li><a href="http://blog.darkthread.net/" target="_blank" rel="external">黑暗執行緒</a></li>
<li><a href="http://blog.wu-boy.com/" target="_blank" rel="external">小惡魔 apple boy</a></li>
</ul>
]]></content>
    <category scheme="http://code.kpman.cc/tags/JSDC/" term="JSDC"/>
    <category scheme="http://code.kpman.cc/tags/code/" term="code"/>
    <category scheme="http://code.kpman.cc/tags/F2E/" term="F2E"/>
  </entry>
</feed>
