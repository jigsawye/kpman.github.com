<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[kpman | code]]></title>
  <subtitle><![CDATA[記錄開發過程大小事]]></subtitle>
  <link href="http://code.kpman.cc/atom.xml" rel="self"/>
  <link href="http://code.kpman.cc"/>
  <updated>2013-05-20T08:32:55.912Z</updated>
  <id>http://code.kpman.cc/</id>
  <author>
    <name><![CDATA[kpman | code]]></name>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[2013 JSDC所見聞]]></title>
    <link href="http://code.kpman.cc/2013/05/20/2013-jsdc所見聞/"/>
    <id>http://code.kpman.cc/2013/05/20/2013-jsdc所見聞/</id>
    <published>2013-05-20T02:57:19.000Z</published>
    <updated>2013-05-20T08:32:40.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/02RzVQA.png" alt="JSDC"></p>
<p>這是第二屆的JSDC，由TonyQ及三大社群舉辦的聚會，非常幸運的我能順利的利用社群票的機制搶到票，在眾多非常有經驗的強者面前，聽完他們的分享，越感覺自己對於網頁開發充滿了熱情！</p>
<a name="more"></a>

<blockquote>
<p>『我們不叫前端工程師，以後請叫我們<em>前端設計師</em>！』</p>
</blockquote>
<p>這是聽完今年的JSDC感覺最有趣的一句話了。這句話帶出了他們的幽默風趣，在Web Develope這一個圈子，能結合設計還有程式的，就是前端工程師，也就是所謂的F2E。</p>
<p>雖然對於網頁開發我自己算是沒有什麼經驗，要談設計我也沒有什麼基礎知識，但我知道這條路是我喜歡的，我會繼續走下去。給自己的目標是十年，我希望十年後我能跟現在我敬佩的前輩們一起討論，一起努力。</p>
<h2>議程記錄＆見聞</h2>
<h3>Day1</h3>
<ul>
<li><p>【AWS】介紹了他們的服務現在已經針對node.js有放出SDK - 有用過的人歡迎一起分享討論。</p>
</li>
<li><p>【<a href="http://www.slideshare.net/WillHuangTW/java-script-jsdc2013">保哥</a>】介紹了他的開發經驗，針對code要怎樣去調教，他說了一句話讓我印象深刻：</p>
</li>
</ul>
<blockquote>
<p>通常你的網站會慢，第一個要查的就是你自己所寫的code，不是你套用的那些framework。</p>
</blockquote>
<p>保哥也推薦利用<a href="jsperf.com">jsperf.com</a>去測試自己的code，雖然執行上面的效果一模一樣，有可能只差一個<code>new</code>效率就差了200倍之多。</p>
<ul>
<li>【<a href="https://speakerdeck.com/linyiru/ai-liao-li-wang-zhan-qian-duan-kai-fa-jing-yan-tan">Lawrence</a>】同樣待過資種的Lawrence學長介紹了愛料理的開發，主要是一些用過的套件還有經驗談，舉凡Bootstrap、Font Awesome、template利用Handlebars去完成等。利用Crazyegg、GA去分析，也談到了RWD的問題。最後三句話，始終在腦海中揮之不去。</li>
</ul>
<blockquote>
<p>在技術上有卓越表現，是工程師的浪漫。<br>在設計上有卓越表現，是設計師的浪漫。<br>在產品上有卓越表現，是企劃與PM的浪漫。</p>
</blockquote>
<ul>
<li><p>【<a href="https://speakerdeck.com/evenwu/ru-he-jiao-she-ji-shi-qian-duan-ji-shu">Even Wu</a>】Even介紹到了如何教前端技術，投影片的風格太有趣XD聊到了教設計師寫code其實要讓他們自動自發的學習，也是一個最重要的觀念：激勵。這個議程談的不是技術，而是一種經驗和體悟。<br>最後剩下的時間，大家交流的問題也很有趣。就有某設計師提到：他原本是設計師，但他每次提出的效果，前端工程師都跟他說這做不出來，他為了證明做的到，便開始自動自發的學習寫code，來向前端工程師證明。   </p>
</li>
<li><p>【<a href="https://speakerdeck.com/wallat/gong-cheng-shi-tao-sheng-huo-gong-ju-jie-shao-zuo-geng-kuai-dian">up chen</a>】介紹了很多實用的工具，但可能我自己本身就是一個很偷懶的人，（偷懶的人都會想要去找一些好用的工具讓自己做事更快）所以覺得這一個議程沒有得到很多新知。<br>但像是sublime text 的column selection便是之前沒有在使用，但是覺得對自己很方便的技巧:)</p>
</li>
<li><p>【Rex Huang】這個主題很酷，在瀏覽器上面建立一個os，而且執行起來很順，重點是利用js去打造的，同時也是大會的贊助商，未來應該很有發展，但是對於現階段的我來說比較艱深，所以就沒有很仔細的記錄筆記。</p>
</li>
<li><p>【KKBOX】kkbox來談談利用node.js開發的心得。介紹了一些node的用法還有經驗，但這種議程最難過的就是自己對於node.js接觸還沒有很深，所以聽起來會有點懵懵懂懂，印象最深刻的就是這句話：</p>
</li>
</ul>
<blockquote>
<p>利用JavaScript去寫後台聽起來很酷，但做起來會想要哭。</p>
</blockquote>
<ul>
<li>【Ruben Tan】是一個聲音很好聽的英文場議程。講者提到了flow control問題，要避免寫太多call back才是，single thread一直是node.js開發的問題。</li>
</ul>
<h3>Day 2</h3>
<p><img src="http://i.imgur.com/8N7fGlU.png" alt="picture from Josephj" title="F2E is Keystone"></p>
<ul>
<li>【<a href="https://speakerdeck.com/josephj/f2e-the-keystone">Josephj(啊嗚)</a>】早在JSDC開始前，就在網路上得知該前輩維護的<a href="http://f2eclass.com">資源</a>，對於網頁開發，他待過yahoo!，從IE4開始就寫前台了！投影片上面也列出好幾位很值得學習的前輩，真是看的我心花怒放XD<br>前端魂，是身為前端工程師（設計師？）應該有的精神！</li>
</ul>
<blockquote>
<p>前端，你的名字叫熱血</p>
</blockquote>
<p>前輩也提到，技術不是重點，態度才是，避免盲目的追求技術，好的前端不等於知道很多技術。積極分享、多回饋，這點我真的在Josephj身上看到，從他架設的f2eclass就可以知道他願意分享的態度。</p>
<ul>
<li><p>【<a href="http://jsdc.york.tw:3939/">york</a>】這是一場非常酷的live demo，台上講者的投影片，透過連線到jsdc.york.tw可以即時的在自己電腦切換，且下方就demo了socket.io的實作。雖然自己還沒有接觸到這一塊，但知道socket.io是利用websocket去做，在沒有實作websocket的瀏覽器，會切換別的通道，讓他們也可以work，所以支援的瀏覽器很廣。</p>
</li>
<li><p>【<a href="https://speakerdeck.com/jaceju/understanding-the-mvc-mvp-mvvm-in-javascript">大澤木小鐵</a>】小鐵與我們分享了在JavaScript上面實作MVC、MVP、MVVM（簡稱MV*）的心法，這場我聽的津津有味！利用圖解的方式搭配很多時事梗XD重點是讓沒什麼經驗的我也可以略懂，相信未來在開發JS的時候，會再想到這一份投影片。</p>
</li>
<li><p>【<a href="https://speakerdeck.com/othree/this">othree</a>】othree和我們分享了this的用法。在不同情況呼叫this的時候，他針對的function以及目標會不同。然而我覺得這對我來說也還是太深了XD 開發的經驗還是不太足夠，但這一個主題應該是很多有經驗的前輩們都想要討論的問題，期待自己能好好的加強自己，等到我也遇到this的問題，我相信我又更加進步了。</p>
</li>
<li><p>【<a href="http://www.slideshare.net/lis186/20130519-sketching-with-codejsdc2013">阿修(Justin Lee)</a>】阿修介紹到了在與設計溝通的時候，其實為了記錄當下討論的結果，利用inline把效果寫進html最快，等到往後要維護的時候，工程師在自己去maintain，著實讓我上了一課。阿修也示範了一套很酷的Titanium，可以即時的在web編輯app程式，然後利用手機即時連線，為了加速效果，也利用了<a href="https://github.com/dbankier/TiShadow">Tishaow</a>去built，存檔的同時就可以即時看到，效率非常高。</p>
</li>
<li><p>【Mozilla】介紹了利用Emscripten去把不同的語言編譯成JavaScript，可以在瀏覽器上面運行這樣。</p>
</li>
<li><p>【<a href="http://www.slideshare.net/nowill/rwd-21436569">Nowill</a>】Nowill介紹了RWD的一些想法，她是一個非常有經驗的前輩，參與很多專案，與很多公司有很多合作經驗。她說了，RWD不是口頭上說說就是用media query就可以解決的，還有很多技巧是要自己真的去做過才會知道的。提到了五大秘訣：掌握解析度、流動式布局、使用者經驗、體驗操作、推敲思考。且她也提到，不是每一個網站都適合作RWD，因為在需要圖片解析度，文字閱讀的網站，應該針對不同的case去做因應。</p>
</li>
</ul>
<h2>心得</h2>
<p>參與了本次的JSDC，我體會到了那些專注於在一件事情上面的美好，那種熱忱，都是在這些前輩們上面可以看到。前端工程師要做的事情，會一點設計，會知道要怎樣寫程式，其實就是將這世界上美的事物，利用web的方式讓大家看的見。<br>我相信分享是這世界上最美好的事情，聽到許多前輩的分享，我自己會有一種想要讓自己變很強的衝動，但有時候會忘記那些最單純的人際關係。在周遭一些朋友身上，我看見了他們很強，很厲害，讓我打從心底佩服；但不知道為什麼，對於他們我會有一種不太想向他們請教的感覺，或許是他們平時透露出來的訊息吧，讓我感覺不是那麼好。<br>我認為交流是一件很愉悅的事情，可以讓彼此在短時間就可以學習到很多，因此我很樂意分享，把自己知道不多但覺得實用的東西給記錄下來，期許大家可以開心的交流，開心的分享，而並非是那種『我知道這個很好用，但你沒有問，你沒有一起來討論，所以我不想告訴你。』提醒自己，要當一個樂意分享的人，在前端開發這一塊，我又重新充滿電了！</p>
<blockquote>
<p>在變強之前，我想要先變好:)</p>
</blockquote>
<h3><em>reference</em></h3>
<ul>
<li><a href="http://hackfoldr.org/#/jsdctw2013/1xcPi6UutDHCKjgoYH4yUJxQ_728E2VO3og1e3Eq0OtE">JSDC懶人包</a></li>
<li><a href="https://docs.google.com/spreadsheet/ccc?key=0AqMUl4JFkRfldEVuNDBkNUNsSlZEbDBFXzYzdTloUkE#gid=0">JSDC議程 slide整理</a> - 這份很完整</li>
<li><a href="http://f2eclass.com">f2eclass</a></li>
<li><a href="http://blog.darkthread.net/">黑暗執行緒</a></li>
<li><a href="http://blog.wu-boy.com/">小惡魔 apple boy</a></li>
</ul>
]]></content>
    <category scheme="http://code.kpman.cc/tags/JSDC/" term="JSDC"/>
    <category scheme="http://code.kpman.cc/tags/code/" term="code"/>
    <category scheme="http://code.kpman.cc/tags/F2E/" term="F2E"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[建立自己的GitHub Project Pages]]></title>
    <link href="http://code.kpman.cc/2013/05/18/建立自己的github-project-pages/"/>
    <id>http://code.kpman.cc/2013/05/18/建立自己的github-project-pages/</id>
    <published>2013-05-17T16:04:03.000Z</published>
    <updated>2013-05-18T12:10:36.000Z</updated>
    <content type="html"><![CDATA[<p>在GitHub使用上，我算是初新者，有疑問才有進步。每當看到有人把好玩的東西放到GitHub上面變成靜態頁面，都會很想知道他是怎樣辦到的。結果不難，就是利用GitHub Pages來做到。</p>
<a name="more"></a>

<h2>GitHub Pages 介紹</h2>
<p>當你要有一個自己的GitHub Pages，其實分成兩項。   </p>
<ol>
<li>repo的名字為<code>yourname.github.com</code>，則會產生的page路徑為 <code>yourname.github.io</code>。<a href="http://kpman.github.io">本部落格</a>是建立在github上面，就是利用這一個GitHub Pages模式去建立，可以參考<a href="http://code.kpman.cc/2013/04/26/hexo%E6%9E%B6blog%E5%88%9D%E9%AB%94%E9%A9%97/">hexo架blog初體驗</a>、<a href="http://code.kpman.cc/2013/04/27/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1blog%E7%9A%84subdomain/">建立自己blog的subdomain</a>這兩篇文章。</li>
<li>repo的名字為<code>repo-name</code>，則會產生的page路徑為 <code>yourname.github.io/repo-name</code>，這邊的repo name就不像第一種模式，沒有固定名稱。</li>
</ol>
<h2>GitHub Pages 建立</h2>
<p>在每一個新的repo下面，正常的情況都是在mater這一個branch。分享一下我自己的作法。</p>
<ol>
<li><p>GitHub頁面上建立一個新的repo，這邊我取名為first-repo。</p>
<p><img src="http://i.imgur.com/6mFqQlc.png" alt="create new repo" title="new repo"></p>
</li>
<li><p>從本機端clone下來，參照自己的路徑，我的repo則是在command line底下打   </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">git</span> clone git<span class="variable">@github</span>.com:kpman/first-repo.git
</pre></td></tr></table></figure>
</li>
<li><p>移到該資料夾</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">cd</span> first-repo
</pre></td></tr></table></figure>
</li>
<li><p>將branch移到<code>gh-pages</code>，這步驟很重要，Github Pages就是看這一個branch去決定頁面的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="title">git</span> branch gh-pages
<span class="title">git</span> checkout gh-pages
</pre></td></tr></table></figure>
或者<br><figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">git</span> <span class="comment">checkout</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">orphan</span> <span class="comment">gh</span>-<span class="comment">pages</span> <span class="comment">//建立一個沒有parent的branch，並移到該branch上
</pre></td></tr></table></figure>
</li>
<li><p>將編輯好的檔案push上去。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="title">git</span> add .
<span class="title">git</span> commit
<span class="title">git</span> push origin gh-pages
</pre></td></tr></table></figure>
</li>
<li><p>完成！</p>
</li>
</ol>
<h2>路徑差異</h2>
<p><a href="http://github.com/kpman/liteAccordion"><a href="http://github.com/kpman/liteAccordion">http://github.com/kpman/liteAccordion</a></a>這樣代表連回GitHub的code頁面<br><a href="http://kpman.github.io/liteAccordion"><a href="http://kpman.github.io/liteAccordion">http://kpman.github.io/liteAccordion</a></a>因為新增到<code>gh-pages</code>這一個branch，所以可以看到靜態的html展示頁面。</p>
<p>其他範例<br><a href="http://jonobr1.github.io/two.js/">two.js</a><br><a href="http://jschr.github.io/textillate/">textillate</a></p>
<h3><em>reference</em></h3>
<ol>
<li><a href="https://help.github.com/articles/creating-project-pages-manually">官方文件</a></li>
<li><a href="http://xlson.com/2010/11/09/getting-started-with-github-pages.html">Getting started with GitHub Pages</a></li>
<li><a href="https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches">Create a new branch with git and manage branches</a></li>
</ol>
]]></content>
    <category scheme="http://code.kpman.cc/tags/github/" term="github"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[在hexo自訂rss]]></title>
    <link href="http://code.kpman.cc/2013/05/08/在hexo自訂rss/"/>
    <id>http://code.kpman.cc/2013/05/08/在hexo自訂rss/</id>
    <published>2013-05-08T07:50:06.000Z</published>
    <updated>2013-05-08T08:13:40.000Z</updated>
    <content type="html"><![CDATA[<p>趁著好朋友在旁邊的情況下，請教他學會了在hexo自訂rss，再次感受到技術這種東西，真的是當面交流才會發揮他的效益。</p>
<a name="more"></a>

<h3>一、本機環境</h3>
<p>在終端機下輸入以下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">npm</span> <span class="comment">install</span> <span class="comment">hexo</span>-<span class="comment">generator</span>-<span class="comment">feed</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">save
</pre></td></tr></table></figure>

<p>權限沒有取得的記得前面加上<code>sudo</code>。</p>
<h3>二、修改_config.yml</h3>
<p>在主目錄底下的<code>_config.yml</code>檔加上</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">plugins:</span>
<span class="literal">-</span> <span class="comment">hexo</span>-<span class="comment">generator</span>-<span class="comment">feed
</pre></td></tr></table></figure>

<p><img src="http://i.imgur.com/w39zkK6.png" alt="modify _config.yml" title="modify _config.yml"></p>
<p>如此一來便完成了環境設置。</p>
<h3>三、要怎樣找到？</h3>
<p>在hexo generate之後，會發現public資料夾底下多了atom.xml<br>在<a href="http://www.feedly.com/">feedly</a>這類的閱讀收集器<br>只要輸入<code>domain/atom</code>就可以找到<br>例如要訂閱我的blog只要輸入<code>code.kpman.cc/atom</code>就可以搜尋到囉！</p>
<p><img src="http://i.imgur.com/Hk12y1N.png" alt="rss" title="feedly rss search"></p>
<p>突然發現我的blog只有一個人訂閱，那個人就是我自己...  </p>
<h3><em>reference</em></h3>
<ol>
<li><a href="https://github.com/tommy351/hexo/wiki/Plugins">hexo plugins</a></li>
<li><a href="http://michaelhsu.tw/2013/05/05/rssatom-sitemap-for-seo/">RSS/Atom、Sitemap for SEO</a></li>
</ol>
<p>感謝強者阿志耐心面授機宜:)</p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/rss/" term="rss"/>
    <category scheme="http://code.kpman.cc/tags/hexo/" term="hexo"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[利用pseudo element 讓html更簡潔]]></title>
    <link href="http://code.kpman.cc/2013/05/07/利用-pseudo-element-讓-html-更簡潔/"/>
    <id>http://code.kpman.cc/2013/05/07/利用-pseudo-element-讓-html-更簡潔/</id>
    <published>2013-05-07T03:28:16.000Z</published>
    <updated>2013-05-07T05:46:25.000Z</updated>
    <content type="html"><![CDATA[<p>趁著記憶猶新的狀況，記錄自己使用偽元素 (pseudo-element)讓原本的html架構更加簡潔的方法。</p>
<a name="more"></a> 

<h2>何謂pseudo-element?</h2>
<p>不會出現在html的文件裡面，而是利用css讓瀏覽器去實作。以下列出的都是可以使用的pseudo-element。</p>
<ol>
<li>::first-line：若是p元素，則可以用來操作第一行。</li>
<li>::first-letter：用來操作第一個字。</li>
<li>::before：可以在所選元素之前插入樣式/內容。</li>
<li>::after：同<code>before</code>但是是在之後插入。</li>
<li>::selection：用來自定反白後的效果。</li>
</ol>
<blockquote>
<p>為了區分偽元素和偽類，CSS3 的 guildline 將偽元素的寫法修正，以往只要加一個冒號「:」，現在則是加兩個冒號「::」，部分可支援的瀏覽器包含 webkit, firefox, opera。) 
-- by <a href="http://www.mukispace.com/pseudo-elements-10-examples/">MUKI</a></p>
</blockquote>
<h2>修改過程</h2>
<h3>原本的html code</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"icon"</span>&gt;</span>
	<span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"img/icon01.png"</span> <span class="attribute">alt</span>=<span class="value">"正確觀念"</span>&gt;</span>
	<span class="tag">&lt;<span class="title">span</span>&gt;</span>正確觀念<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>scss</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="preprocessor">.icon</span>{
	display: inline-block<span class="comment">;</span>
	position: relative<span class="comment">;</span>
	padding: <span class="number">1</span>em<span class="comment">;</span>
	padding-top: <span class="number">5</span>px<span class="comment">;</span>
	span{
		position: absolute<span class="comment">;</span>
		bottom: -<span class="number">7</span>px<span class="comment">;</span>
		left: <span class="number">12</span>px<span class="comment">;</span>
	}
}
</pre></td></tr></table></figure>

<p>原本利用div &gt; span 的效果去把中文字顯現出來，所以在html的架構下，需要多一個<code>span</code>的tag。<br>且利用<code>img</code>去把圖片給show出來。</p>
<h3>更改過後的html code</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-text</span>=<span class="value">"正確觀念"</span> <span class="attribute">class</span>=<span class="value">"concept_label icon"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span> <span class="comment">&lt;!-- html只剩一行！--&gt;</span>
</pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>scss</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="preprocessor">.icon</span>{
	display: inline-block<span class="comment">;</span>
	position: relative<span class="comment">;</span>
	padding: <span class="number">1</span>em<span class="comment">;</span>
	padding-top: <span class="number">5</span>px<span class="comment">;</span>

	&amp;:before{
		position: absolute<span class="comment">;</span>
		bottom: -<span class="number">7</span>px<span class="comment">;</span>
		left: <span class="number">12</span>px<span class="comment">;</span>
		content: attr(data-text)<span class="comment">; &lt;!-- 關鍵作法 --&gt;</span>
	}
}
<span class="preprocessor">.concept</span>_label{
	background-image: url(../img/icon01_c<span class="preprocessor">.png</span>)<span class="comment">;</span>
}
</pre></td></tr></table></figure>

<h3>觀念整理</h3>
<ol>
<li>將中文字放入自訂的<code>data-*</code>屬性</li>
<li>CSS中利用<code>::before</code>取代原本的<code>span</code></li>
<li>利用<code>content: attr(data-text);</code>將date-text文字取出來</li>
<li>將背景圖片利用另外一個class取代，以後維護性提高。</li>
</ol>
<h3><em>reference</em></h3>
<p><a href="http://www.mukispace.com/pseudo-elements-10-examples/">那些 CSS 偽元素可以幫你做的 10 個效果</a></p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/code/" term="code"/>
    <category scheme="http://code.kpman.cc/tags/css/" term="css"/>
    <category scheme="http://code.kpman.cc/tags/html/" term="html"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[客製化hexo light theme]]></title>
    <link href="http://code.kpman.cc/2013/04/28/客製化hexo-light-theme/"/>
    <id>http://code.kpman.cc/2013/04/28/客製化hexo-light-theme/</id>
    <published>2013-04-28T13:09:37.000Z</published>
    <updated>2013-04-28T14:01:32.000Z</updated>
    <content type="html"><![CDATA[<p>分享一些目前知道的客製化theme技巧。<br>其實非常簡單，但是這些技巧如果沒有問過或是自己看過文件，<br>一時間也無法摸透，所以覺得應該值得把它記錄下來。</p>
<a name="more"></a>

<h3>一、增加Disqus留言板</h3>
<ul>
<li>到<a href="http://disqus.com/">Disqus</a>申請帳號</li>
<li>右上角的Dashboard <code>+Add</code> 申請一個新的帳號</li>
<li>將網址、name、shortname打好後，要把 <code>shortname</code> 記住！<ul>
<li>修改本機目錄下的 <code>_confid.yml</code></li>
<li>在 <code>disqus_shortname</code> 貼上自己的shortname</li>
</ul>
</li>
</ul>
<p>完成～</p>
<p>※ 後記：<br>若你在申請完disqus貼到自己的blog上面，發現出現很多不必要的連結，請到disqus的dashboard去修改。<br>右上方 <code>Setting</code> -&gt; <code>Discovery</code> -&gt; 將Discovery level拉到最右邊，如下圖<br><img src="http://i.imgur.com/eeEjwka.png" alt="Discovery level"></p>
<h3>二、增加右方側欄widget</h3>
<p>在標題就已經破梗囉XD<br>右方出現那些『Tag』『Tag Cloud』等欄位，其實就是修改widget過後得到的結果。<br>方法如下：</p>
<ul>
<li>找到 <code>theme/light/layout/_widget</code> ，可以發現很多 <strong>ejs</strong> 檔</li>
<li>有些是已經自訂好了，例如 <code>category</code> <code>recent_posts</code> 等</li>
<li>在 <code>theme/light/_config.yml</code> 內，修改<strong>widgets</strong>，在底下新增你要的ejs檔名即可～</li>
</ul>
<p>同樣方法可以自己寫ejs檔，一樣在<code>theme/light/_config.yml</code>加上檔名就可以自訂。</p>
<h3>三、增加上方自訂全域導覽列</h3>
<p>預設為Home、Archives這兩個<br>當然得要自訂才爽XD</p>
<p>方法一樣很簡單如下：</p>
<ul>
<li>找到<code>theme/light/_config.yml</code>裡面的第一行</li>
<li>預設狀況應該只有Home&amp;Archives<br> <img src="http://i.imgur.com/reKRQw4.png" alt="menu"></li>
<li>自訂自己的menu，項目後面即為<strong>連結</strong>，可以直接使用<code>http://google.com</code>之類的連結。</li>
</ul>
<h3>四、自訂favicon</h3>
<ul>
<li>首先你要有一個favicon.ico檔或是.png檔(這邊預設檔名為<code>favicon.png</code>)</li>
<li>將檔案放在 <code>主目錄/source</code> 底下<br> <img src="http://i.imgur.com/Aar4ap9.png" alt="favicon path"></li>
<li>找到 <code>theme/light/layout/_partial/head.ejs</code>做修改</li>
<li>在裡面加上head.ejs檔內確認有以下這行code即可擁有自己的favicon  <pre><code><span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"&lt;%- config.root %&gt;favicon.png"</span> <span class="attribute">rel</span>=<span class="value">"icon"</span>&gt;</span>
</code></pre>
</li>
</ul>
<p>以上介紹一些目前知道的自訂方法，<br>希望還有人可以跟我多介紹一些技巧，一起分享吧！</p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/hexo/" term="hexo"/>
    <category scheme="http://code.kpman.cc/tags/theme/" term="theme"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[建立自己blog的subdomain]]></title>
    <link href="http://code.kpman.cc/2013/04/27/建立自己blog的subdomain/"/>
    <id>http://code.kpman.cc/2013/04/27/建立自己blog的subdomain/</id>
    <published>2013-04-26T16:24:36.000Z</published>
    <updated>2013-04-26T16:28:34.000Z</updated>
    <content type="html"><![CDATA[<p>有鑑於 <code>kpman.github.io</code> 這一個網址實在太難記了，所以就決定將自己有的domain利用subdomain的方式指過來。<br>以下的介紹是我的個案，我利用subdomain而非TLD去做。</p>
<a name="more"></a>

<h2>一、擁有自己的domain</h2>
<p>雖然像是廢話XD
但這邊推薦去<a href="www.godaddy.com/">GoDaddy</a>買domain.<br>方便又快，在更新domain的時間非常快速，理論上一個小時內就可以指到你要的ip位置。</p>
<h2>二、到GoDaddy設定subdomain</h2>
<ol>
<li>進到DNS manager</li>
<li><p>新增一筆CNAME</p>
<p><img src="http://i.imgur.com/esdG2wP.png" alt="CNAME"></p>
</li>
<li><p>GoDaddy部分完成</p>
</li>
</ol>
<h2>三、在本機端設置CNAME檔</h2>
<p>這邊要在 <code>主目錄-source</code> 底下放一個檔名為 <code>CNAME</code> 的檔案<br>裡面為你要指向的路徑，這邊我是指向 <code>http://code.kpman.cc</code></p>
<p><img src="http://i.imgur.com/gyMS7U6.png" alt="path"></p>
<p>至於如何設置CNAME檔案，我是利用在github repo上面的create new file</p>
<p><img src="http://i.imgur.com/AHcVLBW.png" alt="create new file"></p>
<p>設置完之後clone下來，然後複製進去<code>主目錄-source</code> 底下XD<br>（有人知道怎樣做比較好嗎？）</p>
<p>理論上這樣子就完成囉！<br>如果有漏掉的麻煩留言給我一起討論:)</p>
<h3><em>reference</em></h3>
<p><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">官方文件</a></p>
]]></content>
    <category scheme="http://code.kpman.cc/tags/domain/" term="domain"/>
    <category scheme="http://code.kpman.cc/tags/hexo/" term="hexo"/>
    <category scheme="http://code.kpman.cc/tags/subdomain/" term="subdomain"/>
    <category scheme="http://code.kpman.cc/tags/url/" term="url"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[hexo架blog初體驗]]></title>
    <link href="http://code.kpman.cc/2013/04/26/hexo架blog初體驗/"/>
    <id>http://code.kpman.cc/2013/04/26/hexo架blog初體驗/</id>
    <published>2013-04-26T14:21:55.000Z</published>
    <updated>2013-05-20T03:41:25.000Z</updated>
    <content type="html"><![CDATA[<p>是這樣的，一直想要找一個空間，可以清爽的放code，可以跟其他人交流<br>有鑑於系上好朋友們紛紛都建立起自己的部落格，因此我也加入了這個行列。</p>
<p>報著取之於人，回饋之於人的心情，我想要把自己從無到有架設這一個blog的過程記錄下來<br>謝謝那些願意指導我的朋友們！</p>
<a name="more"></a>

<h2>一、本機環境設定</h2>
<ol>
<li><p>首先你要有node.js，這是一套快速、簡單且功能強大的 Node.js 網誌框架。</p>
</li>
<li><p>接著你要用 <code>npm install -g hexo</code> 來安裝</p>
</li>
</ol>
<p>理論上這樣就完成了，我個人在裝的時候npm不給裝，發現前面加上 <code>sudo</code> 就可以解決。</p>
<h2>二、github帳號設定</h2>
<ol>
<li><p>你要申請一個自己的github帳號</p>
</li>
<li><p>在主頁右上方創建一個新的repo</p>
<p><img src="http://i.imgur.com/6mFqQlc.png" alt="create new repo" title="new repo"></p>
</li>
<li><p>Repository name填入 <code>github帳號.github.com</code> 用來創建github page</p>
</li>
</ol>
<h2>三、開始使用hexo</h2>
<p>建立hexo</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">hexo</span> init
</pre></td></tr></table></figure>

<p>建立一篇文章，將會是<a href="http://markdown.tw">Markdown</a>形式，可以到source/_post/title.md去修改</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">hexo</span> new <span class="string">"title"</span>
</pre></td></tr></table></figure>

<p>生成public檔</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">hexo</span> generate
</pre></td></tr></table></figure>

<p>開啟server觀看（預設在localhost:4000）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">hexo</span> server
</pre></td></tr></table></figure>

<h2>四、發佈到github上面</h2>
<p>修改 <code>_config.yml</code> 檔案，最下面加上</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="method">deploy:</span>
  <span class="method">type:</span> github
  <span class="method">repository:</span> git@github.<span class="method">com:</span>github帳號/github帳號.github.com.git
  <span class="method">branch:</span> master
</pre></td></tr></table></figure>

<p>我那時候用git的時候，沒有ssh認證，如果遇到相同問題可以看<a href="https://help.github.com/articles/generating-ssh-keys">這篇</a>。<br>照著上面的指令走就可以完成，唯獨mac裡面似乎內建 <code>id_rsa</code> 這把key，這邊我不清楚XD</p>
<p>接著只要輸入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">hexo</span> deploy
</pre></td></tr></table></figure>

<p>等待10分鐘，你的網誌理論上就架好了！網址為 <code>http://github帳號.github.io</code></p>
<h3><em>reference</em></h3>
<ol>
<li><p><a href="http://zespia.tw/hexo/zh-TW/">官方文件</a>非常詳盡，重點是<em>中文</em>！  </p>
</li>
<li><p>強者小熊<a href="http://eva0919.github.io/2013/04/21/%E4%BD%BF%E7%94%A8hexo%E4%BB%A5%E5%8F%8Agithub-page%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC/">教學文</a></p>
</li>
</ol>
]]></content>
    <category scheme="http://code.kpman.cc/tags/code/" term="code"/>
    <category scheme="http://code.kpman.cc/tags/hexo/" term="hexo"/>
    <category scheme="http://code.kpman.cc/tags/github/" term="github"/>
  </entry>
</feed>
