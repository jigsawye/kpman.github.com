webpackJsonp([0xf4fd0cb7d0a9],{419:function(a,n){a.exports={data:{allMarkdownRemark:{edges:[{node:{id:"/Users/kpman/workspace/kpman.github.com/content/_posts/2016-12-16-將-JS-Callback-變成-Promise.md absPath of file >>> MarkdownRemark",html:'<p>隨著越來越多 JS 開發者的提倡，越來越多人擁抱 ES6(+) 的語法，其所帶來的好處讓許多開發者願意接受。</p>\n<p>然而一些新接觸的開發者，在流程控制上會聽聞 Promise 的好處進而開始使用，但較早期的套件會遵循著 node.js style 的 Callback；因此本篇文章將會介紹如何將這類 Callback 利用套件轉成 Promise。</p>\n<p><img src="https://i.imgur.com/Xhzct6v.png"></p>\n<!-- more -->\n<h2 id="nodejs-style-callback"><a href="#nodejs-style-callback" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Node.js Style Callback</h2>\n<p>在 JS 的流程處理上，有許多人一定會遇見 Callback function，而 node.js 有獨特的規範，遵循著這類規範會讓更多開發者受益，這類的 Callback 被稱為 <code class="language-text">Error-First Callbacks</code>。</p>\n<ul>\n<li>非同步的 Callback function 第一個參數是錯誤物件，有錯誤就會回傳錯誤訊息，沒有錯誤則第一個值會是 null。剩下的參數為 Callback function 正常情況下會回傳的值。</li>\n</ul>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">fs.readFile(&#39;/etc/passwd&#39;, (err, data) =&gt; {\n  if (err) throw err; // 此處為 Node.js Style Callback\n  console.log(data);\n});</code></pre>\n      </div>\n<h2 id="thenify-套件使用"><a href="#thenify-%E5%A5%97%E4%BB%B6%E4%BD%BF%E7%94%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>thenify 套件使用</h2>\n<h4 id="使用情境"><a href="#%E4%BD%BF%E7%94%A8%E6%83%85%E5%A2%83" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用情境</h4>\n<p>將會是把第三方套件 Node.js Style Callback 轉成 Promise，接著就可以 <code class="language-text">.then()</code> 或者是利用 <code class="language-text">async</code> <code class="language-text">await</code> 去處理流程了。值得一提此套件利用的是 <code class="language-text">any-promise</code>，理論上你可以隨時的設置你想要的 Promise 實作。</p>\n<h4 id="使用方法"><a href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用方法</h4>\n<p>因為 README 上面寫的蠻不清楚，以下列出幾種狀況，也推薦看套件的測試檔案<a href="https://github.com/thenables/thenify/blob/master/test/test.js">範例</a>：</p>\n<p>範例一：非同步 function 直接接收 cb</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 處理複雜流程</span>\n  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">thenify</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p is a promise now.</span>\n\n<span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>val <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre>\n      </div>\n<p>範例二：非同步 function 直接接收 cb，該 cb 回傳多個參數</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 處理複雜流程</span>\n  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 除了第一個 error msg 外，回傳多個值</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">thenify</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p is a promise now.</span>\n\n<span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>val <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]，會轉成 array</span></code></pre>\n      </div>\n<p>範例三：非同步 function 直接接收多個參數及 cb，該 cb 亦接受多個參數</p>\n<p><strong>此範例為最常被使用功能，關鍵點為 cb 位在 fn 的最後一個參數，且此 cb 遵循著上述提到的 Node.js Style Callback。</strong></p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 處理複雜流程</span>\n  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最後回傳 error msg(null) 和 a, b</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">thenify</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p is a promise now.</span>\n\n<span class="token function">p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>values <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2]，callback 回傳的值，一樣會包成 array</span></code></pre>\n      </div>\n<h2 id="結論"><a href="#%E7%B5%90%E8%AB%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>結論</h2>\n<p>隨著 node 核心原生支援的語法越來越多，選擇利用 babel 搭配就可以在此時享受到 Promise 甚至是 async, await 語法帶來的好處，然而較早期的套件甚至不預設回傳 Promise，此時便需要一些工具的幫助。</p>\n<p>希望這篇文章能幫助到那些一接觸學習 JS 流程控制就享受到 Promise 好處，但實務上卻不太理解如何處理原生或第三方套件這類 Callback function 的開發者。</p>\n<h2 id="reference"><a href="#reference" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>reference</h2>\n<ul>\n<li><a href="https://www.npmjs.com/package/thenify">thenify package</a></li>\n<li><a href="http://eddychang.me/blog/javascript/57-node-js-error-first-callback.html">Node.js error-first callback</a></li>\n<li><a href="http://welefen.com/post/how-to-convert-callback-to-promise.html">如何把 Callback 接口包装成 Promise 接口</a></li>\n</ul>',fields:{slug:"/2016/12/16/將-JS-Callback-變成-Promise/"},frontmatter:{title:"將 JS Callback 轉成 Promise",date:"Dec 16, 2016",tags:["promise","js"]}}},{node:{id:"/Users/kpman/workspace/kpman.github.com/content/_posts/2016-09-17-JavaScript-變數宣告.md absPath of file >>> MarkdownRemark",html:'<p>JS 宣告變數的方式在 ES6 之後增加了 <code class="language-text">let</code> 和 <code class="language-text">const</code>，這篇文章將會談談 <code class="language-text">var</code>、<code class="language-text">let</code> 和 <code class="language-text">const</code>之間的差異。</p>\n<p><img src="https://i.imgur.com/Jgd8jj5.jpg"></p>\n<!-- more -->\n<h2 id="變數宣告的過程"><a href="#%E8%AE%8A%E6%95%B8%E5%AE%A3%E5%91%8A%E7%9A%84%E9%81%8E%E7%A8%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>變數宣告的過程</h2>\n<p><img src="https://i.imgur.com/ya351ON.png"></p>\n<p>如圖所見，JS 內變數的宣告總共會經歷三個階段</p>\n<ul>\n<li>Declaration: 在相對應的作用域範圍內註冊變數名字</li>\n<li>Initialization: 分配記憶體使用</li>\n<li>Assignment: 賦予該變數的值</li>\n</ul>\n<h2 id="var"><a href="#var" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>var</h2>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> x<span class="token punctuation">;</span> <span class="token comment">// Declaration, Initialization</span>\nx <span class="token operator">=</span> <span class="token string">\'Hello World\'</span><span class="token punctuation">;</span> <span class="token comment">// Assignment</span>\n\n<span class="token comment">// all in one line</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">\'Hello World\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">var</code> 廣泛被使用，直到 ES6 推出後才有了其他的替代方式，而如果 var 被宣告在函數內，則沒有辦法在函數外部取得該變數。</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">someFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> innerVar <span class="token operator">=</span> <span class="token string">\'hi\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> innerVar<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>innerVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: innerVar is not defined</span></code></pre>\n      </div>\n<h2 id="let"><a href="#let" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>let</h2>\n<p>在 ES6 後，出現了 <code class="language-text">let</code> 的方式宣告變數，它和 <code class="language-text">var</code> 有共同的作用，便是在函數中封閉，額外的效果是在 block statement 內也是封閉，作用域變得更小範圍，可以減少錯誤的發生。</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">let</span> x<span class="token punctuation">;</span> <span class="token comment">// Declaration, Initialization</span>\nx <span class="token operator">=</span> <span class="token string">\'Hello World\'</span><span class="token punctuation">;</span> <span class="token comment">// Assignment</span>\n\n<span class="token comment">// all in one line</span>\n<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token string">\'Hello World\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> innerLet <span class="token operator">=</span> <span class="token string">\'hi\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do nothing</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>innerLet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: innerLet is not defined</span></code></pre>\n      </div>\n<p>上述例子代表 innerLet 只能在 block statement 內存活，跳出這個 block statement 就無法取得，我們將 let 換成 var 看看：</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> innerLet <span class="token operator">=</span> <span class="token string">\'hi\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do nothing</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>innerLet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hi</span></code></pre>\n      </div>\n<p>由上述可以清楚看到將 <code class="language-text">let</code> 宣告的方式改成 <code class="language-text">var</code> 則可以在 block statement 之外取得該變數，這就是 <code class="language-text">let</code> 相對於 <code class="language-text">var</code> 作用域更小的關係。</p>\n<h2 id="const"><a href="#const" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>const</h2>\n<p><code class="language-text">const</code> 顧名思義就是 constant 的縮寫，ES6 新的語法，代表說只要當宣告過後，該賦予的值就不能被更動，更嚴格來說，是該變數指向的記憶體位址不能被更動。因此，當利用 const 宣告了 <code class="language-text">Array</code> 或是 <code class="language-text">Object</code>，只要不重新賦予值，而是更動 array 或 object 內部狀況，是可以被接受的操作方式，參考以下例子：</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>\n<span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Assignment to constant variable.</span>\n\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 3.14159 ];</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span>pi <span class="token operator">=</span> <span class="token constant">PI</span><span class="token punctuation">;</span> <span class="token comment">// { pi: 3.14159 };</span>\n\narr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Assignment to constant variable.</span>\nobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Assignment to constant variable.</span></code></pre>\n      </div>\n<h2 id="hoisting"><a href="#hoisting" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hoisting</h2>\n<p>在利用 <code class="language-text">var</code>, <code class="language-text">let</code>, <code class="language-text">const</code> 宣告變數的時候，變數都會自動的做 <code class="language-text">Hoisting</code>，也就是被抬升到該作用域的最高處，但是抬升過後，<code class="language-text">var</code> 會對於變數賦予值 <code class="language-text">undefined</code>，而 <code class="language-text">let</code>, <code class="language-text">const</code>一樣也會被抬升，但是沒有初始值，因此會有 ReferenceError 發生。</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n<span class="token keyword">var</span> hello<span class="token punctuation">;</span>\nhello <span class="token operator">=</span> <span class="token string">"I\'m a variable"</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>world<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: world is not defined</span>\n<span class="token keyword">let</span> world<span class="token punctuation">;</span>\nworld <span class="token operator">=</span> <span class="token string">"I\'m a variable"</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="結論"><a href="#%E7%B5%90%E8%AB%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>結論</h2>\n<p>在 ES6 推出後，應該盡可能的利用 <code class="language-text">let</code> 和 <code class="language-text">const</code> 去宣告變數，因為它們的限制更高，會減少出錯的機會。若有使用 ESLint，甚至有條件限制使用 <code class="language-text">var</code>。若是情況一定需要使用 <code class="language-text">var</code>，也應該在作用域的最一開始就宣告變數，以免發生 hoisting 導致無法預期的結果出現。</p>\n<h3 id="reference"><a href="#reference" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>reference</h3>\n<ul>\n<li><a href="https://www.sitepoint.com/how-to-declare-variables-javascript/">How to Declare Variables in Javascript</a></li>\n<li><a href="https://github.com/rccoder/blog/issues/15">如何在 JavaScript 中声明变量</a></li>\n</ul>',fields:{slug:"/2016/09/17/JavaScript-變數宣告/"},frontmatter:{title:"JavaScript 變數宣告",date:"Sep 17, 2016",tags:["js"]}}},{node:{id:"/Users/kpman/workspace/kpman.github.com/content/_posts/2016-09-13-babel-相關名詞簡介.md absPath of file >>> MarkdownRemark",html:'<p><img src="https://raw.githubusercontent.com/babel/logo/master/babel.png"></p>\n<p>babel 是現代前端工程師都不陌生的工具，它可以將 ES6 (+) 的語法轉換為 ES5 甚至是更低的版本，利用 babel 可以讓開發者即刻享受到 ES6 語法所帶來的便利性。\n然而許多 babel 相關的名詞卻常常困擾想要入門的新手們，因此利用本文簡介那些與 babel 相關的名詞，以 babel 6 為主。</p>\n<p>本篇將會會介紹到：</p>\n<ul>\n<li>.babelrc</li>\n<li>babel-cli (with babel-node)</li>\n<li>babel-preset vs. babel-plugin</li>\n<li>babel-register</li>\n<li>babel-polyfill</li>\n<li>babel-plugin-transform-runtime ＆ babel-runtime</li>\n<li>babel-loader</li>\n<li>babel-eslint</li>\n</ul>\n<!-- more -->\n<p>本文用意並非完善的介紹整個 babel 生態系，而是作者整理自己常見且容易搞錯的 babel 相關名詞。</p>\n<h2 id="一、babelrc"><a href="#%E4%B8%80%E3%80%81babelrc" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一、.babelrc</h2>\n<p>這是 <code class="language-text">babel</code> 這個工具需要用到的設定檔，以下所介紹到的各項都需要該設定檔讓 babel 有轉換的依據。</p>\n<p>方法一：</p>\n<p>直接寫獨立的 <code class="language-text">.babelrc</code> 檔，一個基本的格式如下：</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>方法二：</p>\n<p>直接寫進 <code class="language-text">package.json</code> 檔</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">{\n  &quot;name&quot;: &quot;my-package&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;babel&quot;: {\n    // your babel config here\n  }\n}</code></pre>\n      </div>\n<p>註：方法二雖然可以這樣寫，但不建議使用，因為在 react-native 會出現<a href="https://github.com/mjackson/http-client/pull/7">已知的問題</a>。</p>\n<h2 id="二、babel-cli"><a href="#%E4%BA%8C%E3%80%81babel-cli" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>二、babel-cli</h2>\n<p>利用 npm 安裝 babel-cli 將會同時註冊 <code class="language-text">babel</code> 和 <code class="language-text">babel-node</code> 兩個最常使用的指令。</p>\n<p><code class="language-text">$ npm install babel-cli --save-dev</code></p>\n<p>利用上述指令安裝在 project 的目錄底下。</p>\n<h3 id="babel"><a href="#babel" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>babel</h3>\n<p>可以直接在終端機利用 <code class="language-text">babel</code> 指令做 ES6 的語法轉換，\n常用的情景為將 <code class="language-text">src</code> 資料夾 build 成 <code class="language-text">lib</code> 資料夾，\n身為 library 開發者，以不要預設使用者有 ES6 的環境為佳，\n上述簡單的指令如下：</p>\n<p><code class="language-text">$ babel src -d lib</code></p>\n<p>若需更多參數，請參考官方教學。</p>\n<h3 id="babel-node"><a href="#babel-node" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>babel-node</h3>\n<p>可以利用 <code class="language-text">babel-node myEs6.js</code> 直接運行 ES6 的 code，\n當然需要 .babelrc 檔還有相關的 presets 或是 plugins 做為 babel 轉換的依據。</p>\n<p>而 <code class="language-text">babel-node</code> 執行的時候會預設載入 <code class="language-text">babel-polyfill</code> 使用，\n因此會佔大量的記憶體空間，官方不建議在 production 環境使用。</p>\n<h2 id="三、babel-preset-vs-babel-plugin"><a href="#%E4%B8%89%E3%80%81babel-preset-vs-babel-plugin" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>三、babel-preset vs. babel-plugin</h2>\n<p>presets 和 plugins 這兩個 key 在 <code class="language-text">.babelrc</code> 檔內會很常看到，\n其中的差異便是一個 preset 可以包含其他不同 presets 或是不同的 plugins。</p>\n<p>例如 <code class="language-text">babel-preset-es2015</code> 當中包含了\n<code class="language-text">transform-es2015-arrow-functions</code>\n<code class="language-text">transform-es2015-block-scoped-functions</code>\n等 21 個不同的 plugins。</p>\n<p><strong>順序問題</strong></p>\n<p>babel 在執行 transform 的過程，會 plugins 先載入，且按照由上往下（由左向右）的順序載入，\n但是要注意的事情，presets 會在 plugins 之後，然後載入的順序是由下往上（由右向左）的反向順序。</p>\n<h3 id="stage"><a href="#stage" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>stage</h3>\n<p>babel 針對 stage 有實作幾個不同的 presets，包含了</p>\n<ul>\n<li>preset-stage-0</li>\n<li>preset-stage-1</li>\n<li>preset-stage-2</li>\n<li>preset-stage-3</li>\n</ul>\n<p>stage 數字越大的 preset 所包含的 plugins 代表即將進入 <a href="https://github.com/tc39/proposals">ECMA262 standard</a>, <a href="https://tc39.github.io/process-document/">TC39 Process</a>，\n官方預設的範例 stage 0 的 preset 使用就是因為其包含了 stage 1, 2, 3 的 presets，\n而許多開發者直接用 stage 0，會把全部 stage 都載入，建議花時間了解各個 preset-stage 分別載入哪些 plugins 為佳。</p>\n<p>stage 是會隨著時間演進，在不同的階段所看到的 stage 內容可能都不一樣。</p>\n<h2 id="四、babel-register"><a href="#%E5%9B%9B%E3%80%81babel-register" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>四、babel-register</h2>\n<p>當載入 <code class="language-text">babel-register</code> 後，其接下來的 es6 語法都可以被設定的 .babelrc 做轉換，</p>\n<p>載入的方式有兩種：</p>\n<p>方法一：</p>\n<p>額外建立一個進入點檔案，由於在這個進入點 node 並不知道 es6 語法，\n因此於此需要利用 <code class="language-text">require(&#39;babel-register&#39;)</code> 的方式載入</p>\n<p>進入點檔名以 <code class="language-text">entry.js</code> 為例：</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'babel-register\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./yourEs6Index\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>因此未來執行 <code class="language-text">node entry.js</code> 就可以利用 <code class="language-text">babel-register</code> 動態載入的方式進行轉換語法。</p>\n<p>方法二：</p>\n<p>在終端機執行 <code class="language-text">node</code> 的時候，直接利用 <code class="language-text">-r</code> 參數帶入 <code class="language-text">babel-register</code>，<code class="language-text">-r</code> 等於 <code class="language-text">--require</code> 代表 module to preload</p>\n<p><code class="language-text">$ node -r babel-register yourEs6Index.js</code></p>\n<h2 id="五、babel-polyfill"><a href="#%E4%BA%94%E3%80%81babel-polyfill" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>五、babel-polyfill</h2>\n<p>什麼是 <code class="language-text">polyfill</code>?</p>\n<p>wiki: In web development, a polyfill is code that implements a feature on web browsers that do not support the feature.</p>\n<p>因此 <code class="language-text">babel-polyfill</code> 顧名思義就是 babel 幫我們做了一些現階段還沒有被各家瀏覽器通用支援的 feature，好讓我們在現階段就可以利用一些未來原生的語法，例如：<code class="language-text">Promise</code>, <code class="language-text">Array.from</code>, <code class="language-text">Object.assign</code>, <code class="language-text">Array.includes</code> 等。\n像是 Chrome 對於 es6 的支援度一直以來都蠻高的，但是並非每家瀏覽器廠商都能支援，因此需要有 polyfill。</p>\n<p><strong>babel-node</strong>\n當利用 babel-node 去運行 js 檔的時候，會<strong>預設</strong>載入 <code class="language-text">babel-polyfill</code>，\n因此你即可利用 babel-node run 一個帶有 promise 的 js 檔，\n而不需再另外 require <code class="language-text">bluebird</code> 等套件。</p>\n<p><strong>babel-polyfill</strong>\n主要 includes 了 <a href="https://github.com/facebook/regenerator/tree/master/packages/regenerator-runtime">regenerator runtime</a> 和 <a href="https://github.com/zloirock/core-js">core-js</a>。\n<code class="language-text">regenerator runtime</code> 就是將 generator/async 轉換成 es5 語法，而 <code class="language-text">core-js</code> 是 Modular standard library for JavaScript 集合，詳細請參閱連結。</p>\n<h2 id="六、babel-plugin-transform-runtime-＆-babel-runtime"><a href="#%E5%85%AD%E3%80%81babel-plugin-transform-runtime-%EF%BC%86-babel-runtime" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>六、babel-plugin-transform-runtime ＆ babel-runtime</h2>\n<p>在做轉換的時候，若利用 <code class="language-text">babel-polyfill</code> 會做 global scope，所以當你今天是要做 lib/tool 模式，沒辦法控制你的運行環境，則不適合利用 babel-polyfill，需要用 <code class="language-text">babel-plugin-transform-runtime</code> 為佳。</p>\n<ol>\n<li><code class="language-text">babel-plugin-transform-runtime</code> 會把多個檔案 reference 到 <code class="language-text">babel-runtime</code> 這個 package，因此當你使用 <code class="language-text">transform-runtime</code> 就一定要裝 <code class="language-text">babel-runtime</code></li>\n<li><code class="language-text">babel-plugin-transform-runtime</code> 的轉換機制也是 alias 到 <code class="language-text">core-js</code>，就和 <code class="language-text">babel-polyfill</code> 一樣，所以不用再 require <code class="language-text">babel-polyfill</code></li>\n<li>官方建議安裝方法如下： transform 安裝進 devDependencies</li>\n</ol>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save-dev babel-plugin-transform-runtime\n$ <span class="token function">npm</span> <span class="token function">install</span> --save babel-runtime</code></pre>\n      </div>\n<h2 id="七、babel-loader"><a href="#%E4%B8%83%E3%80%81babel-loader" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>七、babel-loader</h2>\n<p><code class="language-text">loader</code> 是 <code class="language-text">webpack</code> 用來載入各種不同類型檔案的套件，而 <code class="language-text">babel-loader</code> 讓 webpack 可以用來執行 babel 轉換的的一種套件。</p>\n<p>利用 <code class="language-text">babel-loader</code> 可以利用 webpack 打包時候同時進行 babel 的轉換，以下是簡單範例檔：</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n      loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'babel\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p>因為 <code class="language-text">babel-loader</code> 的速度很慢，官方建議把 <code class="language-text">node_modules</code> exclude 掉。</p>\n<h2 id="八、babel-eslint"><a href="#%E5%85%AB%E3%80%81babel-eslint" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>八、babel-eslint</h2>\n<p><code class="language-text">ESLint</code> 堪稱是近代偉大的 linter 發明之一，它可以讓使用者高度客製化的 parser 語法，而目前原生的 ESLint 支援的語法有 <code class="language-text">ES6/ES7</code>, <code class="language-text">JSX</code>, and <code class="language-text">object rest/spread</code>，如果你用到的更多 babel 語法則需要 babel-eslint 來幫忙。</p>\n<p><code class="language-text">$ npm install eslint@3.x babel-eslint@6 --save-dev</code></p>\n<p>.eslintrc 範例檔</p>\n<div class="gatsby-highlight" data-language="json">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"babel-eslint"</span><span class="token punctuation">,</span>\n  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="結論"><a href="#%E7%B5%90%E8%AB%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>結論</h2>\n<p>當然 babel 的套件不僅僅如此，還有 <a href="https://github.com/babel/babelify">babelify</a>, <a href="https://github.com/babel/babili">babili</a> 等許多相關工具尚未有時間介紹，本篇所提及的介紹希望能對於部分開發者有幫助。\n若有不清楚或者會誤導讀者的方向，還請不吝指教。</p>',
fields:{slug:"/2016/09/13/babel-相關名詞簡介/"},frontmatter:{title:"babel 相關名詞簡介",date:"Sep 13, 2016",tags:["babel","es6","js"]}}}]}},pathContext:{tag:"js"}}}});
//# sourceMappingURL=path---tags-js-c2a9e1041eecfba22bf6.js.map