{
  "Asset": [
    { "_id": "source/CNAME", "path": "CNAME", "modified": false },
    { "_id": "source/favicon.ico", "path": "favicon.ico", "modified": false },
    {
      "_id": "themes/casper/source/css/normalize.css",
      "path": "css/normalize.css",
      "modified": false
    },
    {
      "_id": "themes/casper/source/css/screen.css",
      "path": "css/screen.css",
      "modified": false
    },
    {
      "_id": "themes/casper/source/fonts/icons.dev.svg",
      "path": "fonts/icons.dev.svg",
      "modified": false
    },
    {
      "_id": "themes/casper/source/fonts/icons.eot",
      "path": "fonts/icons.eot",
      "modified": false
    },
    {
      "_id": "themes/casper/source/fonts/icons.svg",
      "path": "fonts/icons.svg",
      "modified": false
    },
    {
      "_id": "themes/casper/source/fonts/icons.ttf",
      "path": "fonts/icons.ttf",
      "modified": false
    },
    {
      "_id": "themes/casper/source/fonts/icons.woff",
      "path": "fonts/icons.woff",
      "modified": false
    },
    {
      "_id": "themes/casper/source/img/kpman.jpg",
      "path": "img/kpman.jpg",
      "modified": false
    },
    {
      "_id": "themes/casper/source/js/index.js",
      "path": "js/index.js",
      "modified": false
    },
    {
      "_id": "themes/casper/source/js/jquery.fitvids.js",
      "path": "js/jquery.fitvids.js",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/images/icon-reorder@2x.png",
      "path": "images/icon-reorder@2x.png",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/js/script.js",
      "path": "js/script.js",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/css/style.styl",
      "path": "css/style.styl",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/css/fonts/FontAwesome.otf",
      "path": "css/fonts/FontAwesome.otf",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/css/fonts/fontawesome-webfont.eot",
      "path": "css/fonts/fontawesome-webfont.eot",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/css/fonts/fontawesome-webfont.svg",
      "path": "css/fonts/fontawesome-webfont.svg",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/css/fonts/fontawesome-webfont.ttf",
      "path": "css/fonts/fontawesome-webfont.ttf",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/css/fonts/fontawesome-webfont.woff",
      "path": "css/fonts/fontawesome-webfont.woff",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/blank.gif",
      "path": "fancybox/blank.gif",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/fancybox_loading.gif",
      "path": "fancybox/fancybox_loading.gif",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/fancybox_loading@2x.gif",
      "path": "fancybox/fancybox_loading@2x.gif",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/fancybox_overlay.png",
      "path": "fancybox/fancybox_overlay.png",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/fancybox_sprite.png",
      "path": "fancybox/fancybox_sprite.png",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/fancybox_sprite@2x.png",
      "path": "fancybox/fancybox_sprite@2x.png",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/jquery.fancybox.css",
      "path": "fancybox/jquery.fancybox.css",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/jquery.fancybox.js",
      "path": "fancybox/jquery.fancybox.js",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/jquery.fancybox.pack.js",
      "path": "fancybox/jquery.fancybox.pack.js",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/helpers/fancybox_buttons.png",
      "path": "fancybox/helpers/fancybox_buttons.png",
      "modified": false
    },
    {
      "_id":
        "themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.css",
      "path": "fancybox/helpers/jquery.fancybox-buttons.css",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.js",
      "path": "fancybox/helpers/jquery.fancybox-buttons.js",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/helpers/jquery.fancybox-media.js",
      "path": "fancybox/helpers/jquery.fancybox-media.js",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.css",
      "path": "fancybox/helpers/jquery.fancybox-thumbs.css",
      "modified": false
    },
    {
      "_id": "themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.js",
      "path": "fancybox/helpers/jquery.fancybox-thumbs.js",
      "modified": false
    }
  ],
  "Cache": [
    { "_id": "scaffolds/page.md", "mtime": 1496848435000 },
    { "_id": "scaffolds/photo.md", "mtime": 1496848435000 },
    { "_id": "scaffolds/post.md", "mtime": 1496848435000 },
    { "_id": "source/CNAME", "mtime": 1496848435000 },
    { "_id": "source/favicon.ico", "mtime": 1496848435000 },
    {
      "_id": "source/_drafts/css-background進階用法.md",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_drafts/這些你不知道的css-background用法.md",
      "mtime": 1496848435000
    },
    { "_id": "source/_posts/2013-jsdc所見聞.md", "mtime": 1496848435000 },
    { "_id": "source/_posts/ci初體驗for靜態頁面.md", "mtime": 1496848435000 },
    {
      "_id": "source/_posts/ec2利用tasksel架wordpress經驗分享.md",
      "mtime": 1496848435000
    },
    { "_id": "source/_posts/hexo架blog初體驗.md", "mtime": 1496848435000 },
    {
      "_id": "source/_posts/nginx-with-nodejs-in-different-port.md",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_posts/nginx-移除-html-附檔名.md",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_posts/sublime-text-2-實用套件.md",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_posts/sublime-text-2-實用技巧.md",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_posts/sublime-text-3-mac-指南.md",
      "mtime": 1496848435000
    },
    { "_id": "source/_posts/web好ui設計法則-1.md", "mtime": 1496848435000 },
    { "_id": "source/_posts/web好ui設計法則-2.md", "mtime": 1496848435000 },
    {
      "_id": "source/_posts/wordpress解決permalink固定網址問題.md",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_posts/利用-pseudo-element-讓-html-更簡潔.md",
      "mtime": 1496848435000
    },
    { "_id": "source/_posts/在hexo自訂rss.md", "mtime": 1496848435000 },
    {
      "_id": "source/_posts/客製化hexo-light-theme.md",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_posts/建立自己blog的subdomain.md",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_posts/建立自己的github-project-pages.md",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_posts/為你的mac終端機加上alias.md",
      "mtime": 1496848435000
    },
    { "_id": "themes/casper/LICENSE", "mtime": 1394991002000 },
    { "_id": "themes/casper/README.md", "mtime": 1394991002000 },
    { "_id": "themes/casper/_config.yml", "mtime": 1398222832000 },
    { "_id": "themes/casper/layout/archive.ejs", "mtime": 1394991002000 },
    { "_id": "themes/casper/layout/category.ejs", "mtime": 1394991002000 },
    { "_id": "themes/casper/layout/index.ejs", "mtime": 1394991002000 },
    { "_id": "themes/casper/layout/layout.ejs", "mtime": 1394991002000 },
    { "_id": "themes/casper/layout/page.ejs", "mtime": 1394991002000 },
    { "_id": "themes/casper/layout/post.ejs", "mtime": 1394991002000 },
    { "_id": "themes/casper/layout/tag.ejs", "mtime": 1394991002000 },
    {
      "_id": "themes/casper/layout/casper/after_all.ejs",
      "mtime": 1394991002000
    },
    { "_id": "themes/casper/layout/casper/footer.ejs", "mtime": 1394991002000 },
    { "_id": "themes/casper/layout/casper/head.ejs", "mtime": 1397480396000 },
    { "_id": "themes/casper/layout/casper/index.ejs", "mtime": 1394991002000 },
    { "_id": "themes/casper/layout/casper/post.ejs", "mtime": 1394991002000 },
    { "_id": "themes/casper/source/css/normalize.css", "mtime": 1394991002000 },
    { "_id": "themes/casper/source/css/screen.css", "mtime": 1394995297000 },
    {
      "_id": "themes/casper/source/fonts/icons.dev.svg",
      "mtime": 1394991002000
    },
    { "_id": "themes/casper/source/fonts/icons.eot", "mtime": 1394991002000 },
    { "_id": "themes/casper/source/fonts/icons.svg", "mtime": 1394991002000 },
    { "_id": "themes/casper/source/fonts/icons.ttf", "mtime": 1394991002000 },
    { "_id": "themes/casper/source/fonts/icons.woff", "mtime": 1394991002000 },
    { "_id": "themes/casper/source/img/kpman.jpg", "mtime": 1394720075000 },
    { "_id": "themes/casper/source/js/index.js", "mtime": 1394991002000 },
    {
      "_id": "themes/casper/source/js/jquery.fitvids.js",
      "mtime": 1394991002000
    },
    {
      "_id": "source/_posts/Sublime-與-iTerm-的視窗配置.md",
      "mtime": 1496848435000
    },
    { "_id": "themes/apollo/README.md", "mtime": 1496848435000 },
    { "_id": "themes/apollo/_config.yml", "mtime": 1496848435000 },
    { "_id": "themes/apollo/scripts/fancybox.js", "mtime": 1496848435000 },
    { "_id": "themes/apollo/layout/archive.ejs", "mtime": 1496848435000 },
    { "_id": "themes/apollo/layout/category.ejs", "mtime": 1496848435000 },
    { "_id": "themes/apollo/layout/index.ejs", "mtime": 1496848435000 },
    { "_id": "themes/apollo/layout/layout.ejs", "mtime": 1496848435000 },
    { "_id": "themes/apollo/layout/page.ejs", "mtime": 1496848435000 },
    { "_id": "themes/apollo/layout/post.ejs", "mtime": 1496848435000 },
    { "_id": "themes/apollo/layout/tag.ejs", "mtime": 1496848435000 },
    {
      "_id": "themes/apollo/layout/_partial/after-footer.ejs",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/layout/_partial/archive.ejs",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/layout/_partial/article.ejs",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/layout/_partial/footer.ejs",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/layout/_partial/google-analytics.ejs",
      "mtime": 1496848435000
    },
    { "_id": "themes/apollo/layout/_partial/head.ejs", "mtime": 1496848435000 },
    {
      "_id": "themes/apollo/layout/_partial/header.ejs",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/layout/_partial/post/category.ejs",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/layout/_partial/post/date.ejs",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/layout/_partial/post/gallery.ejs",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/layout/_partial/post/nav.ejs",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/layout/_partial/post/tag.ejs",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/layout/_partial/post/title.ejs",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/images/icon-reorder@2x.png",
      "mtime": 1496848435000
    },
    { "_id": "themes/apollo/source/js/script.js", "mtime": 1496848435000 },
    { "_id": "themes/apollo/source/css/style.styl", "mtime": 1496848435000 },
    {
      "_id": "themes/apollo/source/css/_bass/bass.styl",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/_bass/syntax.styl",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/_bass/variables.styl",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/_partial/archive.styl",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/_partial/article-gallery.styl",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/_partial/article-nav.styl",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/_partial/article.styl",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/_partial/footer.styl",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/_partial/header.styl",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/_partial/rwd.styl",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/fonts/FontAwesome.otf",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/fonts/fontawesome-webfont.eot",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/fonts/fontawesome-webfont.svg",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/fonts/fontawesome-webfont.ttf",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/css/fonts/fontawesome-webfont.woff",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/blank.gif",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/fancybox_loading.gif",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/fancybox_loading@2x.gif",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/fancybox_overlay.png",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/fancybox_sprite.png",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/fancybox_sprite@2x.png",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/jquery.fancybox.css",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/jquery.fancybox.js",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/jquery.fancybox.pack.js",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/helpers/fancybox_buttons.png",
      "mtime": 1496848435000
    },
    {
      "_id":
        "themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.css",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.js",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/helpers/jquery.fancybox-media.js",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.css",
      "mtime": 1496848435000
    },
    {
      "_id": "themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.js",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_posts/利用-crontab-來做-Linux-固定排程.md",
      "mtime": 1501344509000
    },
    {
      "_id": "themes/apollo/source/css/_partial/custom.styl",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_posts/Linux-之-command-line-上手.md",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_posts/從Pocket-儲存全文到Evernote.md",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_posts/從deploy-node-js-專案所學.md",
      "mtime": 1496848435000
    },
    { "_id": "source/_posts/在-slack-建立-hubot.md", "mtime": 1496848435000 },
    {
      "_id": "source/_posts/node-js-爬-Facebook-留言版.md",
      "mtime": 1496848435000
    },
    { "_id": "source/_posts/babel-相關名詞簡介.md", "mtime": 1496848435000 },
    { "_id": "source/_posts/JavaScript-變數宣告.md", "mtime": 1496848435000 },
    {
      "_id": "source/_posts/將-JS-Callback-變成-Promise.md",
      "mtime": 1496848435000
    },
    {
      "_id": "source/_posts/利用-Hub-來自動發-GitHub-PR.md",
      "mtime": 1499097346000
    }
  ],
  "Category": [],
  "Page": [],
  "Post": [
    {
      "title": "CI初體驗for靜態頁面",
      "date": 1396791035000,
      "tags": ["kp8bdb92efe0l2ri", "ro29hezdbjgnih8i"],
      "content":
        "<p>第一次因為專案需要，而跟PHP後端工程師配合，我們選定了<a href=\"http://www.codeigniter.org.tw/\" target=\"_blank\" rel=\"external\">CI</a>這套framework來使用，對於CI算是第一次接觸，因此想把從無到有的架設過程給記錄下來。</p>\n<p><img src=\"http://php.quicoto.com/wp-content/uploads/2013/07/codeigniter-logo.png\" alt=\"codeigniter\"></p>\n<a id=\"more\"></a>\n<h2 id=\"1、擁有php環境\">1、擁有php環境</h2>\n<p>Mac內建Apache，只要打開即可。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">sudo</span> apachectl start</div></pre></td></tr></table></figure>\n\n<h2 id=\"2、安裝CI\">2、安裝CI</h2>\n<ul>\n<li>到<a href=\"http://www.codeigniter.org.tw/user_guide/installation/downloads.html\" target=\"_blank\" rel=\"external\">官網</a>下載整份文件檔</li>\n<li>放進server的路徑下 <code>/Libary/WebServer/Documents/</code></li>\n<li>安裝完畢！</li>\n</ul>\n<h2 id=\"3、讀取靜態頁面\">3、讀取靜態頁面</h2>\n<h3 id=\"新增頁面\">新增頁面</h3>\n<p>此處新增名為page.php的檔案 <code>application -&gt; view -&gt; cep(optional dir) -&gt; page.php</code></p>\n<ul>\n<li><img src=\"http://i.imgur.com/gC7kgs2.png\" alt=\"page.php\"></li>\n</ul>\n<h3 id=\"新增static_files\">新增static files</h3>\n<p>如CSS、JS檔，習慣性會創建assets資料夾將他們放進去，並且放在跟application同階層的dir內，如圖。<br><img src=\"http://i.imgur.com/BLh0okD.png\" alt=\"assets\"></p>\n<h3 id=\"新增route\">新增route</h3>\n<p><code>application -&gt; config -&gt; routes.php</code> 新增如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$route</span>[<span class=\"string\">'(:any)'</span>] = <span class=\"string\">'cep/$1'</span>;</div><div class=\"line\"><span class=\"variable\">$route</span>[<span class=\"string\">'default_controller'</span>] = <span class=\"string\">\"cep\"</span>;</div><div class=\"line\"><span class=\"variable\">$route</span>[<span class=\"string\">'404_override'</span>] = <span class=\"string\">''</span>;</div></pre></td></tr></table></figure>\n\n<h3 id=\"新增controller\">新增controller</h3>\n<p>在controllers資料夾內，新增php檔，內定新的public function，參照welcome.php修改即可。</p>\n<p>新增一個class extends CI_Controller，裡面加上page()這個public function。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cep</span> <span class=\"keyword\">extends</span> <span class=\"title\">CI_Controller</span> </span>{</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span><span class=\"params\">()</span></span></div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"variable\">$this</span><span class=\"variable\">-&gt;load</span><span class=\"variable\">-&gt;view</span>(<span class=\"string\">'cep/index'</span>);</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">page</span><span class=\"params\">()</span></span></div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"variable\">$this</span><span class=\"variable\">-&gt;load</span><span class=\"variable\">-&gt;view</span>(<span class=\"string\">'cep/page'</span>);</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h3 id=\"路徑修改\">路徑修改</h3>\n<ul>\n<li>application -&gt; config -&gt; config.php 改一行 <code>$config[&#39;base_url&#39;]  = &#39;/專案資料夾名字/&#39;;</code></li>\n<li>application -&gt; config -&gt; autoload.php 改一行 <code>$autoload[&#39;helper&#39;] = array(&#39;url&#39;);</code> 原本是沒有url，加上url。</li>\n<li>page.php這頁的CSS和JS檔，修改成</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"stylesheet\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"&lt;?php echo base_url(); ?&gt;assets/css/bootstrap.min.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"stylesheet\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"&lt;?php echo base_url(); ?&gt;assets/css/main.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"&lt;?php echo base_url(); ?&gt;assets/js/vendor/modernizr-2.6.2.min.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>如此一來便可以在<code>http://localhost/專案資料夾/index.php/page</code> 看到靜態頁面了。</p>\n<h2 id=\"4、移除CI_URL上的index-php\">4、移除CI URL上的index.php</h2>\n<p>因為每次網址上面都需要有index.php，覺得不好看，因此兩個步驟把它改掉。</p>\n<ol>\n<li>在root加上<code>.htaccess</code>檔，內容如下</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\"><span class=\"common\">RewriteEngine</span></span> <span class=\"literal\">on</span></div><div class=\"line\"><span class=\"keyword\"><span class=\"common\">RewriteCond</span></span> <span class=\"number\">$1</span> !^(index\\.php)</div><div class=\"line\"><span class=\"keyword\"><span class=\"common\">RewriteCond</span></span> <span class=\"cbracket\">%{REQUEST_FILENAME}</span> !-f</div><div class=\"line\"><span class=\"keyword\"><span class=\"common\">RewriteCond</span></span> <span class=\"cbracket\">%{REQUEST_FILENAME}</span> !-d</div><div class=\"line\"><span class=\"keyword\"><span class=\"common\">RewriteRule</span></span> ^(.*)$ index.php/<span class=\"number\">$1</span><span class=\"sqbracket\"> [L,QSA]</span></div></pre></td></tr></table></figure>\n\n<ol>\n<li>修改apache設定，將httpd.conf改掉。<br>原本AllowOverride none改成All即可。</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">Directory</span> /Library/WebServer/Documents&gt;</div><div class=\"line\">    <span class=\"keyword\">Options</span> FollowSymLinks</div><div class=\"line\">    AllowOverride <span class=\"keyword\">All</span></div><div class=\"line\">&lt;/<span class=\"keyword\">Directory</span>&gt;</div></pre></td></tr></table></figure>\n\n<ol>\n<li>重新啟動apache <code>sudo apachectl restart</code></li>\n</ol>\n<p><em>後記</em></p>\n<p>因尚有其他專案，故本專案檔是全部在一個資料夾內，非直接在web server的root實作。</p>\n",
      "source": "_posts/ci初體驗for靜態頁面.md",
      "raw":
        "title: CI初體驗for靜態頁面\ndate: 2014-04-06 21:30:35\ntags:\n- PHP\n- CI\n---\n\n第一次因為專案需要，而跟PHP後端工程師配合，我們選定了[CI](http://www.codeigniter.org.tw/)這套framework來使用，對於CI算是第一次接觸，因此想把從無到有的架設過程給記錄下來。\n\n![codeigniter](http://php.quicoto.com/wp-content/uploads/2013/07/codeigniter-logo.png)\n\n<!-- more -->\n\n## 1、擁有php環境\n\nMac內建Apache，只要打開即可。\n\n```\nsudo apachectl start\n```\n\n## 2、安裝CI\n\n* 到[官網](http://www.codeigniter.org.tw/user_guide/installation/downloads.html)下載整份文件檔\n* 放進server的路徑下 `/Libary/WebServer/Documents/`\n* 安裝完畢！\n\n## 3、讀取靜態頁面\n\n### 新增頁面\n\n此處新增名為page.php的檔案 `application -> view -> cep(optional dir) -> page.php`\n* ![page.php](http://i.imgur.com/gC7kgs2.png)\n\n### 新增static files\n\n如CSS、JS檔，習慣性會創建assets資料夾將他們放進去，並且放在跟application同階層的dir內，如圖。\n![assets](http://i.imgur.com/BLh0okD.png)\n\n### 新增route\n\n`application -> config -> routes.php` 新增如下：\n```\n$route['(:any)'] = 'cep/$1';\n$route['default_controller'] = \"cep\";\n$route['404_override'] = '';\n```\n\n### 新增controller\n\n在controllers資料夾內，新增php檔，內定新的public function，參照welcome.php修改即可。\n\n新增一個class extends CI_Controller，裡面加上page()這個public function。\n```\nclass Cep extends CI_Controller {\n\n    public function index()\n    {\n        $this->load->view('cep/index');\n    }\n\n    public function page()\n    {\n        $this->load->view('cep/page');\n    }\n\n}\n```\n\n### 路徑修改\n\n* application -> config -> config.php 改一行 `$config['base_url']  = '/專案資料夾名字/';`\n* application -> config -> autoload.php 改一行 `$autoload['helper'] = array('url');` 原本是沒有url，加上url。\n* page.php這頁的CSS和JS檔，修改成\n```\n<link rel=\"stylesheet\" href=\"<?php echo base_url(); ?>assets/css/bootstrap.min.css\">\n<link rel=\"stylesheet\" href=\"<?php echo base_url(); ?>assets/css/main.css\">\n<script src=\"<?php echo base_url(); ?>assets/js/vendor/modernizr-2.6.2.min.js\"></script>\n```\n\n如此一來便可以在`http://localhost/專案資料夾/index.php/page` 看到靜態頁面了。\n\n## 4、移除CI URL上的index.php\n\n因為每次網址上面都需要有index.php，覺得不好看，因此兩個步驟把它改掉。\n\n1. 在root加上`.htaccess`檔，內容如下\n```\nRewriteEngine on\nRewriteCond $1 !^(index\\.php)\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ index.php/$1 [L,QSA]\n```\n2. 修改apache設定，將httpd.conf改掉。\n原本AllowOverride none改成All即可。\n```\n<Directory /Library/WebServer/Documents>\n    Options FollowSymLinks\n    AllowOverride All\n</Directory>\n```\n3. 重新啟動apache `sudo apachectl restart`\n\n*後記*\n\n因尚有其他專案，故本專案檔是全部在一個資料夾內，非直接在web server的root實作。\n\n\n\n\n\n\n\n\n\n",
      "slug": "ci初體驗for靜態頁面",
      "updated": 1496848435000,
      "excerpt":
        "<p>第一次因為專案需要，而跟PHP後端工程師配合，我們選定了<a href=\"http://www.codeigniter.org.tw/\" target=\"_blank\" rel=\"external\">CI</a>這套framework來使用，對於CI算是第一次接觸，因此想把從無到有的架設過程給記錄下來。</p>\n<p><img src=\"http://php.quicoto.com/wp-content/uploads/2013/07/codeigniter-logo.png\" alt=\"codeigniter\"></p>\n",
      "_id": "0kbfjidkmj4fj5t3",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "2013 JSDC所見聞",
      "date": 1369018639000,
      "tags": ["7ak98nng6pugpx1b", "lb9ysu4zbhwbmj88", "j3x2e81xp73a9yq8"],
      "content":
        "<p><img src=\"http://i.imgur.com/02RzVQA.png\" alt=\"JSDC\"></p>\n<p>這是第二屆的JSDC，由TonyQ及三大社群舉辦的聚會，非常幸運的我能順利的利用社群票的機制搶到票，在眾多非常有經驗的強者面前，聽完他們的分享，越感覺自己對於網頁開發充滿了熱情！</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>『我們不叫前端工程師，以後請叫我們<em>前端設計師</em>！』</p>\n</blockquote>\n<p>這是聽完今年的JSDC感覺最有趣的一句話了。這句話帶出了他們的幽默風趣，在Web Develope這一個圈子，能結合設計還有程式的，就是前端工程師，也就是所謂的F2E。</p>\n<p>雖然對於網頁開發我自己算是沒有什麼經驗，要談設計我也沒有什麼基礎知識，但我知道這條路是我喜歡的，我會繼續走下去。給自己的目標是十年，我希望十年後我能跟現在我敬佩的前輩們一起討論，一起努力。</p>\n<h2 id=\"議程記錄＆見聞\">議程記錄＆見聞</h2>\n<h3 id=\"Day1\">Day1</h3>\n<ul>\n<li><p>【AWS】介紹了他們的服務現在已經針對node.js有放出SDK - 有用過的人歡迎一起分享討論。</p>\n</li>\n<li><p>【<a href=\"http://www.slideshare.net/WillHuangTW/java-script-jsdc2013\" target=\"_blank\" rel=\"external\">保哥</a>】介紹了他的開發經驗，針對code要怎樣去調教，他說了一句話讓我印象深刻：</p>\n</li>\n</ul>\n<blockquote>\n<p>通常你的網站會慢，第一個要查的就是你自己所寫的code，不是你套用的那些framework。</p>\n</blockquote>\n<p>保哥也推薦利用<a href=\"jsperf.com\">jsperf.com</a>去測試自己的code，雖然執行上面的效果一模一樣，有可能只差一個<code>new</code>效率就差了200倍之多。</p>\n<ul>\n<li>【<a href=\"https://speakerdeck.com/linyiru/ai-liao-li-wang-zhan-qian-duan-kai-fa-jing-yan-tan\" target=\"_blank\" rel=\"external\">Lawrence</a>】同樣待過資種的Lawrence學長介紹了愛料理的開發，主要是一些用過的套件還有經驗談，舉凡Bootstrap、Font Awesome、template利用Handlebars去完成等。利用Crazyegg、GA去分析，也談到了RWD的問題。最後三句話，始終在腦海中揮之不去。</li>\n</ul>\n<blockquote>\n<p>在技術上有卓越表現，是工程師的浪漫。<br>在設計上有卓越表現，是設計師的浪漫。<br>在產品上有卓越表現，是企劃與PM的浪漫。</p>\n</blockquote>\n<ul>\n<li><p>【<a href=\"https://speakerdeck.com/evenwu/ru-he-jiao-she-ji-shi-qian-duan-ji-shu\" target=\"_blank\" rel=\"external\">Even Wu</a>】Even介紹到了如何教前端技術，投影片的風格太有趣XD聊到了教設計師寫code其實要讓他們自動自發的學習，也是一個最重要的觀念：激勵。這個議程談的不是技術，而是一種經驗和體悟。<br>最後剩下的時間，大家交流的問題也很有趣。就有某設計師提到：他原本是設計師，但他每次提出的效果，前端工程師都跟他說這做不出來，他為了證明做的到，便開始自動自發的學習寫code，來向前端工程師證明。   </p>\n</li>\n<li><p>【<a href=\"https://speakerdeck.com/wallat/gong-cheng-shi-tao-sheng-huo-gong-ju-jie-shao-zuo-geng-kuai-dian\" target=\"_blank\" rel=\"external\">up chen</a>】介紹了很多實用的工具，但可能我自己本身就是一個很偷懶的人，（偷懶的人都會想要去找一些好用的工具讓自己做事更快）所以覺得這一個議程沒有得到很多新知。<br>但像是sublime text 的column selection便是之前沒有在使用，但是覺得對自己很方便的技巧:)</p>\n</li>\n<li><p>【Rex Huang】這個主題很酷，在瀏覽器上面建立一個os，而且執行起來很順，重點是利用js去打造的，同時也是大會的贊助商，未來應該很有發展，但是對於現階段的我來說比較艱深，所以就沒有很仔細的記錄筆記。</p>\n</li>\n<li><p>【KKBOX】kkbox來談談利用node.js開發的心得。介紹了一些node的用法還有經驗，但這種議程最難過的就是自己對於node.js接觸還沒有很深，所以聽起來會有點懵懵懂懂，印象最深刻的就是這句話：</p>\n</li>\n</ul>\n<blockquote>\n<p>利用JavaScript去寫後台聽起來很酷，但做起來會想要哭。</p>\n</blockquote>\n<ul>\n<li>【Ruben Tan】是一個聲音很好聽的英文場議程。講者提到了flow control問題，要避免寫太多call back才是，single thread一直是node.js開發的問題。</li>\n</ul>\n<h3 id=\"Day_2\">Day 2</h3>\n<p><img src=\"http://i.imgur.com/8N7fGlU.png\" alt=\"picture from Josephj\" title=\"F2E is Keystone\"></p>\n<ul>\n<li>【<a href=\"https://speakerdeck.com/josephj/f2e-the-keystone\" target=\"_blank\" rel=\"external\">Josephj(啊嗚)</a>】早在JSDC開始前，就在網路上得知該前輩維護的<a href=\"http://f2eclass.com\" target=\"_blank\" rel=\"external\">資源</a>，對於網頁開發，他待過yahoo!，從IE4開始就寫前台了！投影片上面也列出好幾位很值得學習的前輩，真是看的我心花怒放XD<br>前端魂，是身為前端工程師（設計師？）應該有的精神！</li>\n</ul>\n<blockquote>\n<p>前端，你的名字叫熱血</p>\n</blockquote>\n<p>前輩也提到，技術不是重點，態度才是，避免盲目的追求技術，好的前端不等於知道很多技術。積極分享、多回饋，這點我真的在Josephj身上看到，從他架設的f2eclass就可以知道他願意分享的態度。</p>\n<ul>\n<li><p>【<a href=\"http://jsdc.york.tw:3939/\" target=\"_blank\" rel=\"external\">york</a>】這是一場非常酷的live demo，台上講者的投影片，透過連線到jsdc.york.tw可以即時的在自己電腦切換，且下方就demo了socket.io的實作。雖然自己還沒有接觸到這一塊，但知道socket.io是利用websocket去做，在沒有實作websocket的瀏覽器，會切換別的通道，讓他們也可以work，所以支援的瀏覽器很廣。</p>\n</li>\n<li><p>【<a href=\"https://speakerdeck.com/jaceju/understanding-the-mvc-mvp-mvvm-in-javascript\" target=\"_blank\" rel=\"external\">大澤木小鐵</a>】小鐵與我們分享了在JavaScript上面實作MVC、MVP、MVVM（簡稱MV*）的心法，這場我聽的津津有味！利用圖解的方式搭配很多時事梗XD重點是讓沒什麼經驗的我也可以略懂，相信未來在開發JS的時候，會再想到這一份投影片。</p>\n</li>\n<li><p>【<a href=\"https://speakerdeck.com/othree/this\" target=\"_blank\" rel=\"external\">othree</a>】othree和我們分享了this的用法。在不同情況呼叫this的時候，他針對的function以及目標會不同。然而我覺得這對我來說也還是太深了XD 開發的經驗還是不太足夠，但這一個主題應該是很多有經驗的前輩們都想要討論的問題，期待自己能好好的加強自己，等到我也遇到this的問題，我相信我又更加進步了。</p>\n</li>\n<li><p>【<a href=\"http://www.slideshare.net/lis186/20130519-sketching-with-codejsdc2013\" target=\"_blank\" rel=\"external\">阿修(Justin Lee)</a>】阿修介紹到了在與設計溝通的時候，其實為了記錄當下討論的結果，利用inline把效果寫進html最快，等到往後要維護的時候，工程師在自己去maintain，著實讓我上了一課。阿修也示範了一套很酷的Titanium，可以即時的在web編輯app程式，然後利用手機即時連線，為了加速效果，也利用了<a href=\"https://github.com/dbankier/TiShadow\" target=\"_blank\" rel=\"external\">Tishaow</a>去built，存檔的同時就可以即時看到，效率非常高。</p>\n</li>\n<li><p>【Mozilla】介紹了利用Emscripten去把不同的語言編譯成JavaScript，可以在瀏覽器上面運行這樣。</p>\n</li>\n<li><p>【<a href=\"http://www.slideshare.net/nowill/rwd-21436569\" target=\"_blank\" rel=\"external\">Nowill</a>】Nowill介紹了RWD的一些想法，她是一個非常有經驗的前輩，參與很多專案，與很多公司有很多合作經驗。她說了，RWD不是口頭上說說就是用media query就可以解決的，還有很多技巧是要自己真的去做過才會知道的。提到了五大秘訣：掌握解析度、流動式布局、使用者經驗、體驗操作、推敲思考。且她也提到，不是每一個網站都適合作RWD，因為在需要圖片解析度，文字閱讀的網站，應該針對不同的case去做因應。</p>\n</li>\n</ul>\n<h2 id=\"心得\">心得</h2>\n<p>參與了本次的JSDC，我體會到了那些專注於在一件事情上面的美好，那種熱忱，都是在這些前輩們上面可以看到。前端工程師要做的事情，會一點設計，會知道要怎樣寫程式，其實就是將這世界上美的事物，利用web的方式讓大家看的見。<br>我相信分享是這世界上最美好的事情，聽到許多前輩的分享，我自己會有一種想要讓自己變很強的衝動，但有時候會忘記那些最單純的人際關係。在周遭一些朋友身上，我看見了他們很強，很厲害，讓我打從心底佩服；但不知道為什麼，對於他們我會有一種不太想向他們請教的感覺，或許是他們平時透露出來的訊息吧，讓我感覺不是那麼好。<br>我認為交流是一件很愉悅的事情，可以讓彼此在短時間就可以學習到很多，因此我很樂意分享，把自己知道不多但覺得實用的東西給記錄下來，期許大家可以開心的交流，開心的分享，而並非是那種『我知道這個很好用，但你沒有問，你沒有一起來討論，所以我不想告訴你。』提醒自己，要當一個樂意分享的人，在前端開發這一塊，我又重新充滿電了！</p>\n<blockquote>\n<p>在變強之前，我想要先變好:)</p>\n</blockquote>\n<h3 id=\"reference\"><em>reference</em></h3>\n<ul>\n<li><a href=\"http://hackfoldr.org/#/jsdctw2013/1xcPi6UutDHCKjgoYH4yUJxQ_728E2VO3og1e3Eq0OtE\" target=\"_blank\" rel=\"external\">JSDC懶人包</a></li>\n<li><a href=\"https://docs.google.com/spreadsheet/ccc?key=0AqMUl4JFkRfldEVuNDBkNUNsSlZEbDBFXzYzdTloUkE#gid=0\" target=\"_blank\" rel=\"external\">JSDC議程 slide整理</a> - 這份很完整</li>\n<li><a href=\"http://f2eclass.com\" target=\"_blank\" rel=\"external\">f2eclass</a></li>\n<li><a href=\"http://blog.darkthread.net/\" target=\"_blank\" rel=\"external\">黑暗執行緒</a></li>\n<li><a href=\"http://blog.wu-boy.com/\" target=\"_blank\" rel=\"external\">小惡魔 apple boy</a></li>\n</ul>\n",
      "source": "_posts/2013-jsdc所見聞.md",
      "raw":
        "title: 2013 JSDC所見聞\ndate: 2013-05-20 10:57:19\ntags:\n- JSDC\n- code\n- F2E\n---\n\n![JSDC](http://i.imgur.com/02RzVQA.png)\n\n這是第二屆的JSDC，由TonyQ及三大社群舉辦的聚會，非常幸運的我能順利的利用社群票的機制搶到票，在眾多非常有經驗的強者面前，聽完他們的分享，越感覺自己對於網頁開發充滿了熱情！\n\n<!-- more -->\n\n>『我們不叫前端工程師，以後請叫我們*前端設計師*！』\n\n這是聽完今年的JSDC感覺最有趣的一句話了。這句話帶出了他們的幽默風趣，在Web Develope這一個圈子，能結合設計還有程式的，就是前端工程師，也就是所謂的F2E。\n\n雖然對於網頁開發我自己算是沒有什麼經驗，要談設計我也沒有什麼基礎知識，但我知道這條路是我喜歡的，我會繼續走下去。給自己的目標是十年，我希望十年後我能跟現在我敬佩的前輩們一起討論，一起努力。\n\n## 議程記錄＆見聞\n\n### Day1 \n\n* 【AWS】介紹了他們的服務現在已經針對node.js有放出SDK - 有用過的人歡迎一起分享討論。\n\n* 【[保哥](http://www.slideshare.net/WillHuangTW/java-script-jsdc2013)】介紹了他的開發經驗，針對code要怎樣去調教，他說了一句話讓我印象深刻：\n\n> 通常你的網站會慢，第一個要查的就是你自己所寫的code，不是你套用的那些framework。\n\n保哥也推薦利用[jsperf.com](jsperf.com)去測試自己的code，雖然執行上面的效果一模一樣，有可能只差一個`new`效率就差了200倍之多。\n\n* 【[Lawrence](https://speakerdeck.com/linyiru/ai-liao-li-wang-zhan-qian-duan-kai-fa-jing-yan-tan)】同樣待過資種的Lawrence學長介紹了愛料理的開發，主要是一些用過的套件還有經驗談，舉凡Bootstrap、Font Awesome、template利用Handlebars去完成等。利用Crazyegg、GA去分析，也談到了RWD的問題。最後三句話，始終在腦海中揮之不去。\n\n> 在技術上有卓越表現，是工程師的浪漫。   \n> 在設計上有卓越表現，是設計師的浪漫。   \n> 在產品上有卓越表現，是企劃與PM的浪漫。\n\n* 【[Even Wu](https://speakerdeck.com/evenwu/ru-he-jiao-she-ji-shi-qian-duan-ji-shu)】Even介紹到了如何教前端技術，投影片的風格太有趣XD聊到了教設計師寫code其實要讓他們自動自發的學習，也是一個最重要的觀念：激勵。這個議程談的不是技術，而是一種經驗和體悟。   \n最後剩下的時間，大家交流的問題也很有趣。就有某設計師提到：他原本是設計師，但他每次提出的效果，前端工程師都跟他說這做不出來，他為了證明做的到，便開始自動自發的學習寫code，來向前端工程師證明。   \n\n* 【[up chen](https://speakerdeck.com/wallat/gong-cheng-shi-tao-sheng-huo-gong-ju-jie-shao-zuo-geng-kuai-dian)】介紹了很多實用的工具，但可能我自己本身就是一個很偷懶的人，（偷懶的人都會想要去找一些好用的工具讓自己做事更快）所以覺得這一個議程沒有得到很多新知。   \n但像是sublime text 的column selection便是之前沒有在使用，但是覺得對自己很方便的技巧:)\n\n* 【Rex Huang】這個主題很酷，在瀏覽器上面建立一個os，而且執行起來很順，重點是利用js去打造的，同時也是大會的贊助商，未來應該很有發展，但是對於現階段的我來說比較艱深，所以就沒有很仔細的記錄筆記。\n\n* 【KKBOX】kkbox來談談利用node.js開發的心得。介紹了一些node的用法還有經驗，但這種議程最難過的就是自己對於node.js接觸還沒有很深，所以聽起來會有點懵懵懂懂，印象最深刻的就是這句話：\n\n> 利用JavaScript去寫後台聽起來很酷，但做起來會想要哭。\n\n* 【Ruben Tan】是一個聲音很好聽的英文場議程。講者提到了flow control問題，要避免寫太多call back才是，single thread一直是node.js開發的問題。\n\n### Day 2\n\n![picture from Josephj](http://i.imgur.com/8N7fGlU.png \"F2E is Keystone\")\n\n* 【[Josephj(啊嗚)](https://speakerdeck.com/josephj/f2e-the-keystone)】早在JSDC開始前，就在網路上得知該前輩維護的[資源](http://f2eclass.com)，對於網頁開發，他待過yahoo!，從IE4開始就寫前台了！投影片上面也列出好幾位很值得學習的前輩，真是看的我心花怒放XD   \n前端魂，是身為前端工程師（設計師？）應該有的精神！\n\n> 前端，你的名字叫熱血\n\n前輩也提到，技術不是重點，態度才是，避免盲目的追求技術，好的前端不等於知道很多技術。積極分享、多回饋，這點我真的在Josephj身上看到，從他架設的f2eclass就可以知道他願意分享的態度。\n\n* 【[york](http://jsdc.york.tw:3939/)】這是一場非常酷的live demo，台上講者的投影片，透過連線到jsdc.york.tw可以即時的在自己電腦切換，且下方就demo了socket.io的實作。雖然自己還沒有接觸到這一塊，但知道socket.io是利用websocket去做，在沒有實作websocket的瀏覽器，會切換別的通道，讓他們也可以work，所以支援的瀏覽器很廣。\n\n* 【[大澤木小鐵](https://speakerdeck.com/jaceju/understanding-the-mvc-mvp-mvvm-in-javascript)】小鐵與我們分享了在JavaScript上面實作MVC、MVP、MVVM（簡稱MV*）的心法，這場我聽的津津有味！利用圖解的方式搭配很多時事梗XD重點是讓沒什麼經驗的我也可以略懂，相信未來在開發JS的時候，會再想到這一份投影片。\n\n* 【[othree](https://speakerdeck.com/othree/this)】othree和我們分享了this的用法。在不同情況呼叫this的時候，他針對的function以及目標會不同。然而我覺得這對我來說也還是太深了XD 開發的經驗還是不太足夠，但這一個主題應該是很多有經驗的前輩們都想要討論的問題，期待自己能好好的加強自己，等到我也遇到this的問題，我相信我又更加進步了。\n\n* 【[阿修(Justin Lee)](http://www.slideshare.net/lis186/20130519-sketching-with-codejsdc2013)】阿修介紹到了在與設計溝通的時候，其實為了記錄當下討論的結果，利用inline把效果寫進html最快，等到往後要維護的時候，工程師在自己去maintain，著實讓我上了一課。阿修也示範了一套很酷的Titanium，可以即時的在web編輯app程式，然後利用手機即時連線，為了加速效果，也利用了[Tishaow](https://github.com/dbankier/TiShadow)去built，存檔的同時就可以即時看到，效率非常高。\n\n* 【Mozilla】介紹了利用Emscripten去把不同的語言編譯成JavaScript，可以在瀏覽器上面運行這樣。\n\n* 【[Nowill](http://www.slideshare.net/nowill/rwd-21436569)】Nowill介紹了RWD的一些想法，她是一個非常有經驗的前輩，參與很多專案，與很多公司有很多合作經驗。她說了，RWD不是口頭上說說就是用media query就可以解決的，還有很多技巧是要自己真的去做過才會知道的。提到了五大秘訣：掌握解析度、流動式布局、使用者經驗、體驗操作、推敲思考。且她也提到，不是每一個網站都適合作RWD，因為在需要圖片解析度，文字閱讀的網站，應該針對不同的case去做因應。\n\n## 心得\n\n參與了本次的JSDC，我體會到了那些專注於在一件事情上面的美好，那種熱忱，都是在這些前輩們上面可以看到。前端工程師要做的事情，會一點設計，會知道要怎樣寫程式，其實就是將這世界上美的事物，利用web的方式讓大家看的見。  \n我相信分享是這世界上最美好的事情，聽到許多前輩的分享，我自己會有一種想要讓自己變很強的衝動，但有時候會忘記那些最單純的人際關係。在周遭一些朋友身上，我看見了他們很強，很厲害，讓我打從心底佩服；但不知道為什麼，對於他們我會有一種不太想向他們請教的感覺，或許是他們平時透露出來的訊息吧，讓我感覺不是那麼好。   \n我認為交流是一件很愉悅的事情，可以讓彼此在短時間就可以學習到很多，因此我很樂意分享，把自己知道不多但覺得實用的東西給記錄下來，期許大家可以開心的交流，開心的分享，而並非是那種『我知道這個很好用，但你沒有問，你沒有一起來討論，所以我不想告訴你。』提醒自己，要當一個樂意分享的人，在前端開發這一塊，我又重新充滿電了！\n\n> 在變強之前，我想要先變好:)\n\n### *reference*\n\n* [JSDC懶人包](http://hackfoldr.org/#/jsdctw2013/1xcPi6UutDHCKjgoYH4yUJxQ_728E2VO3og1e3Eq0OtE)\n* [JSDC議程 slide整理](https://docs.google.com/spreadsheet/ccc?key=0AqMUl4JFkRfldEVuNDBkNUNsSlZEbDBFXzYzdTloUkE#gid=0) - 這份很完整\n* [f2eclass](http://f2eclass.com)\n* [黑暗執行緒](http://blog.darkthread.net/)\n* [小惡魔 apple boy](http://blog.wu-boy.com/)\n",
      "slug": "2013-jsdc所見聞",
      "updated": 1496848435000,
      "excerpt":
        "<p><img src=\"http://i.imgur.com/02RzVQA.png\" alt=\"JSDC\"></p>\n<p>這是第二屆的JSDC，由TonyQ及三大社群舉辦的聚會，非常幸運的我能順利的利用社群票的機制搶到票，在眾多非常有經驗的強者面前，聽完他們的分享，越感覺自己對於網頁開發充滿了熱情！</p>\n",
      "_id": "bkxt3939odqiznbp",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "EC2利用tasksel架wordpress經驗分享",
      "date": 1377022624000,
      "tags": [
        "g31nbiu89od31e6w",
        "vuv8oxmk59z624cy",
        "x7q3jmjvnhj51jif",
        "uma6ez8q1uju8y6c",
        "450ai4lt8kslgtba",
        "521wzo1ebycqm2lh"
      ],
      "content":
        "<p>看了這麼久的雲端資源，總算開了算是自己真正學到東西的第一台Amazon EC2 server，目的是想要練習把wordpress架到EC2上，在此分享我的架設經驗。</p>\n<p><img src=\"http://blog.programmableweb.com/wp-content/amazon-web-services1.png\" alt=\"Amazon web service\"></p>\n<a id=\"more\"></a>\n<h2 id=\"一、擁有AWS帳號\">一、擁有AWS帳號</h2>\n<p>關於開啟AWS的過程，實際走過一遍之後，阿正老師的<a href=\"http://blog.soft.idv.tw/?p=823&amp;page=2\" target=\"_blank\" rel=\"external\">這篇</a>，其內寫的不錯，推薦跟著走一遍，就會了解很多。</p>\n<h2 id=\"二、開啟自己的instance\">二、開啟自己的instance</h2>\n<p>在實際走過後，會發現阿正老師<a href=\"http://blog.soft.idv.tw/?p=824\" target=\"_blank\" rel=\"external\">這篇</a>真的超用心，因此接下來主要會利用這篇，再加上些我的補充。</p>\n<ul>\n<li>instance地理位置</li>\n</ul>\n<p>提到將主機開的位置，現在已經有tokyo的據點，離台灣更近，所以建議將instance位置設在tokyo</p>\n<blockquote>\n<p>建議將instance位置設在tokyo</p>\n</blockquote>\n<ul>\n<li>instance選擇方案</li>\n</ul>\n<p><img src=\"http://i.imgur.com/U4rs7wk.png\" alt=\"EC2 ubuntu server for free\"></p>\n<p>利用VISA卡，選擇免費方案（圖中有星星的都是免費方案），在這邊我選擇ubuntu來做為我的系統。</p>\n<ul>\n<li>key pair創建＆下載</li>\n</ul>\n<p>在阿正老師的文章內看到關於key pair介紹，很重要，一定要記住要把下載下來的pem給管理好，未來是需要利用它來做ssh登入主機。</p>\n<blockquote>\n<p>.pem檔需要存好，一台主機配對一個key pair，且不能做更改，</p>\n</blockquote>\n<h2 id=\"三、設定Security_Group\">三、設定Security Group</h2>\n<p>在沒有設定security group的時候，新開的instance可能是鎖起來的，會有SSH連線上的問題。</p>\n<ol>\n<li>進入console.aws.amazon.com</li>\n<li>左方導覽列選擇security group</li>\n<li>選擇instance後，下方的tab選取<code>Inbound</code></li>\n<li>分別加入<code>SSH</code>&amp;<code>HTTP</code>，Source部分都維持0.0.0.0/0即可，加入後記得要按<code>Apply Rule Change</code>才生效</li>\n</ol>\n<blockquote>\n<p>記得開啟SSH(20)、HTTP(80)</p>\n</blockquote>\n<h2 id=\"四、申請Elastic_IP\">四、申請Elastic IP</h2>\n<p>每一個instance都應該要綁定一個elastice ip，未來可以作為連線使用。</p>\n<ol>\n<li>同上，進入console.aws.amazon.com</li>\n<li>選擇Elastic IPs</li>\n<li>選擇Allocate New Address</li>\n<li>申請完之後記得要associate到你的instance </li>\n</ol>\n<blockquote>\n<p>申請完elastic ip後，原本的Public domain前半部分會改變為新的ip</p>\n</blockquote>\n<p><strong><em>* 其實我在實作時，是先做了SSH連線，後來在去申請elastic ip，結果associate完後，我又要ssh連線，發現沒有辦法登入，之後才瞭解是做了elastic ip後，連線的ip也需要一並跟著改變。</em></strong></p>\n<h2 id=\"五、SSH連線進入自己的instance\">五、SSH連線進入自己的instance</h2>\n<ol>\n<li>打開終端機（推薦iterm）</li>\n<li><code>chmod 600 ~/.pem</code><br>要記得把.pem檔改權限，不然會登不進去</li>\n<li>ssh連線使用以下command line<br><code>ssh -i ~/.pem ubuntu@ip</code><ul>\n<li><code>~/.pem</code>是此instance的key pair .pem檔的路徑</li>\n<li><code>ubuntu</code>是因為我用ubuntu當做OS，如果當初選擇Amazon linux的話，則需要輸入<code>ec2-user</code>取代ubuntu</li>\n<li><code>ip</code>則為instance的ip，進到console，左側選instance，拉到底下看見<br><code>Public DNS: ec2-xx-xxx-xxx-xx.ap-northeast-1.compute.amazonaws.com</code><br>則xx-xxx-xxx-xx改成<code>xx.xxx.xxx.xx</code>即為你的連線ip</li>\n</ul>\n</li>\n<li>連線成功會看到<code>ubuntu@ip-xxx-xxx-xxx-xxx:~$</code>字眼！那就恭喜了！</li>\n</ol>\n<blockquote>\n<p>pem檔的權限要更改為600</p>\n</blockquote>\n<h2 id=\"六、環境設定\">六、環境設定</h2>\n<p>剛進到instance，記得將環境設定一下</p>\n<ol>\n<li><code>sudo apt-get update</code> + <code>sudo apt-get upgrade</code></li>\n<li>如果覺得一直sudo很麻煩，可以利用<code>sudo su</code>取得root權限</li>\n</ol>\n<hr>\n<h3 id=\"#_安裝tasksel\"># 安裝tasksel</h3>\n<ol>\n<li>是ubuntu底下的lamp懶人包</li>\n<li>推薦<a href=\"http://howtounix.info/howto/LAMP-on-Ubuntu-with-tasksel-tool\" target=\"_blank\" rel=\"external\">教學文</a></li>\n<li>開始安裝taskel   <code>sudo apt-get install tasksel</code></li>\n<li>安裝lamp-server   <code>sudo tasksel install lamp-server</code></li>\n</ol>\n<h3 id=\"#_安裝phpmyadmin\"># 安裝phpmyadmin</h3>\n<ol>\n<li><code>sudo apt-get install phpmyadmin</code></li>\n<li><a href=\"http://linadonis.pixnet.net/blog/post/27585552-ubuntu-server-%E5%AE%89%E8%A3%9D-phpmyadmin\" target=\"_blank\" rel=\"external\">reference</a></li>\n</ol>\n<h3 id=\"#_安裝wordpress\"># 安裝wordpress</h3>\n<p><img src=\"http://wow-wp.org/wp-content/uploads/2011/10/wordpress.png\" alt=\"wordpress\"></p>\n<ol>\n<li><a href=\"https://www.digitalocean.com/community/articles/how-to-install-wordpress-on-ubuntu-12-04\" target=\"_blank\" rel=\"external\">超棒教學文</a> 我是跟著文章走，裡面紅色的字記得改成自己的</li>\n</ol>\n<ul>\n<li>cd /var/www</li>\n<li>下載wordpress包<br><code>wget http://wordpress.org/latest.tar.gz</code>   </li>\n<li>解壓縮<br><code>tar -xzvf latest.tar.gz</code></li>\n<li>進到mysql mode<br><code>mysql -u root -p</code></li>\n<li>剩下有紅字，推薦看連結XD</li>\n</ul>\n<h2 id=\"七、測試連線\">七、測試連線</h2>\n<p>當你安裝完後，事實上可以利用public domain來連線看看<br>直接在console裡面找到instance的public domian，連線看看是否成功</p>\n<ol>\n<li><code>cd /var/www</code> </li>\n<li><code>sudo vi test.php</code> 創新php檔案，並進到vim模式</li>\n<li>按<code>i</code> 進入編輯模式，記得看下面是否出現<code>-- INSERT --</code></li>\n<li>打上這一行<code>&lt;?php phpinfo(); ?&gt;</code></li>\n<li>按下esc -&gt; 打入<code>:wq</code> -&gt; enter存檔(記得是看iterm下面)</li>\n<li>利用public domain/test.php連線測試，看到php的資訊就成功了！</li>\n<li>public domain/wordpress 也可以看見你的wordpress有沒有架成功！</li>\n</ol>\n<h2 id=\"IP連接instance\">IP連接instance</h2>\n<p>如果你有自己的ip，想要指到EC2的話，按照下面作法。</p>\n<ol>\n<li>到godday的DNS manager</li>\n</ol>\n<ul>\n<li>設定你的IP的<code>A record</code></li>\n<li>指向instance的<code>Elastic IP</code>即可</li>\n</ul>\n<p><strong><em>reference</em></strong></p>\n<ul>\n<li><a href=\"http://blog.soft.idv.tw/?p=823&amp;page=2\" target=\"_blank\" rel=\"external\">阿正老師上篇</a> 阿正老師這兩篇必讀</li>\n<li><a href=\"http://blog.soft.idv.tw/?p=824\" target=\"_blank\" rel=\"external\">阿正老師下篇</a> 主機實戰篇</li>\n<li><a href=\"http://blog.rx836.tw/blog/first-amazon-web-services/\" target=\"_blank\" rel=\"external\">免費玩Amazon Web Service(AWS) EC2</a> 開機器寫的很詳細，圖文並茂</li>\n<li><a href=\"http://coenraets.org/blog/2012/01/setting-up-wordpress-on-amazon-ec2-in-5-minutes/\" target=\"_blank\" rel=\"external\">Setting Up WordPress on Amazon EC2 in 5 minutes</a> 根本神教學，我是受這篇感動才想要把自己的過程給記錄下來。</li>\n<li><a href=\"http://linadonis.pixnet.net/blog/post/27585552-ubuntu-server-%E5%AE%89%E8%A3%9D-phpmyadmin\" target=\"_blank\" rel=\"external\">Ubuntu Server 安裝 Phpmyadmin</a> phpmyadmin圖文教學</li>\n<li><a href=\"http://codex.wordpress.org/Giving_WordPress_Its_Own_Directory\" target=\"_blank\" rel=\"external\">Giving WordPress Its Own Directory</a> 更換wordpress的路徑位置指向</li>\n</ul>\n<blockquote>\n<p>如果有問題，或者我有寫錯的地方，歡迎留言讓我知道！</p>\n</blockquote>\n",
      "source": "_posts/ec2利用tasksel架wordpress經驗分享.md",
      "raw":
        "title: EC2利用tasksel架wordpress經驗分享\ndate: 2013-08-21 02:17:04\ntags:\n- wordpress\n- Amazon\n- EC2\n- tasksel\n- ubuntu\n- AWS\n---\n\n看了這麼久的雲端資源，總算開了算是自己真正學到東西的第一台Amazon EC2 server，目的是想要練習把wordpress架到EC2上，在此分享我的架設經驗。\n\n![Amazon web service](http://blog.programmableweb.com/wp-content/amazon-web-services1.png)\n\n<!-- more -->\n\n## 一、擁有AWS帳號 ##########\n\n關於開啟AWS的過程，實際走過一遍之後，阿正老師的[這篇](http://blog.soft.idv.tw/?p=823&page=2)，其內寫的不錯，推薦跟著走一遍，就會了解很多。\n\n## 二、開啟自己的instance ##########\n\n在實際走過後，會發現阿正老師[這篇](http://blog.soft.idv.tw/?p=824)真的超用心，因此接下來主要會利用這篇，再加上些我的補充。\n\n* instance地理位置\n\n提到將主機開的位置，現在已經有tokyo的據點，離台灣更近，所以建議將instance位置設在tokyo\n\n> 建議將instance位置設在tokyo\n\n* instance選擇方案\n\n![EC2 ubuntu server for free](http://i.imgur.com/U4rs7wk.png)\n\n利用VISA卡，選擇免費方案（圖中有星星的都是免費方案），在這邊我選擇ubuntu來做為我的系統。\n\n* key pair創建＆下載\n\n在阿正老師的文章內看到關於key pair介紹，很重要，一定要記住要把下載下來的pem給管理好，未來是需要利用它來做ssh登入主機。\n\n> .pem檔需要存好，一台主機配對一個key pair，且不能做更改，\n\n## 三、設定Security Group\n\n在沒有設定security group的時候，新開的instance可能是鎖起來的，會有SSH連線上的問題。\n\n1. 進入console.aws.amazon.com\n2. 左方導覽列選擇security group\n3. 選擇instance後，下方的tab選取`Inbound`\n4. 分別加入`SSH`&`HTTP`，Source部分都維持0.0.0.0/0即可，加入後記得要按`Apply Rule Change`才生效\n\n> 記得開啟SSH(20)、HTTP(80)\n\n## 四、申請Elastic IP\n\n每一個instance都應該要綁定一個elastice ip，未來可以作為連線使用。\n\n1. 同上，進入console.aws.amazon.com\n2. 選擇Elastic IPs\n3. 選擇Allocate New Address\n4. 申請完之後記得要associate到你的instance \n\n> 申請完elastic ip後，原本的Public domain前半部分會改變為新的ip\n\n**** 其實我在實作時，是先做了SSH連線，後來在去申請elastic ip，結果associate完後，我又要ssh連線，發現沒有辦法登入，之後才瞭解是做了elastic ip後，連線的ip也需要一並跟著改變。***\n\n## 五、SSH連線進入自己的instance\n\n1. 打開終端機（推薦iterm）\n2. `chmod 600 ~/.pem`   \n要記得把.pem檔改權限，不然會登不進去\n3. ssh連線使用以下command line   \n`ssh -i ~/.pem ubuntu@ip`\n\t* `~/.pem`是此instance的key pair .pem檔的路徑\n\t* `ubuntu`是因為我用ubuntu當做OS，如果當初選擇Amazon linux的話，則需要輸入`ec2-user`取代ubuntu\n\t* `ip`則為instance的ip，進到console，左側選instance，拉到底下看見   \n\t`Public DNS: ec2-xx-xxx-xxx-xx.ap-northeast-1.compute.amazonaws.com`   \n\t則xx-xxx-xxx-xx改成`xx.xxx.xxx.xx`即為你的連線ip\n3. 連線成功會看到`ubuntu@ip-xxx-xxx-xxx-xxx:~$`字眼！那就恭喜了！\n\n> pem檔的權限要更改為600\n\n\n## 六、環境設定\n\n剛進到instance，記得將環境設定一下\n\n1. `sudo apt-get update` + `sudo apt-get upgrade`\n2. 如果覺得一直sudo很麻煩，可以利用`sudo su`取得root權限\n\n---\n### # 安裝tasksel\n\n1. 是ubuntu底下的lamp懶人包\n2. 推薦[教學文](http://howtounix.info/howto/LAMP-on-Ubuntu-with-tasksel-tool)\n3. 開始安裝taskel   `sudo apt-get install tasksel`\n4. 安裝lamp-server   `sudo tasksel install lamp-server`\n\n### # 安裝phpmyadmin   \n1. `sudo apt-get install phpmyadmin`\n2. [reference](http://linadonis.pixnet.net/blog/post/27585552-ubuntu-server-%E5%AE%89%E8%A3%9D-phpmyadmin)\n\n### # 安裝wordpress\n\n![wordpress](http://wow-wp.org/wp-content/uploads/2011/10/wordpress.png)\n\n1. [超棒教學文](https://www.digitalocean.com/community/articles/how-to-install-wordpress-on-ubuntu-12-04) 我是跟著文章走，裡面紅色的字記得改成自己的\n* cd /var/www\n* 下載wordpress包   \n`wget http://wordpress.org/latest.tar.gz`   \n* 解壓縮   \n`tar -xzvf latest.tar.gz`\n* 進到mysql mode   \n`mysql -u root -p`\n* 剩下有紅字，推薦看連結XD\n\n## 七、測試連線\n\n當你安裝完後，事實上可以利用public domain來連線看看   \n直接在console裡面找到instance的public domian，連線看看是否成功\n\n \n1. `cd /var/www` \n2. `sudo vi test.php` 創新php檔案，並進到vim模式\n3. 按`i` 進入編輯模式，記得看下面是否出現`-- INSERT --`\n4. 打上這一行`<?php phpinfo(); ?>`\n5. 按下esc -> 打入`:wq` -> enter存檔(記得是看iterm下面)\n6. 利用public domain/test.php連線測試，看到php的資訊就成功了！\n7. public domain/wordpress 也可以看見你的wordpress有沒有架成功！\n\n## IP連接instance\n\n如果你有自己的ip，想要指到EC2的話，按照下面作法。\n\n1. 到godday的DNS manager\n* 設定你的IP的`A record`\n* 指向instance的`Elastic IP`即可\n\n***reference***\n\n* [阿正老師上篇](http://blog.soft.idv.tw/?p=823&page=2) 阿正老師這兩篇必讀\n* [阿正老師下篇](http://blog.soft.idv.tw/?p=824) 主機實戰篇\n* [免費玩Amazon Web Service(AWS) EC2](http://blog.rx836.tw/blog/first-amazon-web-services/) 開機器寫的很詳細，圖文並茂\n* [Setting Up WordPress on Amazon EC2 in 5 minutes](http://coenraets.org/blog/2012/01/setting-up-wordpress-on-amazon-ec2-in-5-minutes/) 根本神教學，我是受這篇感動才想要把自己的過程給記錄下來。\n* [Ubuntu Server 安裝 Phpmyadmin](http://linadonis.pixnet.net/blog/post/27585552-ubuntu-server-%E5%AE%89%E8%A3%9D-phpmyadmin) phpmyadmin圖文教學\n* [Giving WordPress Its Own Directory](http://codex.wordpress.org/Giving_WordPress_Its_Own_Directory) 更換wordpress的路徑位置指向\n\n\n> 如果有問題，或者我有寫錯的地方，歡迎留言讓我知道！\n\n",
      "slug": "ec2利用tasksel架wordpress經驗分享",
      "updated": 1496848435000,
      "excerpt":
        "<p>看了這麼久的雲端資源，總算開了算是自己真正學到東西的第一台Amazon EC2 server，目的是想要練習把wordpress架到EC2上，在此分享我的架設經驗。</p>\n<p><img src=\"http://blog.programmableweb.com/wp-content/amazon-web-services1.png\" alt=\"Amazon web service\"></p>\n",
      "_id": "mgsi3b76l1jpzcm0",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "hexo架blog初體驗",
      "date": 1366986115000,
      "tags": ["lb9ysu4zbhwbmj88", "swfap7j4lack6rte", "v46a3uc2e80dnej6"],
      "content":
        "<p>是這樣的，一直想要找一個空間，可以清爽的放code，可以跟其他人交流<br>有鑑於系上好朋友們紛紛都建立起自己的部落格，因此我也加入了這個行列。</p>\n<p>報著取之於人，回饋之於人的心情，我想要把自己從無到有架設這一個blog的過程記錄下來<br>謝謝那些願意指導我的朋友們！</p>\n<a id=\"more\"></a>\n<h2 id=\"一、本機環境設定\">一、本機環境設定</h2>\n<ol>\n<li><p>首先你要有node.js，這是一套快速、簡單且功能強大的 Node.js 網誌框架。</p>\n</li>\n<li><p>接著你要用 <code>npm install -g hexo</code> 來安裝</p>\n</li>\n</ol>\n<p>理論上這樣就完成了，我個人在裝的時候npm不給裝，發現前面加上 <code>sudo</code> 就可以解決。</p>\n<h2 id=\"二、github帳號設定\">二、github帳號設定</h2>\n<ol>\n<li><p>你要申請一個自己的github帳號</p>\n</li>\n<li><p>在主頁右上方創建一個新的repo</p>\n<p><img src=\"http://i.imgur.com/6mFqQlc.png\" alt=\"create new repo\" title=\"new repo\"></p>\n</li>\n<li><p>Repository name填入 <code>github帳號.github.com</code> 用來創建github page</p>\n</li>\n</ol>\n<h2 id=\"三、開始使用hexo\">三、開始使用hexo</h2>\n<p>建立hexo</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">init</span></div></pre></td></tr></table></figure>\n\n<p>建立一篇文章，將會是<a href=\"http://markdown.tw\" target=\"_blank\" rel=\"external\">Markdown</a>形式，可以到source/_post/title.md去修改</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"title\"</span></div></pre></td></tr></table></figure>\n\n<p>生成public檔</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">generate</span></div></pre></td></tr></table></figure>\n\n<p>開啟server觀看（預設在localhost:4000）</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">server</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"四、發佈到github上面\">四、發佈到github上面</h2>\n<p>修改 <code>_config.yml</code> 檔案，最下面加上</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: github</div><div class=\"line\">  repository: git@<span class=\"filename\">github.com</span>:github帳號/github帳號.<span class=\"filename\">github.com.git</span></div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n\n<p>我那時候用git的時候，沒有ssh認證，如果遇到相同問題可以看<a href=\"https://help.github.com/articles/generating-ssh-keys\" target=\"_blank\" rel=\"external\">這篇</a>。<br>照著上面的指令走就可以完成，唯獨mac裡面似乎內建 <code>id_rsa</code> 這把key，這邊我不清楚XD</p>\n<p>接著只要輸入</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">hexo</span> deploy</div></pre></td></tr></table></figure>\n\n<p>等待10分鐘，你的網誌理論上就架好了！網址為 <code>http://github帳號.github.io</code></p>\n<h3 id=\"reference\"><em>reference</em></h3>\n<ol>\n<li><p><a href=\"http://zespia.tw/hexo/zh-TW/\" target=\"_blank\" rel=\"external\">官方文件</a>非常詳盡，重點是<em>中文</em>！  </p>\n</li>\n<li><p>強者小熊<a href=\"http://eva0919.github.io/2013/04/21/%E4%BD%BF%E7%94%A8hexo%E4%BB%A5%E5%8F%8Agithub-page%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC/\" target=\"_blank\" rel=\"external\">教學文</a></p>\n</li>\n</ol>\n",
      "source": "_posts/hexo架blog初體驗.md",
      "raw":
        "title: hexo架blog初體驗\ndate: 2013-04-26 22:21:55\ntags:\n- code\n- hexo\n- github\n---\n\n是這樣的，一直想要找一個空間，可以清爽的放code，可以跟其他人交流   \n有鑑於系上好朋友們紛紛都建立起自己的部落格，因此我也加入了這個行列。\n\n報著取之於人，回饋之於人的心情，我想要把自己從無到有架設這一個blog的過程記錄下來   \n謝謝那些願意指導我的朋友們！\n\n<!-- more -->\n\n## 一、本機環境設定 ###############\n\n1. 首先你要有node.js，這是一套快速、簡單且功能強大的 Node.js 網誌框架。\n\n2. 接著你要用 `npm install -g hexo` 來安裝\n\n理論上這樣就完成了，我個人在裝的時候npm不給裝，發現前面加上 `sudo` 就可以解決。\n\n## 二、github帳號設定 ###############\n\n1. 你要申請一個自己的github帳號\n\n2. 在主頁右上方創建一個新的repo\n\n   ![create new repo](http://i.imgur.com/6mFqQlc.png \"new repo\")\n\n3. Repository name填入 `github帳號.github.com` 用來創建github page\n\n## 三、開始使用hexo ###############\n\n建立hexo\n\n{% codeblock %}\nhexo init\n{% endcodeblock %}\n\n建立一篇文章，將會是[Markdown](http://markdown.tw)形式，可以到source/_post/title.md去修改\n\n{% codeblock %}\nhexo new \"title\"\n{% endcodeblock %}\n\n生成public檔\n\n{% codeblock %}\nhexo generate\n{% endcodeblock %}\n\n開啟server觀看（預設在localhost:4000）\n\n{% codeblock %}\nhexo server\n{% endcodeblock %}\n\n## 四、發佈到github上面 ###############\n\n修改 `_config.yml` 檔案，最下面加上\n\n{% codeblock %}\ndeploy:\n  type: github\n  repository: git@github.com:github帳號/github帳號.github.com.git\n  branch: master\n{% endcodeblock %}\n\n我那時候用git的時候，沒有ssh認證，如果遇到相同問題可以看[這篇](https://help.github.com/articles/generating-ssh-keys)。   \n照著上面的指令走就可以完成，唯獨mac裡面似乎內建 `id_rsa` 這把key，這邊我不清楚XD\n\n接著只要輸入\n\n```\nhexo deploy\n```\n\n等待10分鐘，你的網誌理論上就架好了！網址為 `http://github帳號.github.io`\n\n### *reference*\n\n1. [官方文件](http://zespia.tw/hexo/zh-TW/)非常詳盡，重點是*中文*！  \n\n2. 強者小熊[教學文](http://eva0919.github.io/2013/04/21/%E4%BD%BF%E7%94%A8hexo%E4%BB%A5%E5%8F%8Agithub-page%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC/)",
      "slug": "hexo架blog初體驗",
      "updated": 1496848435000,
      "excerpt":
        "<p>是這樣的，一直想要找一個空間，可以清爽的放code，可以跟其他人交流<br>有鑑於系上好朋友們紛紛都建立起自己的部落格，因此我也加入了這個行列。</p>\n<p>報著取之於人，回饋之於人的心情，我想要把自己從無到有架設這一個blog的過程記錄下來<br>謝謝那些願意指導我的朋友們！</p>\n",
      "_id": "odbww92ya5pr53s1",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "Nginx with Node.js in different port",
      "date": 1397146593000,
      "tags": ["k0p1j1sphex1vtd4", "s5jsjciaqe59q87g", "i1gzodqjduhmbq2h"],
      "content":
        "<p>Nginx因為它的輕量、高效能而越來越多人喜歡使用它來做為網頁伺服器或是反向代理伺服器。</p>\n<p>由於近期想要把不同的node.js程式放在同一個server，因此開始研究nginx用法，記錄下來我的實作方式。</p>\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/c/c5/Nginx_logo.svg\" alt=\"Nginx\"></p>\n<a id=\"more\"></a>\n<h3 id=\"一、Domain指向主機\">一、Domain指向主機</h3>\n<p>將不同的domain都指向你的主機ip，此時都會指向HTTP預設的80 port，後面再用nginx設定由不同的port去處理不同的node.js程式。</p>\n<h3 id=\"二、安裝Nginx_in_Ubuntu\">二、安裝Nginx in Ubuntu</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get <span class=\"operator\"><span class=\"keyword\">update</span></span></div><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> <span class=\"keyword\">upgrade</span> // 確定抓到套件</div><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> nginx</div><div class=\"line\">sudo service nginx <span class=\"keyword\">start</span></div></pre></td></tr></table></figure>\n\n<p>在安裝的時候，記得你如果有其他server在run必須要停掉，不然佔住80 port是沒有辦法裝成功nginx的。</p>\n<h3 id=\"三、將Node-js設定不同port\">三、將Node.js設定不同port</h3>\n<p>會寫node.js應該會將port listen在不同的port，注意不要用常用的那些port即可。例如：80(HTTP)、22(SSH)。</p>\n<h3 id=\"四、設定Nginx資料夾檔案\">四、設定Nginx資料夾檔案</h3>\n<p>進到<code>/etc/nginx/sites-enabled</code>，然後創建跟你domain一樣的檔案，記得權限要用<code>sudo</code>去創</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"keyword\">vim</span> domain1.<span class=\"keyword\">com</span></div></pre></td></tr></table></figure>\n\n<p>檔案內容</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">server</span> {</div><div class=\"line\">    <span class=\"title\">listen</span> <span class=\"number\">80</span>;</div><div class=\"line\">    <span class=\"title\">server_name</span> domain1.com;</div><div class=\"line\">    <span class=\"title\">access_log</span> /var/log/nginx/domain1.access.log;</div><div class=\"line\">    <span class=\"title\">location</span> / {</div><div class=\"line\">        <span class=\"title\">proxy_pass</span>    <span class=\"url\">http://127.0.0.1:4000/</span>;</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>同理創建domain2.com，記得4000 port要改成你設定的port。</p>\n<h3 id=\"五、重啟Nginx\">五、重啟Nginx</h3>\n<p><code>/etc/init.d/nginx restart</code></p>\n<p>記得做過更動後，要重新啟動nginx才有用。<br>如此一來，不同的domain就可以連到同一台server的不同支node.js去執行了。</p>\n<p><strong>reference</strong></p>\n<p><a href=\"http://stackoverflow.com/questions/5009324/node-js-nginx-and-now/5015178#5015178\" target=\"_blank\" rel=\"external\">node.js + nginx - And now?</a><br><a href=\"http://zh.wikipedia.org/wiki/Nginx\" target=\"_blank\" rel=\"external\">wikipedia nginx</a></p>\n",
      "source": "_posts/nginx-with-nodejs-in-different-port.md",
      "raw":
        "title: Nginx with Node.js in different port\ndate: 2014-04-11 00:16:33\ntags:\n- nodejs\n- nginx\n- server\n---\n\nNginx因為它的輕量、高效能而越來越多人喜歡使用它來做為網頁伺服器或是反向代理伺服器。\n\n由於近期想要把不同的node.js程式放在同一個server，因此開始研究nginx用法，記錄下來我的實作方式。\n\n![Nginx](http://upload.wikimedia.org/wikipedia/commons/c/c5/Nginx_logo.svg)\n\n<!-- more -->\n\n### 一、Domain指向主機\n\n將不同的domain都指向你的主機ip，此時都會指向HTTP預設的80 port，後面再用nginx設定由不同的port去處理不同的node.js程式。\n\n### 二、安裝Nginx in Ubuntu\n\n```\nsudo apt-get update\nsudo apt-get upgrade // 確定抓到套件\nsudo apt-get install nginx\nsudo service nginx start\n```\n\n在安裝的時候，記得你如果有其他server在run必須要停掉，不然佔住80 port是沒有辦法裝成功nginx的。\n\n\n### 三、將Node.js設定不同port\n\n會寫node.js應該會將port listen在不同的port，注意不要用常用的那些port即可。例如：80(HTTP)、22(SSH)。\n\n### 四、設定Nginx資料夾檔案\n\n進到`/etc/nginx/sites-enabled`，然後創建跟你domain一樣的檔案，記得權限要用`sudo`去創\n\n```\nsudo vim domain1.com\n```\n\n檔案內容\n```\nserver {\n    listen 80;\n    server_name domain1.com;\n    access_log /var/log/nginx/domain1.access.log;\n    location / {\n        proxy_pass    http://127.0.0.1:4000/;\n    }\n}\n```\n\n同理創建domain2.com，記得4000 port要改成你設定的port。\n\n### 五、重啟Nginx\n\n`/etc/init.d/nginx restart`\n\n記得做過更動後，要重新啟動nginx才有用。\n如此一來，不同的domain就可以連到同一台server的不同支node.js去執行了。\n\n**reference**\n\n[node.js + nginx - And now?](http://stackoverflow.com/questions/5009324/node-js-nginx-and-now/5015178#5015178)\n[wikipedia nginx](http://zh.wikipedia.org/wiki/Nginx)",
      "slug": "nginx-with-nodejs-in-different-port",
      "updated": 1496848435000,
      "excerpt":
        "<p>Nginx因為它的輕量、高效能而越來越多人喜歡使用它來做為網頁伺服器或是反向代理伺服器。</p>\n<p>由於近期想要把不同的node.js程式放在同一個server，因此開始研究nginx用法，記錄下來我的實作方式。</p>\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/c/c5/Nginx_logo.svg\" alt=\"Nginx\"></p>\n",
      "_id": "52gsn7kl2ws832fq",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "Nginx remove .html filename",
      "date": 1411438256000,
      "tags": [
        "k0p1j1sphex1vtd4",
        "s5jsjciaqe59q87g",
        "gwkizfs2hcz2dn3v",
        "i1gzodqjduhmbq2h"
      ],
      "content":
        "<p>Nginx是一套輕量化的web server，因為它的輕量、高效能而越來越多人喜歡使用它來做為網頁伺服器或是反向代理伺服器，本篇將介紹靜態網頁在nginx上移除.html附檔名的作法。</p>\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/c/c5/Nginx_logo.svg\" alt=\"Nginx\"></p>\n<a id=\"more\"></a>\n<h3 id=\"一、Start\">一、Start</h3>\n<p>本篇要做nginx這套web server的設定檔更改，來達到雖然存取靜態頁面，卻可以利用mydomain.com/user 的URL來拿到所要的靜態頁面。</p>\n<blockquote>\n<p>其實是我單純是因為不想要看到.html這樣的附檔名，這看起來不專業！</p>\n</blockquote>\n<p><em>本篇環境為ubuntu14.04下執行。</em></p>\n<h3 id=\"二、Static_file_permission\">二、Static file permission</h3>\n<p>在nginx下，你要將靜態檔案放在server哪邊都可以，在此我根據之前apache習慣的設定，放在/var/www</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /var</div><div class=\"line\"><span class=\"built_in\">sudo</span> mkdir www</div><div class=\"line\"><span class=\"built_in\">sudo</span> chown -R www-data:www-data /var/www/mydomain.com</div><div class=\"line\"><span class=\"built_in\">sudo</span> chmod <span class=\"number\">755</span> /var/www</div></pre></td></tr></table></figure>\n\n<p>如此一來你便可以將整個靜態網站檔案放在/var/www/mydomain.com目錄底下。</p>\n<h3 id=\"三、Nginx_conf_setting\">三、Nginx conf setting</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> /etc/nginx/sites-enabled</div><div class=\"line\">sudo <span class=\"keyword\">vim</span> mydomain.<span class=\"keyword\">com</span></div></pre></td></tr></table></figure>\n\n<p>修改底下內容為你要的設定</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">server</span> {</div><div class=\"line\">  <span class=\"title\">listen</span>        <span class=\"number\">80</span>;</div><div class=\"line\">  <span class=\"title\">root</span>          /var/www/mydomain;</div><div class=\"line\">  <span class=\"title\">index</span>         index.html index.htm;</div><div class=\"line\">  <span class=\"title\">server_name</span>   mydomain;</div><div class=\"line\">  <span class=\"title\">location</span> / {</div><div class=\"line\">    <span class=\"title\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ <span class=\"variable\">$uri</span>.html;</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>此設定將會當抓到$uri時，nginx會自動帶入<code>$uri/</code>或是<code>$uri.html</code><br>因此我們送出<code>mydomain.com/user</code>，nginx會試著搜尋<code>mydomain.com/user/</code>或<code>mydomain.com/user.html</code>。</p>\n<h3 id=\"四、Remove_default_conf\">四、Remove default conf</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo rm <span class=\"regexp\">/etc/</span>nginx<span class=\"regexp\">/sites-enabled/</span><span class=\"keyword\">default</span></div></pre></td></tr></table></figure>\n\n<p>在我設定的時候，需把default刪除後，才可以正常的讀取到新設定的mydomain.com檔，歡迎各位先進補充這點。</p>\n<h3 id=\"五、Restart_Nginx\">五、Restart Nginx</h3>\n<p><code>/etc/init.d/nginx restart</code> || <code>sudo service nginx restart</code></p>\n<p>如此一來你便可以利用<code>mydomain.com/user</code>純取到相關的靜態頁面了！</p>\n<p><strong>reference</strong></p>\n<p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-virtual-hosts-server-blocks-on-ubuntu-12-04-lts--3\" target=\"_blank\" rel=\"external\">How To Set Up nginx Virtual Hosts (Server Blocks) on Ubuntu 12.04 LTS</a></p>\n",
      "source": "_posts/nginx-移除-html-附檔名.md",
      "raw":
        "title: Nginx remove .html filename\ndate: 2014-09-23 10:10:56\ntags:\n- nodejs\n- nginx\n- static file\n- server\n---\n\nNginx是一套輕量化的web server，因為它的輕量、高效能而越來越多人喜歡使用它來做為網頁伺服器或是反向代理伺服器，本篇將介紹靜態網頁在nginx上移除.html附檔名的作法。\n\n![Nginx](http://upload.wikimedia.org/wikipedia/commons/c/c5/Nginx_logo.svg)\n\n<!-- more -->\n\n### 一、Start\n\n本篇要做nginx這套web server的設定檔更改，來達到雖然存取靜態頁面，卻可以利用mydomain.com/user 的URL來拿到所要的靜態頁面。\n\n> 其實是我單純是因為不想要看到.html這樣的附檔名，這看起來不專業！\n\n*本篇環境為ubuntu14.04下執行。*\n\n### 二、Static file permission\n\n在nginx下，你要將靜態檔案放在server哪邊都可以，在此我根據之前apache習慣的設定，放在/var/www\n\n```\ncd /var\nsudo mkdir www\nsudo chown -R www-data:www-data /var/www/mydomain.com\nsudo chmod 755 /var/www\n```\n\n如此一來你便可以將整個靜態網站檔案放在/var/www/mydomain.com目錄底下。\n\n\n### 三、Nginx conf setting\n\n```\ncd /etc/nginx/sites-enabled\nsudo vim mydomain.com\n```\n\n修改底下內容為你要的設定\n```\nserver {\n  listen        80;\n  root          /var/www/mydomain;\n  index         index.html index.htm;\n  server_name   mydomain;\n  location / {\n    try_files $uri $uri/ $uri.html;\n  }\n}\n```\n\n此設定將會當抓到$uri時，nginx會自動帶入`$uri/`或是`$uri.html`\n因此我們送出`mydomain.com/user`，nginx會試著搜尋`mydomain.com/user/`或`mydomain.com/user.html`。\n\n\n### 四、Remove default conf\n\n```\nsudo rm /etc/nginx/sites-enabled/default\n```\n\n在我設定的時候，需把default刪除後，才可以正常的讀取到新設定的mydomain.com檔，歡迎各位先進補充這點。\n\n### 五、Restart Nginx\n\n`/etc/init.d/nginx restart` || `sudo service nginx restart`\n\n如此一來你便可以利用`mydomain.com/user`純取到相關的靜態頁面了！\n\n**reference**\n\n[How To Set Up nginx Virtual Hosts (Server Blocks) on Ubuntu 12.04 LTS](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-virtual-hosts-server-blocks-on-ubuntu-12-04-lts--3)\n",
      "slug": "nginx-移除-html-附檔名",
      "updated": 1496848435000,
      "excerpt":
        "<p>Nginx是一套輕量化的web server，因為它的輕量、高效能而越來越多人喜歡使用它來做為網頁伺服器或是反向代理伺服器，本篇將介紹靜態網頁在nginx上移除.html附檔名的作法。</p>\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/c/c5/Nginx_logo.svg\" alt=\"Nginx\"></p>\n",
      "_id": "lawt3q3j6hd8dof0",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "Sublime Text 2 實用套件",
      "date": 1385740968000,
      "tags": ["8h6rpape37x0ds9u"],
      "content":
        "<p><img src=\"http://upload.wikimedia.org/wikipedia/en/4/4c/Sublime_Text_Logo.png\" alt=\"Sublime Text 2\" title=\"Sublime Text 2\"></p>\n<p>Sublime Text 2 是網頁開發者都不陌生的一套編輯器，除了單純的文字編輯外，它還有很多實用的套件，這篇來介紹我平常常用的Sublime Text 2 套件。</p>\n<a id=\"more\"></a>\n<h2 id=\"編輯環境\">編輯環境</h2>\n<ol>\n<li>Mac 10.9</li>\n<li>Sublime Text 2</li>\n</ol>\n<p>Mac環境，所以快捷鍵會介紹command的配置，若windows版本請自行查閱。</p>\n<h3 id=\"安裝Package_Control\">安裝Package Control</h3>\n<p>所謂Package Control就是Sublime Text 2 用來裝套件的，因此在裝其他的套件之前，我們必須先來安裝Package Control。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">開啟Sublime Text <span class=\"number\">2</span></div><div class=\"line\">開啟console，快捷鍵ctrl+`</div><div class=\"line\">貼上以下程式碼</div><div class=\"line\"></div><div class=\"line\">import urllib2,os; pf=<span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class=\"keyword\">if</span> not os.path.<span class=\"built_in\">exists</span>(ipp) <span class=\"keyword\">else</span> None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); <span class=\"keyword\">open</span>( os.path.<span class=\"built_in\">join</span>( ipp, pf), <span class=\"string\">'wb'</span> ).<span class=\"keyword\">write</span>( urllib2.urlopen( <span class=\"string\">'http://sublime.wbond.net/'</span> +pf.replace( <span class=\"string\">' '</span>,<span class=\"string\">'%20'</span> )).<span class=\"keyword\">read</span>()); <span class=\"keyword\">print</span>( <span class=\"string\">'Please restart Sublime Text to finish installation'</span>)</div></pre></td></tr></table></figure>\n\n<p>程式碼可以參照<a href=\"https://sublime.wbond.net/installation#st2\" target=\"_blank\" rel=\"external\">官網</a></p>\n<p>安裝完後，未來我們就可以使用<code>cmd+shift+p</code>，打入<code>install package</code>，即可啟用Package Control，如下圖</p>\n<p><img src=\"http://i.imgur.com/5n76S9Q.png\" alt=\"install package\"></p>\n<h3 id=\"安裝套件步驟\">安裝套件步驟</h3>\n<ol>\n<li>首先<code>cmd+shift+p</code></li>\n<li>鍵入<code>install package</code></li>\n<li>跳出新的輸入欄位後，在輸入你要的<code>package名稱</code></li>\n<li>看著左下角，等它跑完</li>\n<li>重新啟動Sublime Text 2 即安裝完成。</li>\n</ol>\n<h2 id=\"必裝套件\">必裝套件</h2>\n<h4 id=\"一、BracketHighlighter\">一、BracketHighlighter</h4>\n<p><img src=\"http://i.imgur.com/2ovEcG8.png\" alt=\"\"></p>\n<p>這是一套超過196K人裝的套件，如圖所示，寫html常常遇到不知道close tag在哪邊，裡用它可以清楚的將close tag標示出來。<br>另外它有一個很好的地方，就是會在每一行的前面列出來目前的tag，不同的語言還有不同的icon，因此可以更快的知道自己的位置。</p>\n<h4 id=\"二、Emmet\">二、Emmet</h4>\n<p>以前它叫做Zen coding，現在則改為Emmet。</p>\n<p>可以將需要重複的html用很簡短的方式寫出來，例如：</p>\n<ol>\n<li><code>.container&gt;.col-lg-4*3</code></li>\n<li>按下tab後便會出現</li>\n<li><img src=\"http://i.imgur.com/PP9vdmr.png\" alt=\"Emmet\"></li>\n</ol>\n<p>若你發現按下tab後竟然沒有用，記得確定自己是不是在html文件內。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">view --&gt;</span> syntax --&gt; <span class=\"constant\">HTML</span>(<span class=\"number\">5</span>)</span></div></pre></td></tr></table></figure>\n\n<p>在HTML5的文件下，<code>!+tab</code> 會有出現HTML5的snippet出現，非常好用！</p>\n<h4 id=\"三、Pretty_Json\">三、Pretty Json</h4>\n<p>有利用到JSON的人，想必一定會為了格式上面的問題而煩惱，只要裝上這個，JSON立刻變得很好看。</p>\n<p>裝完之後，把你要修改的JSON選取起來，按下快捷鍵</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cmd+ctrl+<span class=\"built_in\">j</span></div></pre></td></tr></table></figure>\n\n<p>立刻就可以把JSON變得很漂亮，也可以自行進去定義縮排大小。</p>\n<h4 id=\"四、flat_theme\">四、flat theme</h4>\n<p><img src=\"http://i.imgur.com/pvxRMlX.png\" alt=\"flatland\"></p>\n<p>其實這個套件全名是flatland才對，可以把Sublime Text 2的整體環境變得扁平化。</p>\n<p>安裝方法：</p>\n<ol>\n<li>打開Package Control</li>\n<li>輸入Theme - Flatland即可</li>\n</ol>\n<hr>\n<p>以上介紹了一些我常用的Sublime Text 2 套件，但一直沒有找到好看的主題，如果你有推薦的主題，非常歡迎交流！</p>\n",
      "source": "_posts/sublime-text-2-實用套件.md",
      "raw":
        "title: Sublime Text 2 實用套件\ndate: 2013-11-30 00:02:48\ntags:\n- sublime text 2\n---\n\n![Sublime Text 2](http://upload.wikimedia.org/wikipedia/en/4/4c/Sublime_Text_Logo.png \"Sublime Text 2\" )\n\nSublime Text 2 是網頁開發者都不陌生的一套編輯器，除了單純的文字編輯外，它還有很多實用的套件，這篇來介紹我平常常用的Sublime Text 2 套件。\n\n<!-- more -->\n\n## 編輯環境\n\n1. Mac 10.9\n2. Sublime Text 2\n\nMac環境，所以快捷鍵會介紹command的配置，若windows版本請自行查閱。\n\n### 安裝Package Control ###\n\n所謂Package Control就是Sublime Text 2 用來裝套件的，因此在裝其他的套件之前，我們必須先來安裝Package Control。\n\n```\n開啟Sublime Text 2\n開啟console，快捷鍵ctrl+`\n貼上以下程式碼\n\nimport urllib2,os; pf='Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), 'wb' ).write( urllib2.urlopen( 'http://sublime.wbond.net/' +pf.replace( ' ','%20' )).read()); print( 'Please restart Sublime Text to finish installation')\n```\n\n程式碼可以參照[官網](https://sublime.wbond.net/installation#st2)\n\n安裝完後，未來我們就可以使用`cmd+shift+p`，打入`install package`，即可啟用Package Control，如下圖\n\n![install package](http://i.imgur.com/5n76S9Q.png)\n\n\n\n### 安裝套件步驟 ###\n\n1. 首先`cmd+shift+p`\n2. 鍵入`install package`\n3. 跳出新的輸入欄位後，在輸入你要的`package名稱`\n4. 看著左下角，等它跑完\n5. 重新啟動Sublime Text 2 即安裝完成。\n\n## 必裝套件\n\n#### 一、BracketHighlighter ####\n\n![](http://i.imgur.com/2ovEcG8.png)\n\n這是一套超過196K人裝的套件，如圖所示，寫html常常遇到不知道close tag在哪邊，裡用它可以清楚的將close tag標示出來。   \n另外它有一個很好的地方，就是會在每一行的前面列出來目前的tag，不同的語言還有不同的icon，因此可以更快的知道自己的位置。\n\n#### 二、Emmet #####\n\n以前它叫做Zen coding，現在則改為Emmet。\n\n可以將需要重複的html用很簡短的方式寫出來，例如：\n\n1. `.container>.col-lg-4*3`\n2. 按下tab後便會出現\n3. ![Emmet](http://i.imgur.com/PP9vdmr.png)\n\n \n若你發現按下tab後竟然沒有用，記得確定自己是不是在html文件內。\n\n```\nview --> syntax --> HTML(5)\n```\n\n在HTML5的文件下，`!+tab` 會有出現HTML5的snippet出現，非常好用！\n\n\n#### 三、Pretty Json ####\n\n有利用到JSON的人，想必一定會為了格式上面的問題而煩惱，只要裝上這個，JSON立刻變得很好看。\n\n裝完之後，把你要修改的JSON選取起來，按下快捷鍵\n\n```\ncmd+ctrl+j\n```\n立刻就可以把JSON變得很漂亮，也可以自行進去定義縮排大小。\n\n#### 四、flat theme #######\n\n![flatland](http://i.imgur.com/pvxRMlX.png)\n\n其實這個套件全名是flatland才對，可以把Sublime Text 2的整體環境變得扁平化。\n\n安裝方法：\n\n1. 打開Package Control\n2. 輸入Theme - Flatland即可\n\n***\n\n以上介紹了一些我常用的Sublime Text 2 套件，但一直沒有找到好看的主題，如果你有推薦的主題，非常歡迎交流！\n\n\n",
      "slug": "sublime-text-2-實用套件",
      "updated": 1496848435000,
      "excerpt":
        "<p><img src=\"http://upload.wikimedia.org/wikipedia/en/4/4c/Sublime_Text_Logo.png\" alt=\"Sublime Text 2\" title=\"Sublime Text 2\"></p>\n<p>Sublime Text 2 是網頁開發者都不陌生的一套編輯器，除了單純的文字編輯外，它還有很多實用的套件，這篇來介紹我平常常用的Sublime Text 2 套件。</p>\n",
      "_id": "uuci0lbt5ekqcraf",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "Sublime Text 2 實用技巧",
      "date": 1370407990000,
      "tags": ["8h6rpape37x0ds9u"],
      "content":
        "<p><img src=\"http://upload.wikimedia.org/wikipedia/en/4/4c/Sublime_Text_Logo.png\" alt=\"Sublime Text 2\" title=\"Sublime Text 2\"></p>\n<p>Sublime Text 2 是一套越來越火紅的編輯器，如果你是接觸網頁開發，想必對於這套軟體不陌生，以下分享幾個好用的技巧，都是我自己平常比較常使用的技巧，因為我本身是一個懶得看文件的人，所以就整理這篇與大家分享。</p>\n<a id=\"more\"></a>\n<h2 id=\"編輯環境\">編輯環境</h2>\n<ol>\n<li>Mac 10.7.5</li>\n<li>Sublime Text 2</li>\n</ol>\n<p>我是使用mac，所以快捷鍵就會是command的配置。</p>\n<h2 id=\"技巧介紹\">技巧介紹</h2>\n<h3 id=\"一、Set_Syntax\">一、Set Syntax</h3>\n<p>有發現你的Sublime Text 2右下角有你正在編輯的環境語言嗎？舉凡JAVA、CSS、HTML5等<br>比如說我現在要從HTML5切到CSS介面，除了由上方的View-&gt;Sytax切換外，可以利用快捷鍵   </p>\n<p>切換到CSS範例：   </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">shift+<span class=\"command\"><span class=\"keyword\">command</span>+<span class=\"title\">p</span></span></div><div class=\"line\">鍵入sscss</div></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"http://i.imgur.com/51PUAhD.png\" alt=\"Set Syntax\" title=\"Set Syntax\"></p>\n<p>每一個Color Scheme都會針對不同的語言去做優化，因此值得學習。</p>\n<h3 id=\"二、HTML5_snippet\">二、HTML5 snippet</h3>\n<p>貼心的Sublime Text 2有內建HTML5的snippet，方法如下：   </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">! + <span class=\"keyword\">tab</span></div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">htm<span class=\"variable\">l:5</span> + <span class=\"keyword\">tab</span></div></pre></td></tr></table></figure>\n\n<p>都可以達成HTML5快速生成已經預定的snippet.   </p>\n<p><img src=\"http://i.imgur.com/grLplgD.png\" alt=\"\"></p>\n<h3 id=\"三、Multiple_Selection_同時多個游標\">三、Multiple Selection 同時多個游標</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">按住<span class=\"command\"><span class=\"keyword\">command</span>+點選你要的位置</span></div></pre></td></tr></table></figure>\n\n\n<p>推薦用在處理Array等結構重複性高的資料型態。</p>\n<h3 id=\"四、Column_Selection_同時直行游標\">四、Column Selection 同時直行游標</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">按住<span class=\"keyword\">option</span>+按著滑鼠左鍵直行往下拖曳選取</div></pre></td></tr></table></figure>\n\n\n<p>推薦用在處理html等修改固定class或其他部分。</p>\n<p><img src=\"http://i.imgur.com/1kLSh2P.png\" alt=\"\"></p>\n<h3 id=\"五、選取引號內字串\">五、選取引號內字串</h3>\n<p>通常你都怎樣選取雙引號內的字串呢？<code>&quot;string&quot;</code>利用滑鼠從第一個引號拉到後面那個。</p>\n<p>輸入：<code>command + d</code> 即可完成</p>\n<h3 id=\"六、分割畫面\">六、分割畫面</h3>\n<p>有時候我時常左邊放HTML檔，右邊放SCSS檔，一邊看一邊編輯，這時候就要分割畫面。</p>\n<p>輸入：<code>command+option+數量</code></p>\n<p>就可以把視窗分割成你要的數量。</p>\n<h3 id=\"七、貼上符合縮排\">七、貼上符合縮排</h3>\n<p>有時候從網站上複製一段code，常常貼上的部份本身就有縮排，貼完卻只有第一行有縮排，其他跑到前面。</p>\n<p>複製完後，輸入：<code>shift+command+v</code></p>\n<p>也就是在原本的貼上加上shift就可以解決！</p>\n<h3 id=\"reference\"><em>reference</em></h3>\n<ol>\n<li><a href=\"http://www.youtube.com/watch?v=41nY3RLBy3w&amp;list=PL8dIIwCMF-SOaSb3_VYUlyULpPyk7iwlh&amp;index=1\" target=\"_blank\" rel=\"external\">up chen in 2013 JSDC</a></li>\n<li><a href=\"https://gist.github.com/twosixcode/1988097\" target=\"_blank\" rel=\"external\">Paste and Indent</a></li>\n</ol>\n",
      "source": "_posts/sublime-text-2-實用技巧.md",
      "raw":
        "title: Sublime Text 2 實用技巧\ndate: 2013-06-05 12:53:10\ntags:\n- sublime text 2 \n---\n\n![Sublime Text 2](http://upload.wikimedia.org/wikipedia/en/4/4c/Sublime_Text_Logo.png \"Sublime Text 2\" )\n\nSublime Text 2 是一套越來越火紅的編輯器，如果你是接觸網頁開發，想必對於這套軟體不陌生，以下分享幾個好用的技巧，都是我自己平常比較常使用的技巧，因為我本身是一個懶得看文件的人，所以就整理這篇與大家分享。\n\n<!-- more -->\n\n## 編輯環境\n\n1. Mac 10.7.5\n2. Sublime Text 2\n\n我是使用mac，所以快捷鍵就會是command的配置。\n\n## 技巧介紹\n\n###  一、Set Syntax  #####\n\n有發現你的Sublime Text 2右下角有你正在編輯的環境語言嗎？舉凡JAVA、CSS、HTML5等   \n比如說我現在要從HTML5切到CSS介面，除了由上方的View->Sytax切換外，可以利用快捷鍵   \n\n切換到CSS範例：   \n```\nshift+command+p\n鍵入sscss\n```   \n\n![Set Syntax](http://i.imgur.com/51PUAhD.png \"Set Syntax\")\n\n每一個Color Scheme都會針對不同的語言去做優化，因此值得學習。\n\n###  二、HTML5 snippet #####\n\n貼心的Sublime Text 2有內建HTML5的snippet，方法如下：   \n```\n! + tab\n```\n```\nhtml:5 + tab\n```\n都可以達成HTML5快速生成已經預定的snippet.   \n\n![](http://i.imgur.com/grLplgD.png)\n###  三、Multiple Selection 同時多個游標 #####\n\n```\n按住command+點選你要的位置\n```   \n推薦用在處理Array等結構重複性高的資料型態。\n\n### 四、Column Selection 同時直行游標 \n\n```\n按住option+按著滑鼠左鍵直行往下拖曳選取\n```   \n推薦用在處理html等修改固定class或其他部分。\n\n![](http://i.imgur.com/1kLSh2P.png)\n\n### 五、選取引號內字串\n\n通常你都怎樣選取雙引號內的字串呢？`\"string\"`利用滑鼠從第一個引號拉到後面那個。\n\n輸入：`command + d` 即可完成\n\n\n### 六、分割畫面\n\n有時候我時常左邊放HTML檔，右邊放SCSS檔，一邊看一邊編輯，這時候就要分割畫面。\n\n輸入：`command+option+數量`\n\n就可以把視窗分割成你要的數量。\n\n### 七、貼上符合縮排\n\n有時候從網站上複製一段code，常常貼上的部份本身就有縮排，貼完卻只有第一行有縮排，其他跑到前面。\n\n複製完後，輸入：`shift+command+v`\n\n也就是在原本的貼上加上shift就可以解決！\n\n### *reference*\n\n1. [up chen in 2013 JSDC](http://www.youtube.com/watch?v=41nY3RLBy3w&list=PL8dIIwCMF-SOaSb3_VYUlyULpPyk7iwlh&index=1)\n2. [Paste and Indent](https://gist.github.com/twosixcode/1988097)\n",
      "slug": "sublime-text-2-實用技巧",
      "updated": 1496848435000,
      "excerpt":
        "<p><img src=\"http://upload.wikimedia.org/wikipedia/en/4/4c/Sublime_Text_Logo.png\" alt=\"Sublime Text 2\" title=\"Sublime Text 2\"></p>\n<p>Sublime Text 2 是一套越來越火紅的編輯器，如果你是接觸網頁開發，想必對於這套軟體不陌生，以下分享幾個好用的技巧，都是我自己平常比較常使用的技巧，因為我本身是一個懶得看文件的人，所以就整理這篇與大家分享。</p>\n",
      "_id": "38j44yedulg9mirp",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "Web好UI設計法則 1",
      "date": 1395220275000,
      "tags": ["tg9pn3ap6pjqet54", "qyjaf6d038k86y05"],
      "content":
        "<p>本文譯自<a href=\"http://goodui.org\" target=\"_blank\" rel=\"external\">goodui</a>，會寫這系列並非逐字翻譯，而是在研讀過後利用自己的方式表達並記錄分享之，全文圖片版權皆為goodui.org所有。</p>\n<p><img src=\"http://i.imgur.com/ve2iCpO.png\" alt=\"goodui\"></p>\n<a id=\"more\"></a>\n<h2 id=\"1、頁面單欄式而非多欄式\">1、頁面單欄式而非多欄式</h2>\n<p>採用單欄式的好處是可以讓讀者自然而然的了解閱讀方向為由上而下，採用多欄式的頁面設計，會有額外增加的risk，會讓讀者容易分心。在文章（頁面）的最後採用call to action，引導讀者點進你想要的導向頁面。</p>\n<p><img src=\"http://goodui.org/images/idea001.png\" alt=\"idea001\"></p>\n<h2 id=\"2、試著給些小禮物\">2、試著給些小禮物</h2>\n<p>好朋友間互相送禮，是很正常不過的對吧？在面對你的使用者也是一樣的，根據互惠原則，給禮物是一個激勵使用者的手法，讓使用者會更願意回來你的網站。</p>\n<p><img src=\"http://goodui.org/images/idea002.png\" alt=\"idea002\"></p>\n<h2 id=\"3、把相似功能的介面合併在一起\">3、把相似功能的介面合併在一起</h2>\n<p>在過去，我們很容易將功能差不多的介面，在頁面上分成好多部分。當你的UI越分散，那麼該網站的使用者其學習曲線便越高，試著重新設計你的UI吧，把那些功能相近的按鈕、區塊放在一起。</p>\n<p><img src=\"http://goodui.org/images/idea003.png\" alt=\"idea003\"></p>\n<h2 id=\"4、讓別人來說，而非自己說\">4、讓別人來說，而非自己說</h2>\n<p>列出那些曾經在social media討論本身產品的人，利用他們的見證會比自己在網站上面寫還來的有用。「Our customers say」會比「We are awesome」還更具有說服力。</p>\n<p><img src=\"http://goodui.org/images/idea004.png\" alt=\"idea004\"></p>\n<h2 id=\"5、重複你的主要訴求\">5、重複你的主要訴求</h2>\n<p>你的call to action是網頁中重要的項目，尤其在很長的頁面時，不要吝嗇讓它出現超過一次。當使用者滑到頁面底端時，是該他們做決定的時候了，離開或是完成你的主要訴求。</p>\n<p><img src=\"http://goodui.org/images/idea005.png\" alt=\"idea005\"></p>\n",
      "source": "_posts/web好ui設計法則-1.md",
      "raw":
        "title: Web好UI設計法則 1\ndate: 2014-03-19 17:11:15\ntags:\n- goodui\n- UI\n---\n\n本文譯自[goodui](http://goodui.org)，會寫這系列並非逐字翻譯，而是在研讀過後利用自己的方式表達並記錄分享之，全文圖片版權皆為goodui.org所有。\n\n![goodui](http://i.imgur.com/ve2iCpO.png)\n\n<!-- more -->\n\n## 1、頁面單欄式而非多欄式\n\n採用單欄式的好處是可以讓讀者自然而然的了解閱讀方向為由上而下，採用多欄式的頁面設計，會有額外增加的risk，會讓讀者容易分心。在文章（頁面）的最後採用call to action，引導讀者點進你想要的導向頁面。\n\n![idea001](http://goodui.org/images/idea001.png)\n\n## 2、試著給些小禮物\n\n好朋友間互相送禮，是很正常不過的對吧？在面對你的使用者也是一樣的，根據互惠原則，給禮物是一個激勵使用者的手法，讓使用者會更願意回來你的網站。\n\n![idea002](http://goodui.org/images/idea002.png)\n\n\n## 3、把相似功能的介面合併在一起\n\n在過去，我們很容易將功能差不多的介面，在頁面上分成好多部分。當你的UI越分散，那麼該網站的使用者其學習曲線便越高，試著重新設計你的UI吧，把那些功能相近的按鈕、區塊放在一起。\n\n![idea003](http://goodui.org/images/idea003.png)\n\n## 4、讓別人來說，而非自己說\n\n列出那些曾經在social media討論本身產品的人，利用他們的見證會比自己在網站上面寫還來的有用。「Our customers say」會比「We are awesome」還更具有說服力。\n\n![idea004](http://goodui.org/images/idea004.png)\n\n## 5、重複你的主要訴求\n\n你的call to action是網頁中重要的項目，尤其在很長的頁面時，不要吝嗇讓它出現超過一次。當使用者滑到頁面底端時，是該他們做決定的時候了，離開或是完成你的主要訴求。\n\n![idea005](http://goodui.org/images/idea005.png)",
      "slug": "web好ui設計法則-1",
      "updated": 1496848435000,
      "excerpt":
        "<p>本文譯自<a href=\"http://goodui.org\" target=\"_blank\" rel=\"external\">goodui</a>，會寫這系列並非逐字翻譯，而是在研讀過後利用自己的方式表達並記錄分享之，全文圖片版權皆為goodui.org所有。</p>\n<p><img src=\"http://i.imgur.com/ve2iCpO.png\" alt=\"goodui\"></p>\n",
      "_id": "mk7uxm1b6x0fwgvf",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "Sublime Text 3 Mac 指南",
      "date": 1413271019000,
      "tags": ["mgz8bmo3ig3qq2x9", "0z6dvaxhkqub1xa9"],
      "content":
        "<p>本篇是我根據自己使用習慣所做的快捷鍵整理，使用sublime text這套編輯器已經有2年之餘，本身是個快捷鍵愛好者，對於發掘好用的快捷鍵樂此不疲，因此整理常用的快捷鍵在這篇，針對的是mac使用者所使用者快捷鍵，希望對各位有幫助。</p>\n<a id=\"more\"></a>\n<h1 id=\"快捷鍵\">快捷鍵</h1>\n<p>左邊為本篇所採用的縮寫，右邊則為鍵盤上面的標示</p>\n<ul>\n<li>cmd = command</li>\n<li>shift = shift</li>\n<li>option = option (alt)</li>\n<li>control = control</li>\n<li>pkg-ctrl = package control (command + shift + p)</li>\n</ul>\n<h2 id=\"基礎模式\">基礎模式</h2>\n<p>「基礎模式」介紹非sublime專用的快捷鍵，是一般使用者都可以快速上手的部分，想要看進階的可以跳過這部份。</p>\n<h3 id=\"1-_cmd_+_o_(open)\">1. cmd + o (open)</h3>\n<p>快速開啟整個資料夾(專案)</p>\n<h3 id=\"2-_cmd_+_w\">2. cmd + w</h3>\n<p>關閉視窗分頁</p>\n<h3 id=\"3-_cmd_+_n\">3. cmd + n</h3>\n<p>開新分頁</p>\n<h3 id=\"4-_cmd_+_shift_+_t\">4. cmd + shift + t</h3>\n<p>重新開啟剛剛關閉的分頁</p>\n<h3 id=\"5-_cmd_+_shift_+_v\">5. cmd + shift + v</h3>\n<p>貼上時，符合縮排</p>\n<h2 id=\"畫面配置\">畫面配置</h2>\n<p>以下介紹sublime的畫面配置，常常因為編輯情境的所需，利用快捷鍵讓自己的畫面配置更加有彈性。</p>\n<h3 id=\"1-_cmd_+_option_+_數字\">1. cmd + option + 數字</h3>\n<p>分割視窗，讓你的編輯範圍有多個panel。<br>常用為<code>cmd + option + 1</code> 和<code>cmd + option + 2</code> 之間切換。<br>使用情境：左邊.html右邊.css，編輯起來快速又方便。<br>建議：利用空白鍵右邊的兩個連續按鈕搭配數字。</p>\n<p><img src=\"http://i.imgur.com/wWrUvSA.gif\" alt=\"\"></p>\n<h3 id=\"2-_cmd_+_k_再_cmd_+_b\">2. cmd + k 再 cmd + b</h3>\n<p>關閉左側資料夾目錄，讓畫面變得更寬敞。<br>這是我非常使用的一個快捷鍵，可以讓編輯的區域變得更大。</p>\n<p><img src=\"http://i.imgur.com/IiAhOPx.gif\" alt=\"\"></p>\n<h3 id=\"3-_cmd_+_shift_+_control_+_f\">3. cmd + shift + control + f</h3>\n<p>進入zen狀態，單份文件變成全螢幕，且左邊會自動縮排。<br>使用情境：當不常需要切換檔案時，此模式可以專注在單一檔案上，打這篇blog時我便這樣使用。<br>建議：快捷鍵不好記，可以點選<code>View --&gt; Enter Distraction Free Mode</code></p>\n<p><img src=\"http://i.imgur.com/DdD24a5.png\" alt=\"zen\"></p>\n<h2 id=\"選取\">選取</h2>\n<p>底下介紹的部份，回到sublime text編輯器本身，因為重點在編輯部分，因此在此將「選取」特別整理成一區。</p>\n<h3 id=\"1-_cmd_+_d_(可連按)\">1. cmd + d (可連按)</h3>\n<p>快速選取一範圍內的字串，<code>連按d</code>的話會選取整份文件內相同的字串。<br>當選取完後，可以直接打字，因此就可以將整份文件的字串全部改成新字串。</p>\n<p><img src=\"http://i.imgur.com/tkjccVA.gif\" alt=\"\"></p>\n<h3 id=\"2-_cmd_+_l_(可連按)\">2. cmd + l (可連按)</h3>\n<p>選取游標在內的一行，<code>連按l</code>的話會往下選取下面的行數。</p>\n<h3 id=\"3-_cmd_+_shift_+_l\">3. cmd + shift + l</h3>\n<p>此功能常與上述<code>cmd + l</code>配合，當選取多行後，按下<code>cmd + shift + l</code>，則會在多行的情況結尾出現游標，可以做多行編輯。<br><img src=\"http://i.imgur.com/t6Mvfof.gif\" alt=\"\"></p>\n<h3 id=\"4-_option_+_滑鼠拖拉\">4. option + 滑鼠拖拉</h3>\n<p>當按住<code>option</code>後，搭配<code>滑鼠拖拉</code>便可以一次選取多行，並且產生游標。<br><em>注意：拖曳的時候，滑鼠必須是由上到下垂直的選取狀態</em></p>\n<p><img src=\"http://i.imgur.com/4cyN5eD.gif\" alt=\"\"></p>\n<h3 id=\"5-_cmd_+_滑鼠點選\">5. cmd + 滑鼠點選</h3>\n<p>按住<code>cmd</code>後，利用滑鼠在文件內點選，便可以在任何位置新增游標，產生多選狀態做編輯。</p>\n<p><img src=\"http://i.imgur.com/ltNQcxi.gif\" alt=\"\"></p>\n<h3 id=\"6-_cmd_+_左_或_右\">6. cmd + 左 或 右</h3>\n<p>讓你的游標可以快速的回到該行的最前面或是最後面。</p>\n<p><img src=\"http://i.imgur.com/WXyhkDE.gif\" alt=\"\"></p>\n<h3 id=\"7-_shift_+_左_或_右\">7. shift + 左 或 右</h3>\n<p>每按一次會選擇一個字元，可以更加精準的選取自己要的部份。</p>\n<p><img src=\"http://i.imgur.com/yPeO2UF.gif\" alt=\"\"></p>\n<h3 id=\"8-_cmd_+_shift_+_左_或_右\">8. cmd + shift + 左 或 右</h3>\n<p>從游標所在處，往前選取或者往後選取該行到底。</p>\n<p><img src=\"http://i.imgur.com/RX0XyMh.gif\" alt=\"\"></p>\n<h2 id=\"尋找\">尋找</h2>\n<p>在sublime裡面尋找的功能做的非常強大，不論是文件內、或是文件名稱都可以快速找到。<br>底下將會利用GoTo Anything這個強大的內建功能來實作。</p>\n<h3 id=\"1-_cmd_+_p_+_輸入檔名\">1. cmd + p + 輸入檔名</h3>\n<p>利用<code>cmd + p</code>，之後等視窗出現後，即可輸入你要找的檔名，按下enter即可開啟。</p>\n<p><img src=\"http://i.imgur.com/eH0Lbiu.gif\" alt=\"\"></p>\n<h3 id=\"2-_cmd_+_p_+_“:”_+_行數\">2. cmd + p + “:” + 行數</h3>\n<p>此功能相同於<code>control + g</code>，可以快速的跳到你指定的行數。</p>\n<p><img src=\"http://i.imgur.com/cIp5SYH.gif\" alt=\"\"></p>\n<h3 id=\"3-_cmd_+_p_+_“@”_+_function_name\">3. cmd + p + “@” + function name</h3>\n<p>此功能相同於<code>cmd + r</code>，可以快速跳到定義的function<br>建議：若是知道要找function，建議使用這個而非使用<code>cmd + f</code></p>\n<p><img src=\"http://i.imgur.com/IGdokvK.gif\" alt=\"\"></p>\n<h3 id=\"4-_cmd_+_p_+_“#”_+_keyword\">4. cmd + p + “#” + keyword</h3>\n<p>此功能可以快速找到文件內的關鍵字。<br>個人比較少用這個功能，利用<code>cmd + f</code>時，可以持續按enter找到目標。</p>\n<h3 id=\"5-_cmd_+_shift_+_f\">5. cmd + shift + f</h3>\n<p>全文搜尋，可以找出「整個project」內的關鍵字。<br>在Find Result內，點選兩下，便可以跳到該文件，這是我覺得最實用的部份。</p>\n<p><img src=\"http://i.imgur.com/RYZ0GOQ.gif\" alt=\"\"></p>\n<h2 id=\"快還要更快\">快還要更快</h2>\n<h3 id=\"1-_cmd_+_control_+_上_或_下\">1. cmd + control + 上 或 下</h3>\n<p>將選取起來的行，整段往上或往下移動。<br>使用情境：當幾行code需要移動不算太大範圍的時候，可以使用這個快捷鍵，而不用剪下再貼上。</p>\n<p><img src=\"http://i.imgur.com/R3jxRrV.gif\" alt=\"\"></p>\n<h3 id=\"2-_cmd_+_/\">2. cmd + /</h3>\n<p>將該行註解。<br>個人建議：搭配<code>cmd + l(連按)</code>可以選取多行，一次註解起來。</p>\n<p><img src=\"http://i.imgur.com/B85owMN.gif\" alt=\"\"></p>\n<h2 id=\"reference\">reference</h2>\n<ol>\n<li><a href=\"https://blog.generalassemb.ly/sublime-text-3-tips-tricks-shortcuts/\" target=\"_blank\" rel=\"external\">GETTING STARTED WITH SUBLIME TEXT 3: 25 TIPS, TRICKS, AND SHORTCUTS</a></li>\n<li><a href=\"http://zh.lucida.me/blog/sublime-text-complete-guide/\" target=\"_blank\" rel=\"external\">Sublime Text 全程指南</a></li>\n</ol>\n",
      "source": "_posts/sublime-text-3-mac-指南.md",
      "raw":
        "title: Sublime Text 3 Mac 指南\ndate: 2014-10-14 15:16:59\ntags:\n- sublime text 3\n- sublime text\n---\n\n本篇是我根據自己使用習慣所做的快捷鍵整理，使用sublime text這套編輯器已經有2年之餘，本身是個快捷鍵愛好者，對於發掘好用的快捷鍵樂此不疲，因此整理常用的快捷鍵在這篇，針對的是mac使用者所使用者快捷鍵，希望對各位有幫助。\n\n<!-- more -->\n\n# 快捷鍵\n\n左邊為本篇所採用的縮寫，右邊則為鍵盤上面的標示\n\n- cmd = command\n- shift = shift\n- option = option (alt)\n- control = control\n- pkg-ctrl = package control (command + shift + p)\n\n## 基礎模式\n\n「基礎模式」介紹非sublime專用的快捷鍵，是一般使用者都可以快速上手的部分，想要看進階的可以跳過這部份。\n\n### 1. cmd + o (open)\n\n快速開啟整個資料夾(專案)\n\n### 2. cmd + w\n\n關閉視窗分頁\n\n### 3. cmd + n\n\n開新分頁\n\n### 4. cmd + shift + t\n\n重新開啟剛剛關閉的分頁\n\n### 5. cmd + shift + v\n\n貼上時，符合縮排\n\n## 畫面配置\n\n以下介紹sublime的畫面配置，常常因為編輯情境的所需，利用快捷鍵讓自己的畫面配置更加有彈性。\n\n### 1. cmd + option + 數字\n\n分割視窗，讓你的編輯範圍有多個panel。\n常用為`cmd + option + 1` 和`cmd + option + 2` 之間切換。\n使用情境：左邊.html右邊.css，編輯起來快速又方便。\n建議：利用空白鍵右邊的兩個連續按鈕搭配數字。\n\n![](http://i.imgur.com/wWrUvSA.gif)\n\n### 2. cmd + k 再 cmd + b\n\n關閉左側資料夾目錄，讓畫面變得更寬敞。\n這是我非常使用的一個快捷鍵，可以讓編輯的區域變得更大。\n\n![](http://i.imgur.com/IiAhOPx.gif)\n\n### 3. cmd + shift + control + f\n\n進入zen狀態，單份文件變成全螢幕，且左邊會自動縮排。\n使用情境：當不常需要切換檔案時，此模式可以專注在單一檔案上，打這篇blog時我便這樣使用。\n建議：快捷鍵不好記，可以點選`View --> Enter Distraction Free Mode`\n\n![zen](http://i.imgur.com/DdD24a5.png)\n\n## 選取\n\n底下介紹的部份，回到sublime text編輯器本身，因為重點在編輯部分，因此在此將「選取」特別整理成一區。\n\n### 1. cmd + d (可連按)\n\n快速選取一範圍內的字串，`連按d`的話會選取整份文件內相同的字串。\n當選取完後，可以直接打字，因此就可以將整份文件的字串全部改成新字串。\n\n![](http://i.imgur.com/tkjccVA.gif)\n\n### 2. cmd + l (可連按)\n\n選取游標在內的一行，`連按l`的話會往下選取下面的行數。\n\n### 3. cmd + shift + l \n\n此功能常與上述`cmd + l`配合，當選取多行後，按下`cmd + shift + l`，則會在多行的情況結尾出現游標，可以做多行編輯。\n![](http://i.imgur.com/t6Mvfof.gif)\n\n### 4. option + 滑鼠拖拉\n\n當按住`option`後，搭配`滑鼠拖拉`便可以一次選取多行，並且產生游標。\n*注意：拖曳的時候，滑鼠必須是由上到下垂直的選取狀態*\n\n![](http://i.imgur.com/4cyN5eD.gif)\n\n### 5. cmd + 滑鼠點選\n\n按住`cmd`後，利用滑鼠在文件內點選，便可以在任何位置新增游標，產生多選狀態做編輯。\n\n![](http://i.imgur.com/ltNQcxi.gif)\n\n### 6. cmd + 左 或 右\n\n讓你的游標可以快速的回到該行的最前面或是最後面。\n\n![](http://i.imgur.com/WXyhkDE.gif)\n\n### 7. shift + 左 或 右\n\n每按一次會選擇一個字元，可以更加精準的選取自己要的部份。\n\n![](http://i.imgur.com/yPeO2UF.gif)\n\n### 8. cmd + shift + 左 或 右\n\n從游標所在處，往前選取或者往後選取該行到底。\n\n![](http://i.imgur.com/RX0XyMh.gif)\n\n## 尋找\n\n在sublime裡面尋找的功能做的非常強大，不論是文件內、或是文件名稱都可以快速找到。\n底下將會利用GoTo Anything這個強大的內建功能來實作。\n\n### 1. cmd + p + 輸入檔名\n\n利用`cmd + p`，之後等視窗出現後，即可輸入你要找的檔名，按下enter即可開啟。\n\n![](http://i.imgur.com/eH0Lbiu.gif)\n\n### 2. cmd + p + \":\" + 行數\n\n此功能相同於`control + g`，可以快速的跳到你指定的行數。\n\n![](http://i.imgur.com/cIp5SYH.gif)\n\n### 3. cmd + p + \"@\" + function name\n\n此功能相同於`cmd + r`，可以快速跳到定義的function\n建議：若是知道要找function，建議使用這個而非使用`cmd + f`\n\n![](http://i.imgur.com/IGdokvK.gif)\n\n### 4. cmd + p + \"#\" + keyword\n\n此功能可以快速找到文件內的關鍵字。\n個人比較少用這個功能，利用`cmd + f`時，可以持續按enter找到目標。\n\n### 5. cmd + shift + f\n\n全文搜尋，可以找出「整個project」內的關鍵字。\n在Find Result內，點選兩下，便可以跳到該文件，這是我覺得最實用的部份。\n\n![](http://i.imgur.com/RYZ0GOQ.gif)\n\n## 快還要更快\n\n### 1. cmd + control + 上 或 下\n\n將選取起來的行，整段往上或往下移動。\n使用情境：當幾行code需要移動不算太大範圍的時候，可以使用這個快捷鍵，而不用剪下再貼上。\n\n![](http://i.imgur.com/R3jxRrV.gif)\n\n### 2. cmd + /\n\n將該行註解。\n個人建議：搭配`cmd + l(連按)`可以選取多行，一次註解起來。\n\n![](http://i.imgur.com/B85owMN.gif)\n\n\n## reference\n\n1. [GETTING STARTED WITH SUBLIME TEXT 3: 25 TIPS, TRICKS, AND SHORTCUTS](https://blog.generalassemb.ly/sublime-text-3-tips-tricks-shortcuts/)\n2. [Sublime Text 全程指南](http://zh.lucida.me/blog/sublime-text-complete-guide/)\n\n",
      "slug": "sublime-text-3-mac-指南",
      "updated": 1496848435000,
      "excerpt":
        "<p>本篇是我根據自己使用習慣所做的快捷鍵整理，使用sublime text這套編輯器已經有2年之餘，本身是個快捷鍵愛好者，對於發掘好用的快捷鍵樂此不疲，因此整理常用的快捷鍵在這篇，針對的是mac使用者所使用者快捷鍵，希望對各位有幫助。</p>\n",
      "_id": "3o8ydsgqek7hoa1r",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "wordpress解決permalink固定網址問題",
      "date": 1377147255000,
      "tags": ["g31nbiu89od31e6w", "h0k2oy59geohi3wn", "tkego6qbvrejl77i"],
      "content":
        "<p>本case為希望主目錄可以直接連到wordpress，但是wordpress是另外放在一個資料夾。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">主目錄：/<span class=\"keyword\">var</span>/www</div><div class=\"line\">wordpress資料夾：/<span class=\"keyword\">var</span>/www/blog</div></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<h2 id=\"一、-htaccess\">一、.htaccess</h2>\n<p>wordpress會利用.htaccess去更改固定連結，是位在根目錄，也就是<code>/var/www</code>底下，wordpress會根據你的<code>網站位置URL</code>去設定.htaccess</p>\n<p>利用終端機產生.htaccess</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">vi</span> .htaccess</div><div class=\"line\">chmod <span class=\"number\">777</span> .htaccess</div></pre></td></tr></table></figure>\n\n<h2 id=\"二、進入後台設定固定網址permalink\">二、進入後台設定固定網址permalink</h2>\n<p>這邊我選擇文章名稱的格式</p>\n<p><img src=\"http://i.imgur.com/XlEgUdT.png\" alt=\"固定網址\"></p>\n<p>因為剛剛上面有設定.htaccess權限打開到最大，因此進後台設定完，記得把chmod改為644，要注意安全性。</p>\n<h2 id=\"三、設定mod_write\">三、設定mod_write</h2>\n<p>我的wordpress是架在Amazon EC2上的ubuntu，server是apache2，因此上網搜尋相關資料，解決辦法如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">sudo</span> a2enmod rewrite</div><div class=\"line\"><span class=\"built_in\">sudo</span> /etc/init.d/apache2 restart</div></pre></td></tr></table></figure>\n\n<p>只要兩行就可以解決!</p>\n<h3 id=\"後記\"><strong><em>後記</em></strong></h3>\n<p>在解決這個問題的時候，找了很多資料，一來是不明白.htacces真正的目錄，二來是不知道ubuntu的rewrite要打開，因此在這邊記錄下來，讓有相同困擾的人可以了解。</p>\n",
      "source": "_posts/wordpress解決permalink固定網址問題.md",
      "raw":
        "title: wordpress解決permalink固定網址問題\ndate: 2013-08-22 12:54:15\ntags:\n- wordpress\n- apache2\n- htaccess\n---\n\n本case為希望主目錄可以直接連到wordpress，但是wordpress是另外放在一個資料夾。\n\n```\n主目錄：/var/www\nwordpress資料夾：/var/www/blog\n```\n\n<!-- more -->\n\n## 一、.htaccess\n\nwordpress會利用.htaccess去更改固定連結，是位在根目錄，也就是`/var/www`底下，wordpress會根據你的`網站位置URL`去設定.htaccess\n\n利用終端機產生.htaccess\n\n```\nvi .htaccess\nchmod 777 .htaccess\n```\n## 二、進入後台設定固定網址permalink\n\n這邊我選擇文章名稱的格式\n\n![固定網址](http://i.imgur.com/XlEgUdT.png)\n\n因為剛剛上面有設定.htaccess權限打開到最大，因此進後台設定完，記得把chmod改為644，要注意安全性。\n\n## 三、設定mod_write\n\n我的wordpress是架在Amazon EC2上的ubuntu，server是apache2，因此上網搜尋相關資料，解決辦法如下：\n\n```\nsudo a2enmod rewrite\nsudo /etc/init.d/apache2 restart\n```\n只要兩行就可以解決!\n\n### ***後記***\n\n在解決這個問題的時候，找了很多資料，一來是不明白.htacces真正的目錄，二來是不知道ubuntu的rewrite要打開，因此在這邊記錄下來，讓有相同困擾的人可以了解。\n",
      "slug": "wordpress解決permalink固定網址問題",
      "updated": 1496848435000,
      "excerpt":
        "<p>本case為希望主目錄可以直接連到wordpress，但是wordpress是另外放在一個資料夾。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">主目錄：/<span class=\"keyword\">var</span>/www</div><div class=\"line\">wordpress資料夾：/<span class=\"keyword\">var</span>/www/blog</div></pre></td></tr></table></figure>\n\n",
      "_id": "frtl8gxo93ldglit",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "Web好UI設計法則 2",
      "date": 1397453178000,
      "tags": ["tg9pn3ap6pjqet54", "qyjaf6d038k86y05"],
      "content":
        "<p>本文譯自<a href=\"http://www.goodui.org\" target=\"_blank\" rel=\"external\">goodui</a>，會寫這系列並非逐字翻譯，而是在研讀過後利用自己的方式表達並記錄分享之，全文圖片版權皆為goodui.org所有，此為系列第2篇。</p>\n<a id=\"more\"></a>\n<h1 id=\"6、區分已被選取和可點選區塊\">6、區分已被選取和可點選區塊</h1>\n<p>利用顏色、深度、對比來讓使用者確切的知道他們現在處於網站的哪一個地方，了解什麼地方可以點選，以便讓他們往下繼續逛他們趕興趣的頁面或內容。頁面上可見的文字區塊大致分成三種情況，分別是可以點(clickable)連結或按鈕、被選取(chosen)項目以及其他文字(plain text)。</p>\n<p>底下這張圖示指出，藍色的字代表可以點擊(clickable)，而黑色的字代表你現在正在這個項目(chosen)內，簡單清楚的表達出區分的效果。</p>\n<p><img src=\"http://goodui.org/images/idea006.png\" alt=\"idea006\"></p>\n<h1 id=\"7、試著推薦而非列出都一樣的選項\">7、試著推薦而非列出都一樣的選項</h1>\n<p>當你有多重選項的時候，有一個強調的選項或許對於使用者來說是一個不錯的刺激。</p>\n<p>在這篇<a href=\"http://www.nytimes.com/2010/02/27/your-money/27shortcuts.html?_r=1&amp;\" target=\"_blank\" rel=\"external\">心理學研究</a>指出，越少的選項可以讓使用者決定得更快，因此，試著強調某個特定的訴求吧！</p>\n<p><img src=\"http://goodui.org/images/idea007.png\" alt=\"idea007\"></p>\n<h1 id=\"8、試著用undo選項，而非確認\">8、試著用undo選項，而非確認</h1>\n<p>在你要刪除一個動作的時候，如果視窗一直跳出「您確定要刪除嗎？」的訊息，還要你多按一個按鍵才能確定刪除，是不是有點惱人？</p>\n<p>原作者提到他相信大多情況我們都不會誤按功能按鈕，有的話也是少數，因此利用重作(undo)的功能而非要使用者一直確認，如此一來能讓使用者更加有掌握感，當他們要進行大量的刪除動作，便可以提高效率，不小心誤刪的情況發生，還有重作的選項可以復原。</p>\n<p><img src=\"http://goodui.org/images/idea008.png\" alt=\"idea008\"></p>\n<h1 id=\"9、你的TA是特定族群，而非全部人\">9、你的TA是特定族群，而非全部人</h1>\n<p>這是一個決策，純看你要針對某特定的族群或是針對全部人，有利有弊是一定的。當你針對某特定族群打廣告，勢必會壓縮到其他的群眾，進而產生排他性。這種策略的風險是你可能會削減自己短期和限制潛在的客戶。</p>\n<p><img src=\"http://goodui.org/images/idea009.png\" alt=\"idea009\"></p>\n<h1 id=\"10、給明確的指示\">10、給明確的指示</h1>\n<p>給使用者明確的指示，讓他們知道點下這一個按鍵或已經滑動到這個頁面的最底端，接下來他該何去何從？千萬不要用那種「或許」、「應該」的字眼造成不確定感。要讓你的使用者知道下一步該怎麼走，至於要不要走，就交給使用者自己去決定了。</p>\n<p><img src=\"http://goodui.org/images/idea010.png\" alt=\"idea010\"></p>\n",
      "source": "_posts/web好ui設計法則-2.md",
      "raw":
        "title: Web好UI設計法則 2\ndate: 2014-04-14 13:26:18\ntags:\n- goodui\n- UI\n---\n\n本文譯自[goodui](http://www.goodui.org)，會寫這系列並非逐字翻譯，而是在研讀過後利用自己的方式表達並記錄分享之，全文圖片版權皆為goodui.org所有，此為系列第2篇。\n\n<!--more-->\n\n# 6、區分已被選取和可點選區塊\n\n利用顏色、深度、對比來讓使用者確切的知道他們現在處於網站的哪一個地方，了解什麼地方可以點選，以便讓他們往下繼續逛他們趕興趣的頁面或內容。頁面上可見的文字區塊大致分成三種情況，分別是可以點(clickable)連結或按鈕、被選取(chosen)項目以及其他文字(plain text)。\n\n底下這張圖示指出，藍色的字代表可以點擊(clickable)，而黑色的字代表你現在正在這個項目(chosen)內，簡單清楚的表達出區分的效果。\n\n![idea006](http://goodui.org/images/idea006.png)\n\n# 7、試著推薦而非列出都一樣的選項\n\n當你有多重選項的時候，有一個強調的選項或許對於使用者來說是一個不錯的刺激。\n\n在這篇[心理學研究](http://www.nytimes.com/2010/02/27/your-money/27shortcuts.html?_r=1&)指出，越少的選項可以讓使用者決定得更快，因此，試著強調某個特定的訴求吧！\n\n![idea007](http://goodui.org/images/idea007.png)\n\n# 8、試著用undo選項，而非確認\n\n在你要刪除一個動作的時候，如果視窗一直跳出「您確定要刪除嗎？」的訊息，還要你多按一個按鍵才能確定刪除，是不是有點惱人？\n\n原作者提到他相信大多情況我們都不會誤按功能按鈕，有的話也是少數，因此利用重作(undo)的功能而非要使用者一直確認，如此一來能讓使用者更加有掌握感，當他們要進行大量的刪除動作，便可以提高效率，不小心誤刪的情況發生，還有重作的選項可以復原。\n\n![idea008](http://goodui.org/images/idea008.png)\n\n# 9、你的TA是特定族群，而非全部人\n\n這是一個決策，純看你要針對某特定的族群或是針對全部人，有利有弊是一定的。當你針對某特定族群打廣告，勢必會壓縮到其他的群眾，進而產生排他性。這種策略的風險是你可能會削減自己短期和限制潛在的客戶。\n\n![idea009](http://goodui.org/images/idea009.png)\n\n\n# 10、給明確的指示\n\n給使用者明確的指示，讓他們知道點下這一個按鍵或已經滑動到這個頁面的最底端，接下來他該何去何從？千萬不要用那種「或許」、「應該」的字眼造成不確定感。要讓你的使用者知道下一步該怎麼走，至於要不要走，就交給使用者自己去決定了。\n\n![idea010](http://goodui.org/images/idea010.png)\n\n\n",
      "slug": "web好ui設計法則-2",
      "updated": 1496848435000,
      "excerpt":
        "<p>本文譯自<a href=\"http://www.goodui.org\" target=\"_blank\" rel=\"external\">goodui</a>，會寫這系列並非逐字翻譯，而是在研讀過後利用自己的方式表達並記錄分享之，全文圖片版權皆為goodui.org所有，此為系列第2篇。</p>\n",
      "_id": "0kd5j6xueym1uso0",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "利用pseudo element 讓html更簡潔",
      "date": 1367897296000,
      "tags": ["lb9ysu4zbhwbmj88", "q3d9p74ytmbx1wif", "m2xl2ukrwhpvqmkk"],
      "content":
        "<p>趁著記憶猶新的狀況，記錄自己使用偽元素 (pseudo-element)讓原本的html架構更加簡潔的方法。</p>\n<a id=\"more\"></a> \n<h2 id=\"何謂pseudo-element?\">何謂pseudo-element?</h2>\n<p>不會出現在html的文件裡面，而是利用css讓瀏覽器去實作。以下列出的都是可以使用的pseudo-element。</p>\n<ol>\n<li>::first-line：若是p元素，則可以用來操作第一行。</li>\n<li>::first-letter：用來操作第一個字。</li>\n<li>::before：可以在所選元素之前插入樣式/內容。</li>\n<li>::after：同<code>before</code>但是是在之後插入。</li>\n<li>::selection：用來自定反白後的效果。</li>\n</ol>\n<blockquote>\n<p>為了區分偽元素和偽類，CSS3 的 guildline 將偽元素的寫法修正，以往只要加一個冒號「:」，現在則是加兩個冒號「::」，部分可支援的瀏覽器包含 webkit, firefox, opera。)<br>– by <a href=\"http://www.mukispace.com/pseudo-elements-10-examples/\" target=\"_blank\" rel=\"external\">MUKI</a></p>\n</blockquote>\n<h2 id=\"修改過程\">修改過程</h2>\n<h3 id=\"原本的html_code\">原本的html code</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"icon\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">img</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"img/icon01.png\"</span> <span class=\"attribute\">alt</span>=<span class=\"value\">\"正確觀念\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>正確觀念<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><figcaption><span>scss</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">.icon</span>{</div><div class=\"line\">\t<span class=\"attribute\">display</span><span class=\"value\">: inline-block;</span></div><div class=\"line\">\t<span class=\"attribute\">position</span><span class=\"value\">: relative;</span></div><div class=\"line\">\t<span class=\"attribute\">padding</span><span class=\"value\">: <span class=\"number\">1em</span>;</span></div><div class=\"line\">\t<span class=\"attribute\">padding-top</span><span class=\"value\">: <span class=\"number\">5px</span>;</span></div><div class=\"line\">\t<span class=\"tag\">span</span>{</div><div class=\"line\">\t\t<span class=\"attribute\">position</span><span class=\"value\">: absolute;</span></div><div class=\"line\">\t\t<span class=\"attribute\">bottom</span><span class=\"value\">: -<span class=\"number\">7px</span>;</span></div><div class=\"line\">\t\t<span class=\"attribute\">left</span><span class=\"value\">: <span class=\"number\">12px</span>;</span></div><div class=\"line\">\t}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>原本利用div &gt; span 的效果去把中文字顯現出來，所以在html的架構下，需要多一個<code>span</code>的tag。<br>且利用<code>img</code>去把圖片給show出來。</p>\n<h3 id=\"更改過後的html_code\">更改過後的html code</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">data-text</span>=<span class=\"value\">\"正確觀念\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"concept_label icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span> <span class=\"comment\">&lt;!-- html只剩一行！--&gt;</span></div></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight\"><figcaption><span>scss</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">.icon</span>{</div><div class=\"line\">\t<span class=\"attribute\">display</span><span class=\"value\">: inline-block;</span></div><div class=\"line\">\t<span class=\"attribute\">position</span><span class=\"value\">: relative;</span></div><div class=\"line\">\t<span class=\"attribute\">padding</span><span class=\"value\">: <span class=\"number\">1em</span>;</span></div><div class=\"line\">\t<span class=\"attribute\">padding-top</span><span class=\"value\">: <span class=\"number\">5px</span>;</span></div><div class=\"line\"></div><div class=\"line\">\t&amp;<span class=\"pseudo\">:before</span>{</div><div class=\"line\">\t\t<span class=\"attribute\">position</span><span class=\"value\">: absolute;</span></div><div class=\"line\">\t\t<span class=\"attribute\">bottom</span><span class=\"value\">: -<span class=\"number\">7px</span>;</span></div><div class=\"line\">\t\t<span class=\"attribute\">left</span><span class=\"value\">: <span class=\"number\">12px</span>;</span></div><div class=\"line\">\t\t<span class=\"attribute\">content</span><span class=\"value\">: <span class=\"function\">attr</span>(data-text);</span> &lt;!-- 關鍵作法 --&gt;</div><div class=\"line\">\t}</div><div class=\"line\">}</div><div class=\"line\"><span class=\"class\">.concept_label</span>{</div><div class=\"line\">\t<span class=\"attribute\">background-image</span><span class=\"value\">: <span class=\"function\">url</span>(../img/icon01_c.png);</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>###觀念整理</p>\n<ol>\n<li>將中文字放入自訂的<code>data-*</code>屬性</li>\n<li>CSS中利用<code>::before</code>取代原本的<code>span</code></li>\n<li>利用<code>content: attr(data-text);</code>將date-text文字取出來</li>\n<li>將背景圖片利用另外一個class取代，以後維護性提高。</li>\n</ol>\n<h3 id=\"reference\"><em>reference</em></h3>\n<p><a href=\"http://www.mukispace.com/pseudo-elements-10-examples/\" target=\"_blank\" rel=\"external\">那些 CSS 偽元素可以幫你做的 10 個效果</a></p>\n",
      "source": "_posts/利用-pseudo-element-讓-html-更簡潔.md",
      "raw":
        "title: 利用pseudo element 讓html更簡潔\ndate: 2013-05-07 11:28:16\ntags: \n- code\n- css\n- html\n---\n\n趁著記憶猶新的狀況，記錄自己使用偽元素 (pseudo-element)讓原本的html架構更加簡潔的方法。\n\n<!-- more --> \n\n## 何謂pseudo-element?\n\n不會出現在html的文件裡面，而是利用css讓瀏覽器去實作。以下列出的都是可以使用的pseudo-element。\n\n1. ::first-line：若是p元素，則可以用來操作第一行。\n2. ::first-letter：用來操作第一個字。\n3. ::before：可以在所選元素之前插入樣式/內容。\n4. ::after：同`before`但是是在之後插入。\n5. ::selection：用來自定反白後的效果。\n\n> 為了區分偽元素和偽類，CSS3 的 guildline 將偽元素的寫法修正，以往只要加一個冒號「:」，現在則是加兩個冒號「::」，部分可支援的瀏覽器包含 webkit, firefox, opera。) \n> -- by [MUKI](http://www.mukispace.com/pseudo-elements-10-examples/)\n\n## 修改過程\n\n### 原本的html code\n\n{% codeblock %}\n<div class=\"icon\">\n\t<img src=\"img/icon01.png\" alt=\"正確觀念\">\n\t<span>正確觀念</span>\n</div>\n{% endcodeblock %}\n\n{% codeblock scss %}\n.icon{\n\tdisplay: inline-block;\n\tposition: relative;\n\tpadding: 1em;\n\tpadding-top: 5px;\n\tspan{\n\t\tposition: absolute;\n\t\tbottom: -7px;\n\t\tleft: 12px;\n\t}\n}\n{% endcodeblock %}\n\n原本利用div > span 的效果去把中文字顯現出來，所以在html的架構下，需要多一個`span`的tag。   \n且利用`img`去把圖片給show出來。\n\n### 更改過後的html code\n\n{% codeblock %}\n<div data-text=\"正確觀念\" class=\"concept_label icon\"></div> <!-- html只剩一行！-->\n{% endcodeblock %}\n\n\n{% codeblock scss %}\n.icon{\n\tdisplay: inline-block;\n\tposition: relative;\n\tpadding: 1em;\n\tpadding-top: 5px;\n\n\t&:before{\n\t\tposition: absolute;\n\t\tbottom: -7px;\n\t\tleft: 12px;\n\t\tcontent: attr(data-text); <!-- 關鍵作法 -->\n\t}\n}\n.concept_label{\n\tbackground-image: url(../img/icon01_c.png);\n}\n{% endcodeblock %}\n\n###觀念整理\n\n1. 將中文字放入自訂的`data-*`屬性\n2. CSS中利用`::before`取代原本的`span`\n3. 利用`content: attr(data-text);`將date-text文字取出來\n4. 將背景圖片利用另外一個class取代，以後維護性提高。\n\n### *reference*\n[那些 CSS 偽元素可以幫你做的 10 個效果](http://www.mukispace.com/pseudo-elements-10-examples/)\n\n",
      "slug": "利用-pseudo-element-讓-html-更簡潔",
      "updated": 1496848435000,
      "excerpt":
        "<p>趁著記憶猶新的狀況，記錄自己使用偽元素 (pseudo-element)讓原本的html架構更加簡潔的方法。</p>\n",
      "_id": "v60kc6kvfkjq9774",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "在hexo自訂rss",
      "date": 1367999406000,
      "tags": ["rfborlcfi2cb0due", "swfap7j4lack6rte"],
      "content":
        "<p>趁著好朋友在旁邊的情況下，請教他學會了在hexo自訂rss，再次感受到技術這種東西，真的是當面交流才會發揮他的效益。</p>\n<a id=\"more\"></a>\n<h3 id=\"一、本機環境\">一、本機環境</h3>\n<p>在終端機下輸入以下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> hexo-generator-feed <span class=\"comment\">--save</span></span></div></pre></td></tr></table></figure>\n\n<p>權限沒有取得的記得前面加上<code>sudo</code>。</p>\n<h3 id=\"二、修改_config-yml\">二、修改_config.yml</h3>\n<p>在主目錄底下的<code>_config.yml</code>檔加上</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugin<span class=\"variable\">s:</span></div><div class=\"line\">- hexo-generator-feed</div></pre></td></tr></table></figure>\n\n<p><img src=\"http://i.imgur.com/w39zkK6.png\" alt=\"modify _config.yml\" title=\"modify _config.yml\"></p>\n<p>如此一來便完成了環境設置。</p>\n<h3 id=\"三、要怎樣找到？\">三、要怎樣找到？</h3>\n<p>在hexo generate之後，會發現public資料夾底下多了atom.xml<br>在<a href=\"http://www.feedly.com/\" target=\"_blank\" rel=\"external\">feedly</a>這類的閱讀收集器<br>只要輸入<code>domain/atom</code>就可以找到<br>例如要訂閱我的blog只要輸入<code>code.kpman.cc/atom</code>就可以搜尋到囉！</p>\n<p><img src=\"http://i.imgur.com/Hk12y1N.png\" alt=\"rss\" title=\"feedly rss search\"></p>\n<p>突然發現我的blog只有一個人訂閱，那個人就是我自己…  </p>\n<h3 id=\"reference\"><em>reference</em></h3>\n<ol>\n<li><a href=\"https://github.com/tommy351/hexo/wiki/Plugins\" target=\"_blank\" rel=\"external\">hexo plugins</a></li>\n<li><a href=\"http://michaelhsu.tw/2013/05/05/rssatom-sitemap-for-seo/\" target=\"_blank\" rel=\"external\">RSS/Atom、Sitemap for SEO</a></li>\n</ol>\n<p>感謝強者阿志耐心面授機宜:)</p>\n",
      "source": "_posts/在hexo自訂rss.md",
      "raw":
        "title: 在hexo自訂rss\ndate: 2013-05-08 15:50:06\ntags:\n- rss\n- hexo\n---\n\n趁著好朋友在旁邊的情況下，請教他學會了在hexo自訂rss，再次感受到技術這種東西，真的是當面交流才會發揮他的效益。\n\n<!-- more -->\n\n### 一、本機環境\n\n在終端機下輸入以下\n\n{% codeblock %}\nnpm install hexo-generator-feed --save\n{% endcodeblock %}\n\n權限沒有取得的記得前面加上`sudo`。\n\n### 二、修改_config.yml\n\n在主目錄底下的`_config.yml`檔加上\n\n{% codeblock %}\nplugins:\n- hexo-generator-feed\n{% endcodeblock %}\n\n![modify _config.yml](http://i.imgur.com/w39zkK6.png \"modify _config.yml\")\n\n如此一來便完成了環境設置。\n\n### 三、要怎樣找到？\n\n在hexo generate之後，會發現public資料夾底下多了atom.xml   \n在[feedly](http://www.feedly.com/)這類的閱讀收集器   \n只要輸入`domain/atom`就可以找到   \n例如要訂閱我的blog只要輸入`code.kpman.cc/atom`就可以搜尋到囉！\n\n![rss](http://i.imgur.com/Hk12y1N.png \"feedly rss search\")\n\n突然發現我的blog只有一個人訂閱，那個人就是我自己...  \n\n### *reference*\n\n1. [hexo plugins](https://github.com/tommy351/hexo/wiki/Plugins)\n2. [RSS/Atom、Sitemap for SEO](http://michaelhsu.tw/2013/05/05/rssatom-sitemap-for-seo/)\n\n感謝強者阿志耐心面授機宜:)\n\n\n",
      "slug": "在hexo自訂rss",
      "updated": 1496848435000,
      "excerpt":
        "<p>趁著好朋友在旁邊的情況下，請教他學會了在hexo自訂rss，再次感受到技術這種東西，真的是當面交流才會發揮他的效益。</p>\n",
      "_id": "irmumunmsl2kiyuo",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "客製化hexo light theme",
      "date": 1367154577000,
      "tags": ["swfap7j4lack6rte", "hsbp1fsewfx23pdl"],
      "content":
        "<p>分享一些目前知道的客製化theme技巧。<br>其實非常簡單，但是這些技巧如果沒有問過或是自己看過文件，<br>一時間也無法摸透，所以覺得應該值得把它記錄下來。</p>\n<a id=\"more\"></a>\n<h3 id=\"一、增加Disqus留言板\">一、增加Disqus留言板</h3>\n<ul>\n<li>到<a href=\"http://disqus.com/\" target=\"_blank\" rel=\"external\">Disqus</a>申請帳號</li>\n<li>右上角的Dashboard <code>+Add</code> 申請一個新的帳號</li>\n<li>將網址、name、shortname打好後，要把 <code>shortname</code> 記住！<ul>\n<li>修改本機目錄下的 <code>_confid.yml</code></li>\n<li>在 <code>disqus_shortname</code> 貼上自己的shortname</li>\n</ul>\n</li>\n</ul>\n<p>完成～</p>\n<p>※ 後記：<br>若你在申請完disqus貼到自己的blog上面，發現出現很多不必要的連結，請到disqus的dashboard去修改。<br>右上方 <code>Setting</code> -&gt; <code>Discovery</code> -&gt; 將Discovery level拉到最右邊，如下圖<br><img src=\"http://i.imgur.com/eeEjwka.png\" alt=\"Discovery level\"></p>\n<h3 id=\"二、增加右方側欄widget\">二、增加右方側欄widget</h3>\n<p>在標題就已經破梗囉XD<br>右方出現那些『Tag』『Tag Cloud』等欄位，其實就是修改widget過後得到的結果。<br>方法如下：</p>\n<ul>\n<li>找到 <code>theme/light/layout/_widget</code> ，可以發現很多 <strong>ejs</strong> 檔</li>\n<li>有些是已經自訂好了，例如 <code>category</code> <code>recent_posts</code> 等</li>\n<li>在 <code>theme/light/_config.yml</code> 內，修改<strong>widgets</strong>，在底下新增你要的ejs檔名即可～</li>\n</ul>\n<p>同樣方法可以自己寫ejs檔，一樣在<code>theme/light/_config.yml</code>加上檔名就可以自訂。</p>\n<h3 id=\"三、增加上方自訂全域導覽列\">三、增加上方自訂全域導覽列</h3>\n<p>預設為Home、Archives這兩個<br>當然得要自訂才爽XD</p>\n<p>方法一樣很簡單如下：</p>\n<ul>\n<li>找到<code>theme/light/_config.yml</code>裡面的第一行</li>\n<li>預設狀況應該只有Home&amp;Archives<br> <img src=\"http://i.imgur.com/reKRQw4.png\" alt=\"menu\"></li>\n<li>自訂自己的menu，項目後面即為<strong>連結</strong>，可以直接使用<code>http://google.com</code>之類的連結。</li>\n</ul>\n<h3 id=\"四、自訂favicon\">四、自訂favicon</h3>\n<ul>\n<li>首先你要有一個favicon.ico檔或是.png檔(這邊預設檔名為<code>favicon.png</code>)</li>\n<li>將檔案放在 <code>主目錄/source</code> 底下<br> <img src=\"http://i.imgur.com/Aar4ap9.png\" alt=\"favicon path\"></li>\n<li>找到 <code>theme/light/layout/_partial/head.ejs</code>做修改</li>\n<li>在裡面加上head.ejs檔內確認有以下這行code即可擁有自己的favicon  </li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link <span class=\"variable\">href=</span><span class=\"string\">\"&lt;%- config.root %&gt;favicon.png\"</span> <span class=\"variable\">rel=</span><span class=\"string\">\"icon\"</span>&gt;</div></pre></td></tr></table></figure>\n\n<p>以上介紹一些目前知道的自訂方法，<br>希望還有人可以跟我多介紹一些技巧，一起分享吧！</p>\n",
      "source": "_posts/客製化hexo-light-theme.md",
      "raw":
        "title: 客製化hexo light theme\ndate: 2013-04-28 21:09:37\ntags:\n- hexo\n- theme\n---\n\n分享一些目前知道的客製化theme技巧。   \n其實非常簡單，但是這些技巧如果沒有問過或是自己看過文件，   \n一時間也無法摸透，所以覺得應該值得把它記錄下來。\n\n<!-- more -->\n\n### 一、增加Disqus留言板 ##########\n\n* 到[Disqus](http://disqus.com/)申請帳號\n* 右上角的Dashboard `+Add` 申請一個新的帳號\n* 將網址、name、shortname打好後，要把 `shortname` 記住！\n\t* 修改本機目錄下的 `_confid.yml`\n\t* 在 `disqus_shortname` 貼上自己的shortname\n\n完成～\n\n※ 後記：   \n若你在申請完disqus貼到自己的blog上面，發現出現很多不必要的連結，請到disqus的dashboard去修改。   \n右上方 `Setting` -> `Discovery` -> 將Discovery level拉到最右邊，如下圖   \n![Discovery level](http://i.imgur.com/eeEjwka.png)\n\n### 二、增加右方側欄widget ##########\n\n在標題就已經破梗囉XD   \n右方出現那些『Tag』『Tag Cloud』等欄位，其實就是修改widget過後得到的結果。   \n方法如下：\n\n* 找到 `theme/light/layout/_widget` ，可以發現很多 **ejs** 檔\n* 有些是已經自訂好了，例如 `category` `recent_posts` 等\n* 在 `theme/light/_config.yml` 內，修改**widgets**，在底下新增你要的ejs檔名即可～\n\n同樣方法可以自己寫ejs檔，一樣在`theme/light/_config.yml`加上檔名就可以自訂。\n\n### 三、增加上方自訂全域導覽列 ##########\n\n預設為Home、Archives這兩個   \n當然得要自訂才爽XD\n\n方法一樣很簡單如下：\n\n* 找到`theme/light/_config.yml`裡面的第一行\n* 預設狀況應該只有Home&Archives   \n   ![menu](http://i.imgur.com/reKRQw4.png)\n* 自訂自己的menu，項目後面即為**連結**，可以直接使用`http://google.com`之類的連結。\n\n### 四、自訂favicon ##########\n\n* 首先你要有一個favicon.ico檔或是.png檔(這邊預設檔名為`favicon.png`)\n* 將檔案放在 `主目錄/source` 底下   \n   ![favicon path](http://i.imgur.com/Aar4ap9.png)\n* 找到 `theme/light/layout/_partial/head.ejs`做修改\n* 在裡面加上head.ejs檔內確認有以下這行code即可擁有自己的favicon  \n ```\n <link href=\"<%- config.root %>favicon.png\" rel=\"icon\">\n ```\n\n以上介紹一些目前知道的自訂方法，   \n希望還有人可以跟我多介紹一些技巧，一起分享吧！\n",
      "slug": "客製化hexo-light-theme",
      "updated": 1496848435000,
      "excerpt":
        "<p>分享一些目前知道的客製化theme技巧。<br>其實非常簡單，但是這些技巧如果沒有問過或是自己看過文件，<br>一時間也無法摸透，所以覺得應該值得把它記錄下來。</p>\n",
      "_id": "pk5zcivmsoyoof9m",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "建立自己blog的subdomain",
      "date": 1366993476000,
      "tags": [
        "mrnvdrdqisitzwl6",
        "swfap7j4lack6rte",
        "o1spi99koun3v2b3",
        "xa734cbzr8u7irel"
      ],
      "content":
        "<p>有鑑於 <code>kpman.github.io</code> 這一個網址實在太難記了，所以就決定將自己有的domain利用subdomain的方式指過來。<br>以下的介紹是我的個案，我利用subdomain而非TLD去做。</p>\n<a id=\"more\"></a>\n<h2 id=\"一、擁有自己的domain\">一、擁有自己的domain</h2>\n<p>雖然像是廢話XD<br>但這邊推薦去<a href=\"www.godaddy.com/\">GoDaddy</a>買domain.<br>方便又快，在更新domain的時間非常快速，理論上一個小時內就可以指到你要的ip位置。</p>\n<h2 id=\"二、到GoDaddy設定subdomain\">二、到GoDaddy設定subdomain</h2>\n<ol>\n<li>進到DNS manager</li>\n<li><p>新增一筆CNAME</p>\n<p><img src=\"http://i.imgur.com/esdG2wP.png\" alt=\"CNAME\"></p>\n</li>\n<li><p>GoDaddy部分完成</p>\n</li>\n</ol>\n<h2 id=\"三、在本機端設置CNAME檔\">三、在本機端設置CNAME檔</h2>\n<p>這邊要在 <code>主目錄-source</code> 底下放一個檔名為 <code>CNAME</code> 的檔案<br>裡面為你要指向的路徑，這邊我是指向 <code>http://code.kpman.cc</code></p>\n<p><img src=\"http://i.imgur.com/gyMS7U6.png\" alt=\"path\"></p>\n<p>至於如何設置CNAME檔案，我是利用在github repo上面的create new file</p>\n<p><img src=\"http://i.imgur.com/AHcVLBW.png\" alt=\"create new file\"></p>\n<p>設置完之後clone下來，然後複製進去<code>主目錄-source</code> 底下XD<br>（有人知道怎樣做比較好嗎？）</p>\n<p>理論上這樣子就完成囉！<br>如果有漏掉的麻煩留言給我一起討論:)</p>\n<h3 id=\"reference\"><em>reference</em></h3>\n<p><a href=\"https://help.github.com/articles/setting-up-a-custom-domain-with-pages\" target=\"_blank\" rel=\"external\">官方文件</a></p>\n",
      "source": "_posts/建立自己blog的subdomain.md",
      "raw":
        "title: 建立自己blog的subdomain\ndate: 2013-04-27 00:24:36\ntags:\n- domain\n- hexo\n- subdomain\n- url\n---\n\n有鑑於 `kpman.github.io` 這一個網址實在太難記了，所以就決定將自己有的domain利用subdomain的方式指過來。   \n以下的介紹是我的個案，我利用subdomain而非TLD去做。\n\n<!-- more -->\n\n## 一、擁有自己的domain\n\n雖然像是廢話XD\n但這邊推薦去[GoDaddy](www.godaddy.com/)買domain.   \n方便又快，在更新domain的時間非常快速，理論上一個小時內就可以指到你要的ip位置。\n\n## 二、到GoDaddy設定subdomain\n\n1. 進到DNS manager\n2. 新增一筆CNAME\n   \n   ![CNAME](http://i.imgur.com/esdG2wP.png)\n\n3. GoDaddy部分完成\n\n## 三、在本機端設置CNAME檔\n\n這邊要在 `主目錄-source` 底下放一個檔名為 `CNAME` 的檔案   \n裡面為你要指向的路徑，這邊我是指向 `http://code.kpman.cc`\n\n![path](http://i.imgur.com/gyMS7U6.png)\n\n至於如何設置CNAME檔案，我是利用在github repo上面的create new file\n\n![create new file](http://i.imgur.com/AHcVLBW.png)\n\n設置完之後clone下來，然後複製進去`主目錄-source` 底下XD   \n（有人知道怎樣做比較好嗎？）\n\n理論上這樣子就完成囉！   \n如果有漏掉的麻煩留言給我一起討論:)\n\n### *reference*\n\n[官方文件](https://help.github.com/articles/setting-up-a-custom-domain-with-pages)\n\n",
      "slug": "建立自己blog的subdomain",
      "updated": 1496848435000,
      "excerpt":
        "<p>有鑑於 <code>kpman.github.io</code> 這一個網址實在太難記了，所以就決定將自己有的domain利用subdomain的方式指過來。<br>以下的介紹是我的個案，我利用subdomain而非TLD去做。</p>\n",
      "_id": "fe8d5oj2q55zpubm",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "建立自己的GitHub Project Pages",
      "date": 1368806643000,
      "tags": ["v46a3uc2e80dnej6"],
      "content":
        "<p>在GitHub使用上，我算是初新者，有疑問才有進步。每當看到有人把好玩的東西放到GitHub上面變成靜態頁面，都會很想知道他是怎樣辦到的。結果不難，就是利用GitHub Pages來做到。</p>\n<a id=\"more\"></a>\n<h2 id=\"GitHub_Pages_介紹\">GitHub Pages 介紹</h2>\n<p>當你要有一個自己的GitHub Pages，其實分成兩項。   </p>\n<ol>\n<li>repo的名字為<code>yourname.github.com</code>，則會產生的page路徑為 <code>yourname.github.io</code>。<a href=\"http://kpman.github.io\" target=\"_blank\" rel=\"external\">本部落格</a>是建立在github上面，就是利用這一個GitHub Pages模式去建立，可以參考<a href=\"http://code.kpman.cc/2013/04/26/hexo%E6%9E%B6blog%E5%88%9D%E9%AB%94%E9%A9%97/\" target=\"_blank\" rel=\"external\">hexo架blog初體驗</a>、<a href=\"http://code.kpman.cc/2013/04/27/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1blog%E7%9A%84subdomain/\" target=\"_blank\" rel=\"external\">建立自己blog的subdomain</a>這兩篇文章。</li>\n<li>repo的名字為<code>repo-name</code>，則會產生的page路徑為 <code>yourname.github.io/repo-name</code>，這邊的repo name就不像第一種模式，沒有固定名稱。</li>\n</ol>\n<h2 id=\"GitHub_Pages_建立\">GitHub Pages 建立</h2>\n<p>在每一個新的repo下面，正常的情況都是在mater這一個branch。分享一下我自己的作法。</p>\n<ol>\n<li><p>GitHub頁面上建立一個新的repo，這邊我取名為first-repo。</p>\n<p><img src=\"http://i.imgur.com/6mFqQlc.png\" alt=\"create new repo\" title=\"new repo\"></p>\n</li>\n<li><p>從本機端clone下來，參照自己的路徑，我的repo則是在command line底下打   </p>\n</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> clone git<span class=\"variable\">@github</span>.com:kpman/first-repo.git</div></pre></td></tr></table></figure>\n\n<ol>\n<li>移到該資料夾</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> <span class=\"keyword\">first</span>-repo</div></pre></td></tr></table></figure>\n\n<ol>\n<li>將branch移到<code>gh-pages</code>，這步驟很重要，Github Pages就是看這一個branch去決定頁面的。</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> branch gh-pages</div><div class=\"line\">git checkout gh-pages</div></pre></td></tr></table></figure>\n\n<p>或者   </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout --orphan gh-pages <span class=\"comment\">//建立一個沒有parent的branch，並移到該branch上</span></div></pre></td></tr></table></figure>\n\n<ol>\n<li>將編輯好的檔案push上去。</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">add</span> .</div><div class=\"line\">git commit</div><div class=\"line\">git <span class=\"keyword\">push</span> origin gh-pages</div></pre></td></tr></table></figure>\n\n<ol>\n<li>完成！</li>\n</ol>\n<h2 id=\"路徑差異\">路徑差異</h2>\n<p><a href=\"http://github.com/kpman/liteAccordion\" target=\"_blank\" rel=\"external\">http://github.com/kpman/liteAccordion</a>這樣代表連回GitHub的code頁面<br><a href=\"http://kpman.github.io/liteAccordion\" target=\"_blank\" rel=\"external\">http://kpman.github.io/liteAccordion</a>因為新增到<code>gh-pages</code>這一個branch，所以可以看到靜態的html展示頁面。</p>\n<p>其他範例<br><a href=\"http://jonobr1.github.io/two.js/\" target=\"_blank\" rel=\"external\">two.js</a><br><a href=\"http://jschr.github.io/textillate/\" target=\"_blank\" rel=\"external\">textillate</a></p>\n<h3 id=\"reference\"><em>reference</em></h3>\n<ol>\n<li><a href=\"https://help.github.com/articles/creating-project-pages-manually\" target=\"_blank\" rel=\"external\">官方文件</a></li>\n<li><a href=\"http://xlson.com/2010/11/09/getting-started-with-github-pages.html\" target=\"_blank\" rel=\"external\">Getting started with GitHub Pages</a></li>\n<li><a href=\"https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches\" target=\"_blank\" rel=\"external\">Create a new branch with git and manage branches</a></li>\n</ol>\n",
      "source": "_posts/建立自己的github-project-pages.md",
      "raw":
        "title: 建立自己的GitHub Project Pages\ndate: 2013-05-18 00:04:03\ntags:\n- github\n---\n\n在GitHub使用上，我算是初新者，有疑問才有進步。每當看到有人把好玩的東西放到GitHub上面變成靜態頁面，都會很想知道他是怎樣辦到的。結果不難，就是利用GitHub Pages來做到。\n\n<!-- more -->\n\n## GitHub Pages 介紹\n\n當你要有一個自己的GitHub Pages，其實分成兩項。   \n\n1. repo的名字為`yourname.github.com`，則會產生的page路徑為 `yourname.github.io`。[本部落格](http://kpman.github.io)是建立在github上面，就是利用這一個GitHub Pages模式去建立，可以參考[hexo架blog初體驗](http://code.kpman.cc/2013/04/26/hexo%E6%9E%B6blog%E5%88%9D%E9%AB%94%E9%A9%97/)、[建立自己blog的subdomain](http://code.kpman.cc/2013/04/27/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1blog%E7%9A%84subdomain/)這兩篇文章。\n2. repo的名字為`repo-name`，則會產生的page路徑為 `yourname.github.io/repo-name`，這邊的repo name就不像第一種模式，沒有固定名稱。\n\n## GitHub Pages 建立\n\n在每一個新的repo下面，正常的情況都是在mater這一個branch。分享一下我自己的作法。\n\n1. GitHub頁面上建立一個新的repo，這邊我取名為first-repo。\n\n  ![create new repo](http://i.imgur.com/6mFqQlc.png \"new repo\")\n\n2. 從本機端clone下來，參照自己的路徑，我的repo則是在command line底下打   \n```\ngit clone git@github.com:kpman/first-repo.git\n```\n\n3. 移到該資料夾\n```\ncd first-repo\n```\n\n4. 將branch移到`gh-pages`，這步驟很重要，Github Pages就是看這一個branch去決定頁面的。\n```\ngit branch gh-pages\ngit checkout gh-pages\n```\n或者   \n```\ngit checkout --orphan gh-pages //建立一個沒有parent的branch，並移到該branch上\n```\n\n5. 將編輯好的檔案push上去。\n```\ngit add .\ngit commit\ngit push origin gh-pages\n```\n\n6. 完成！\n\n## 路徑差異\n\n[http://github.com/kpman/liteAccordion](http://github.com/kpman/liteAccordion)這樣代表連回GitHub的code頁面   \n[http://kpman.github.io/liteAccordion](http://kpman.github.io/liteAccordion)因為新增到`gh-pages`這一個branch，所以可以看到靜態的html展示頁面。\n\n其他範例   \n[two.js](http://jonobr1.github.io/two.js/)   \n[textillate](http://jschr.github.io/textillate/)\n\n### *reference*\n\n1. [官方文件](https://help.github.com/articles/creating-project-pages-manually)\n2. [Getting started with GitHub Pages](http://xlson.com/2010/11/09/getting-started-with-github-pages.html)\n3. [Create a new branch with git and manage branches](https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches)\n",
      "slug": "建立自己的github-project-pages",
      "updated": 1496848435000,
      "excerpt":
        "<p>在GitHub使用上，我算是初新者，有疑問才有進步。每當看到有人把好玩的東西放到GitHub上面變成靜態頁面，都會很想知道他是怎樣辦到的。結果不難，就是利用GitHub Pages來做到。</p>\n",
      "_id": "5rdejt3usc6gexm2",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "為你的mac終端機加上alias",
      "date": 1397525737000,
      "tags": ["2zeqrnepl19dkknk", "wyfpdd08p7ksndsu", "3aovg6atm6nnd1eg"],
      "content":
        "<p>在使用iTerm（終端機）一段時間後，總覺得每次開啟新分頁，要進入到一個很深的資料夾略顯麻煩，因此上網查了簡易的方法，很快速便可以讓自己少打很多code，把時間花在其他更重要事情上。</p>\n<p><img src=\"http://i.imgur.com/Cc5u0nY.png\" alt=\"iterm2\"></p>\n<a id=\"more\"></a>\n<h2 id=\"alias\">alias</h2>\n<p>顧名思義就是別名，其語法如下，舉mac的apache server所在為example:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">alias</span> goproject=<span class=\"attribute\">'cd</span> /<span class=\"keyword\">Library</span>/WebServer/Documents/yourproject'</div></pre></td></tr></table></figure>\n\n<p>因此在iTerm打上這串後，未來便可以使用<code>goproject</code> 直接執行後面那串，快速又方便。</p>\n<h2 id=\"永久執行alias\">永久執行alias</h2>\n<p>在設定完alias，原本以為就這樣，結果發現如果重開iTerm後，之前設定的alias都不見了，原因是因為沒有真正寫入bash檔，因此在開啟iTerm的時候，並沒有被載入，所以我們要將</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim <span class=\"regexp\">/etc/</span>bashrc</div><div class=\"line\"><span class=\"comment\">// 在bashrc檔裡面加上新的一行</span></div><div class=\"line\">alias goproject=<span class=\"string\">'cd /Library/WebServer/Documents/yourproject'</span></div></pre></td></tr></table></figure>\n\n<p><em>ps. 因為是root權限，存檔的時候記得要用<code>:wq!</code>強制寫入。</em></p>\n<p>重新開啟iTerm後，便可以使用goproject來快速進到你要的路徑，當然你也可以自行設定你要的指令。</p>\n<h2 id=\"alias_相關指令\">alias 相關指令</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">alias</span><span class=\"comment\"> // 列出所有的alias檔</span></div><div class=\"line\">unalias goproject<span class=\"comment\"> // 把goproject這個alias刪掉</span></div></pre></td></tr></table></figure>\n\n<p><strong><em>reference</em></strong></p>\n<p><a href=\"http://www.linfo.org/alias.html\" target=\"_blank\" rel=\"external\">How to use the alias command</a></p>\n",
      "source": "_posts/為你的mac終端機加上alias.md",
      "raw":
        "title: 為你的mac終端機加上alias\ndate: 2014-04-15 09:35:37\ntags:\n- alias\n- terminal\n- mac\n---\n\n在使用iTerm（終端機）一段時間後，總覺得每次開啟新分頁，要進入到一個很深的資料夾略顯麻煩，因此上網查了簡易的方法，很快速便可以讓自己少打很多code，把時間花在其他更重要事情上。\n\n![iterm2](http://i.imgur.com/Cc5u0nY.png)\n\n<!-- more -->\n\n## alias \n\n顧名思義就是別名，其語法如下，舉mac的apache server所在為example:\n\n```\nalias goproject='cd /Library/WebServer/Documents/yourproject'\n```\n\n因此在iTerm打上這串後，未來便可以使用`goproject` 直接執行後面那串，快速又方便。\n\n\n## 永久執行alias\n\n在設定完alias，原本以為就這樣，結果發現如果重開iTerm後，之前設定的alias都不見了，原因是因為沒有真正寫入bash檔，因此在開啟iTerm的時候，並沒有被載入，所以我們要將\n```\nsudo vim /etc/bashrc\n// 在bashrc檔裡面加上新的一行\nalias goproject='cd /Library/WebServer/Documents/yourproject'\n```\n*ps. 因為是root權限，存檔的時候記得要用`:wq!`強制寫入。*\n\n重新開啟iTerm後，便可以使用goproject來快速進到你要的路徑，當然你也可以自行設定你要的指令。\n\n## alias 相關指令\n\n```\nalias // 列出所有的alias檔\nunalias goproject // 把goproject這個alias刪掉\n```\n\n\n***reference***\n\n[How to use the alias command](http://www.linfo.org/alias.html)\n",
      "slug": "為你的mac終端機加上alias",
      "updated": 1496848435000,
      "excerpt":
        "<p>在使用iTerm（終端機）一段時間後，總覺得每次開啟新分頁，要進入到一個很深的資料夾略顯麻煩，因此上網查了簡易的方法，很快速便可以讓自己少打很多code，把時間花在其他更重要事情上。</p>\n<p><img src=\"http://i.imgur.com/Cc5u0nY.png\" alt=\"iterm2\"></p>\n",
      "_id": "up6g8dqrikcxp8qr",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "Sublime 與 iTerm 的視窗配置",
      "date": 1423310104000,
      "tags": ["0z6dvaxhkqub1xa9", "wyfpdd08p7ksndsu", "cngo8pvgdo8ue2a4"],
      "content":
        "<p>常用的編輯器是 Sublime Text 3，但是終端機是 iTerm2，兩者一直沒有 IDE 般的整合。<br>本篇記錄下如何更改 iTerm2 的視窗配置，讓兩者操作體驗上有更佳的配合。</p>\n<p><img src=\"http://i.imgur.com/wI92DCX.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h3 id=\"一般情境\">一般情境</h3>\n<p>一般在 Sublime 和 iTerm 之間切換，我都是利用 <code>cmd+tab</code> 來做切換，但是這樣的使用情境，如果在筆電上開發，則會在執行 iTerm 的時候遮到 Sublime 的內容。如下圖所示：</p>\n<p><img src=\"http://i.imgur.com/7lg3dx4.png\" alt=\"\"></p>\n<p>讓我們更改 iTerm 的視窗配置，來改善這樣的情況！</p>\n<h3 id=\"iTerm_視窗設定\">iTerm 視窗設定</h3>\n<p><img src=\"http://i.imgur.com/gfMTEKP.png\" alt=\"\"></p>\n<p>根據上圖，依序找到 Profiles –&gt; Window –&gt; Style: Bottom of screen<br>調整完後視窗的高度會根據設定的 Rows 高度來決定。</p>\n<h3 id=\"快捷鍵設定\">快捷鍵設定</h3>\n<p>根據個人習慣，在不與 Sublime 相關的快捷鍵衝突，我建議採用 <code>cmd+.</code> 來啟動 iTerm。</p>\n<p><img src=\"http://i.imgur.com/Iw6ywHt.png\" alt=\"\"></p>\n<p>※ 記得重新啟動 iTerms 來檢視設定的效果。</p>\n<h3 id=\"成果_Demo\">成果 Demo</h3>\n<p>做完上面的設定就大功告成了！</p>\n<p>未來在編輯的時候，就可以利用 <code>cmd+.</code> 來啟動＆關閉終端機，操作感覺接近是內建在 Sublime 的環境。</p>\n<p>如下圖所示：</p>\n<p><img src=\"http://i.imgur.com/cJNfCCa.png\" alt=\"\"></p>\n<p>Enjoy!</p>\n",
      "source": "_posts/Sublime-與-iTerm-的視窗配置.md",
      "raw":
        "title: Sublime 與 iTerm 的視窗配置\ndate: 2015-02-07 19:55:04\ntags:\n- sublime text\n- terminal\n- tips\n---\n\n常用的編輯器是 Sublime Text 3，但是終端機是 iTerm2，兩者一直沒有 IDE 般的整合。\n本篇記錄下如何更改 iTerm2 的視窗配置，讓兩者操作體驗上有更佳的配合。\n\n![](http://i.imgur.com/wI92DCX.png)\n\n<!-- more -->\n\n### 一般情境\n\n一般在 Sublime 和 iTerm 之間切換，我都是利用 `cmd+tab` 來做切換，但是這樣的使用情境，如果在筆電上開發，則會在執行 iTerm 的時候遮到 Sublime 的內容。如下圖所示：\n\n![](http://i.imgur.com/7lg3dx4.png)\n\n讓我們更改 iTerm 的視窗配置，來改善這樣的情況！\n\n### iTerm 視窗設定\n\n![](http://i.imgur.com/gfMTEKP.png)\n\n根據上圖，依序找到 Profiles --> Window --> Style: Bottom of screen\n調整完後視窗的高度會根據設定的 Rows 高度來決定。\n\n### 快捷鍵設定\n\n根據個人習慣，在不與 Sublime 相關的快捷鍵衝突，我建議採用 `cmd+.` 來啟動 iTerm。\n\n![](http://i.imgur.com/Iw6ywHt.png)\n\n※ 記得重新啟動 iTerms 來檢視設定的效果。\n\n### 成果 Demo \n\n做完上面的設定就大功告成了！\n\n未來在編輯的時候，就可以利用 `cmd+.` 來啟動＆關閉終端機，操作感覺接近是內建在 Sublime 的環境。\n\n如下圖所示：\n\n![](http://i.imgur.com/cJNfCCa.png)\n\nEnjoy!\n",
      "slug": "Sublime-與-iTerm-的視窗配置",
      "updated": 1496848435000,
      "excerpt":
        "<p>常用的編輯器是 Sublime Text 3，但是終端機是 iTerm2，兩者一直沒有 IDE 般的整合。<br>本篇記錄下如何更改 iTerm2 的視窗配置，讓兩者操作體驗上有更佳的配合。</p>\n<p><img src=\"http://i.imgur.com/wI92DCX.png\" alt=\"\"></p>\n",
      "_id": "fku1x5v3fz8s4kby",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "利用 crontab 來做 Linux 固定排程",
      "date": 1423627065000,
      "tags": ["lb9ysu4zbhwbmj88", "6jeol8jo7keikjor", "f332vourvshedzi5"],
      "content":
        "<p>近期有個需求，要在 Linux 上執行固定週期的時程，發現利用 crontab 這個內建的功能便可以完成，本篇記錄使用過程以及相關的參數。</p>\n<p><img src=\"http://i.imgur.com/kcFpx34.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"crontab_介紹\">crontab 介紹</h2>\n<p>crontab 是 Linux 內建的機制，可以根據設置的時間參數來執行例行性的工作排程。</p>\n<p><img src=\"http://i.imgur.com/OGytWih.gif\" alt=\"\"></p>\n<p>上述這張圖可以清楚的顯示出前五項參數應該要帶進去的數字。<br>依序是<code>分鐘</code>, <code>小時</code>, <code>日期</code>, <code>月份</code>, <code>星期</code>, <code>command</code><br>參數為<code>0-59</code>, <code>0-23</code>, <code>1-31</code>, <code>1-21</code>, <code>0-6</code>, <code>需要執行的command</code></p>\n<p>※ 星期參數為<code>0</code>代表星期日</p>\n<h2 id=\"參數特殊字符意義\">參數特殊字符意義</h2>\n<p><code>【*】</code>：星號，代表任何時刻都接受的意思<br><code>【,】</code>：逗號，代表分隔時段。例如：<code>30 9,17 * * * command</code>，代表早上9點半和下午五點半都執行 command。<br><code>【-】</code>：減號，代表一段時間範圍。例如：<code>15 9-12 * * * command</code>，代表從9點到12點的每個15分都執行 command。<br><code>【/n】</code>：斜線，n代表數字，表示每個 n 單位間隔。例如：<code>*/5 * * * * command</code>，代表每隔 5 分鐘執行一次 command。</p>\n<p>還有一些人性化的參數，一次取代全部五個數字參數</p>\n<p><code>【@reboot】</code> ：僅在開機的時候執行一次。<br><code>【@yearly】</code> ：一年執行一次，和<code>0 0 1 1 * command</code>效果一樣。<br><code>【@annually】</code>：（和<code>@yearly</code>一樣）<br><code>【@monthly】</code>：一個月執行一次，和<code>0 0 1 * * command</code>效果一樣。<br><code>【@weekly】</code>：一個星期執行一次，和<code>0 0 * * 0 command</code>效果一樣。<br><code>【@daily】</code>：每天執行，和<code>0 0 * * * command</code>效果一樣。<br><code>【@midnight】</code>：（和<code>@daily</code>一樣）<br><code>【@hourly】</code> ：每小時執行，和<code>0 * * * * command</code>效果一樣。</p>\n<h2 id=\"crontab_操作\">crontab 操作</h2>\n<p>crontab 是會根據不同的使用者去判定可以操作的範圍。</p>\n<p><code>$ crontab -l</code>: 列出該使用者擁有的 crontab 指令<br><code>$ crontab -e</code>: 編輯該使用者的 crontab 指令<br><code>$ crontab -r</code>: 將使用者的 crontab 全部清除！（ <strong>小心使用</strong> ）</p>\n<p>編輯完後就可以存檔離開，Linux 系統便會依照你設定的排程固定做事，非常方便。</p>\n<p>※ 下達指令請用 <strong>絕對路徑</strong> 避免錯誤</p>\n<h2 id=\"範例參考\">範例參考</h2>\n<p><code>$ */5 * * * * /home/ubuntu/test.sh</code>：每五分鐘執行一次測試 shell script<br><code>$ 0 9 * * 1-6 node /home/ubuntu/workspace/report.js</code>：每天早上九點（除了星期日）執行 report.js 這隻檔案</p>\n<h3 id=\"reference\">reference</h3>\n<p><a href=\"http://kvz.io/blog/2007/07/29/schedule-tasks-on-linux-using-crontab/\" target=\"_blank\" rel=\"external\">Schedule Tasks on Linux Using Crontab</a><br><a href=\"http://linux.vbird.org/linux_basic/0430cron.php#whatiscron_linux\" target=\"_blank\" rel=\"external\">鳥哥的 Linux 私房菜 例行性工作排程 (crontab)</a></p>\n",
      "source": "_posts/利用-crontab-來做-Linux-固定排程.md",
      "raw":
        "title: 利用 crontab 來做 Linux 固定排程\ndate: 2015-02-11 11:57:45\ntags:\n- code\n- linux\n- crontab \n---\n\n近期有個需求，要在 Linux 上執行固定週期的時程，發現利用 crontab 這個內建的功能便可以完成，本篇記錄使用過程以及相關的參數。\n\n![](http://i.imgur.com/kcFpx34.png)\n\n<!-- more -->\n\n## crontab 介紹\n\ncrontab 是 Linux 內建的機制，可以根據設置的時間參數來執行例行性的工作排程。\n\n![](http://i.imgur.com/OGytWih.gif)\n\n上述這張圖可以清楚的顯示出前五項參數應該要帶進去的數字。\n依序是`分鐘`, `小時`, `日期`, `月份`, `星期`, `command`\n參數為`0-59`, `0-23`, `1-31`, `1-21`, `0-6`, `需要執行的command`\n\n※ 星期參數為`0`代表星期日\n\n## 參數特殊字符意義\n\n`【*】`：星號，代表任何時刻都接受的意思\n`【,】`：逗號，代表分隔時段。例如：`30 9,17 * * * command`，代表早上9點半和下午五點半都執行 command。\n`【-】`：減號，代表一段時間範圍。例如：`15 9-12 * * * command`，代表從9點到12點的每個15分都執行 command。   \n`【/n】`：斜線，n代表數字，表示每個 n 單位間隔。例如：`*/5 * * * * command`，代表每隔 5 分鐘執行一次 command。\n\n還有一些人性化的參數，一次取代全部五個數字參數\n\n`【@reboot】` ：僅在開機的時候執行一次。\n`【@yearly】` ：一年執行一次，和`0 0 1 1 * command`效果一樣。\n`【@annually】`：（和`@yearly`一樣）\n`【@monthly】`：一個月執行一次，和`0 0 1 * * command`效果一樣。\n`【@weekly】`：一個星期執行一次，和`0 0 * * 0 command`效果一樣。\n`【@daily】`：每天執行，和`0 0 * * * command`效果一樣。\n`【@midnight】`：（和`@daily`一樣）\n`【@hourly】` ：每小時執行，和`0 * * * * command`效果一樣。\n\n## crontab 操作\n\ncrontab 是會根據不同的使用者去判定可以操作的範圍。\n\n`$ crontab -l`: 列出該使用者擁有的 crontab 指令\n`$ crontab -e`: 編輯該使用者的 crontab 指令\n`$ crontab -r`: 將使用者的 crontab 全部清除！（ **小心使用** ）\n\n編輯完後就可以存檔離開，Linux 系統便會依照你設定的排程固定做事，非常方便。\n\n※ 下達指令請用 **絕對路徑** 避免錯誤\n\n## 範例參考\n\n`$ */5 * * * * /home/ubuntu/test.sh`：每五分鐘執行一次測試 shell script\n`$ 0 9 * * 1-6 node /home/ubuntu/workspace/report.js`：每天早上九點（除了星期日）執行 report.js 這隻檔案\n\n### reference\n\n[Schedule Tasks on Linux Using Crontab](http://kvz.io/blog/2007/07/29/schedule-tasks-on-linux-using-crontab/)\n[鳥哥的 Linux 私房菜 例行性工作排程 (crontab)](http://linux.vbird.org/linux_basic/0430cron.php#whatiscron_linux)",
      "slug": "利用-crontab-來做-Linux-固定排程",
      "updated": 1501344509000,
      "excerpt":
        "<p>近期有個需求，要在 Linux 上執行固定週期的時程，發現利用 crontab 這個內建的功能便可以完成，本篇記錄使用過程以及相關的參數。</p>\n<p><img src=\"http://i.imgur.com/kcFpx34.png\" alt=\"\"></p>\n",
      "_id": "l0xp36cwkqtgcfp0",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "Linux 之 command line 上手",
      "date": 1431228344000,
      "tags": [
        "6jeol8jo7keikjor",
        "i2nrcs9t2t4a70jx",
        "yz5591xn6jfer0yk",
        "ft9so80zwmr9ady3"
      ],
      "content":
        "<p>開發者對於 command line 一定不陌生，然而 Mac OS 會受到許多開發者的青睞，是因為其本身就是依照 unix 系統做開發，因此對於虛擬主機需要用到 command line 自然不陌生，整合性很好。</p>\n<p>這篇 blog 記錄網站開發超過兩年半經驗的我，最常用到的終端機指令 (command line)。</p>\n<p><img src=\"http://i.imgur.com/hGb22rh.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>本篇針對的讀者是 mac 新手。</p>\n<h2 id=\"環境設定\">環境設定</h2>\n<p>建議下載 iterm2 來使用，有興趣可參考<a href=\"/2015/02/07/Sublime-與-iTerm-的視窗配置/\">設定</a></p>\n<h2 id=\"常用指令\">常用指令</h2>\n<p>前面加上錢字號($)代表此行為 command line 開始，真正在打的時候不用加入<code>$</code></p>\n<p><code>$ cd</code>: 移動 root 位置<br><code>$ cd ..</code>: 移動到目前所在位置的上一層<br><code>$ cd ../..</code>: 移動到目前所在位置的上兩層</p>\n<p><code>$ pwd</code>: 列出目前完整路徑 –&gt; 可以知道自己現在在哪邊，再決定要如何利用 <code>cd</code> 移動</p>\n<p><code>$ ls</code>: 列出所在目錄的檔案<br><code>$ ls -a</code>: 列出的目錄檔案包含隱藏檔<br><code>$ ls -al</code>: 列出的目錄檔案包含隱藏檔 &amp; 檔案屬性和權限</p>\n<p><code>$ vi(m) **.xx</code>: 創建檔名為<code>**</code>，附檔名為<code>xx</code>的檔案 –&gt; 之後會進入vi(m) 文字編輯模式，推薦查閱<a href=\"http://linux.vbird.org/linux_basic/0310vi.php\" target=\"_blank\" rel=\"external\">鳥哥vim教學</a></p>\n<p><code>$ mkdir ***</code>: 創建名稱為<code>***</code>的資料夾<br><code>$ rmdir ***</code>: 移除名稱為<code>***</code>的資料夾 –&gt; 需確定資料夾為空</p>\n<p><code>$ cp dest1 dest2</code>: 把 dest1 檔案複製到 dest2 的位置<br><code>$ mv dest1 dest2</code>: 把 dest1 檔案移動到 dest2 的位置，亦可作為變更檔名使用，例如 <code>$ mv test.txt no-test.txt</code>，就可以把檔名 test 的文字檔改變成為 no-test 檔名。</p>\n<p><code>$ sudo su</code>: 取得 root 權限</p>\n<p>以上列出我最常用的指令，許多指令都可以帶有特殊的參數，unix base底下的command line也不只這些，想要更進一步，可以再多去參考書籍或是教學。</p>\n<h2 id=\"reference\">reference</h2>\n<p><a href=\"http://linux.vbird.org/linux_basic/0220filemanager.php#dir_path\" target=\"_blank\" rel=\"external\">鳥哥 Linux 檔案與目錄管理</a></p>\n",
      "source": "_posts/Linux-之-command-line-上手.md",
      "raw":
        "title: Linux 之 command line 上手\ndate: 2015-05-10 11:25:44\ntags: \n- linux\n- command line\n- iterm2\n- 終端機\n---\n\n開發者對於 command line 一定不陌生，然而 Mac OS 會受到許多開發者的青睞，是因為其本身就是依照 unix 系統做開發，因此對於虛擬主機需要用到 command line 自然不陌生，整合性很好。\n\n這篇 blog 記錄網站開發超過兩年半經驗的我，最常用到的終端機指令 (command line)。\n\n![](http://i.imgur.com/hGb22rh.png)\n\n<!-- more -->\n\n本篇針對的讀者是 mac 新手。\n\n## 環境設定\n\n建議下載 iterm2 來使用，有興趣可參考[設定](/2015/02/07/Sublime-與-iTerm-的視窗配置/)\n\n## 常用指令\n\n前面加上錢字號($)代表此行為 command line 開始，真正在打的時候不用加入`$`\n\n`$ cd`: 移動 root 位置\n`$ cd ..`: 移動到目前所在位置的上一層\n`$ cd ../..`: 移動到目前所在位置的上兩層\n\n`$ pwd`: 列出目前完整路徑 --> 可以知道自己現在在哪邊，再決定要如何利用 `cd` 移動\n\n`$ ls`: 列出所在目錄的檔案\n`$ ls -a`: 列出的目錄檔案包含隱藏檔\n`$ ls -al`: 列出的目錄檔案包含隱藏檔 & 檔案屬性和權限\n\n`$ vi(m) **.xx`: 創建檔名為`**`，附檔名為`xx`的檔案 --> 之後會進入vi(m) 文字編輯模式，推薦查閱[鳥哥vim教學](http://linux.vbird.org/linux_basic/0310vi.php)\n\n`$ mkdir ***`: 創建名稱為`***`的資料夾\n`$ rmdir ***`: 移除名稱為`***`的資料夾 --> 需確定資料夾為空\n\n`$ cp dest1 dest2`: 把 dest1 檔案複製到 dest2 的位置\n`$ mv dest1 dest2`: 把 dest1 檔案移動到 dest2 的位置，亦可作為變更檔名使用，例如 `$ mv test.txt no-test.txt`，就可以把檔名 test 的文字檔改變成為 no-test 檔名。\n\n`$ sudo su`: 取得 root 權限\n\n以上列出我最常用的指令，許多指令都可以帶有特殊的參數，unix base底下的command line也不只這些，想要更進一步，可以再多去參考書籍或是教學。\n\n## reference\n[鳥哥 Linux 檔案與目錄管理](http://linux.vbird.org/linux_basic/0220filemanager.php#dir_path)\n",
      "slug": "Linux-之-command-line-上手",
      "updated": 1496848435000,
      "excerpt":
        "<p>開發者對於 command line 一定不陌生，然而 Mac OS 會受到許多開發者的青睞，是因為其本身就是依照 unix 系統做開發，因此對於虛擬主機需要用到 command line 自然不陌生，整合性很好。</p>\n<p>這篇 blog 記錄網站開發超過兩年半經驗的我，最常用到的終端機指令 (command line)。</p>\n<p><img src=\"http://i.imgur.com/hGb22rh.png\" alt=\"\"></p>\n",
      "_id": "yqpcbisubuf7cpao",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "從 Pocket 儲存全文到 Evernote",
      "date": 1437657686000,
      "tags": [
        "899tsoqydar0c4bw",
        "ap6ge908bss4zs8w",
        "7sry6pf9i6701nmf",
        "3kvhtbin5gn3mwzp"
      ],
      "content":
        "<p>Pocket 是一款可以稍候待讀的 app，其漂亮的介面和離線閱讀的功能，使我對於它愛不釋手。<br>然而從英語語系出發的 Pocket 團隊，雖然在專業版提供全文檢索（full text search）的功能，但是在繁體中文上面還是略顯不足，常常找不到已經封存的文章內容，因此本篇記錄利用 Pocket 儲存到 Evernote 的過程。</p>\n<p><img src=\"http://i.imgur.com/g9vZzcB.png\" alt=\"RSS to Evernote\"></p>\n<a id=\"more\"></a>\n<p>Pocket 的閱讀介面是它的一大優勢，而 Evernote 的搜尋功能是有目共睹的準確，我們將利用 IFTTT 這個自動化工具來實作「當我從 Pocket 封存項目後，自動儲存全文到 Evernote」。</p>\n<h2 id=\"0-_IFTTT_內建_Pocket_問題所在\">0. IFTTT 內建 Pocket 問題所在</h2>\n<p>有使用 <a href=\"https://ifttt.com\" target=\"_blank\" rel=\"external\">IFTTT</a> 的朋友應該知道說其實它有內建 Pocket 的選項，但是由於它提供的 Pocket 儲存只有所謂的 Excerpt 的功能，也就是只有部分的內容，並沒有辦法全文儲存到 Evernote 的 note 當中。</p>\n<p><img src=\"http://i.imgur.com/Q90mCAB.png\" alt=\"ifttt pocket feature\"></p>\n<p>因此我們的解決步驟為：</p>\n<ol>\n<li>建立 Pocket archive item 的 public full text RSS feed</li>\n<li>創建 RSS to Evernote 的 recipe</li>\n<li>問題解決</li>\n</ol>\n<p>未來就可以利用 Evernote 強大的搜尋功能來做到找到曾經閱讀封存的文章。</p>\n<h2 id=\"1-_建立_Pocket_的_Full_Text_RSS_來源\">1. 建立 Pocket 的 Full Text RSS 來源</h2>\n<ul>\n<li>首先到 <a href=\"https://getpocket.com/privacy_controls\" target=\"_blank\" rel=\"external\"><code>Pocket &gt; Options &gt; Privacy</code></a> 把 RSS feed 設為 public</li>\n<li>點選 <code>Archive feed</code> 取得 Pocket 帳戶底下封存項目的 RSS feed link，連結應該為 <code>http://getpocket.com/users/&lt;你的帳號&gt;/feed/read</code></li>\n<li>到 <a href=\"http://fivefilters.org/content-only/\" target=\"_blank\" rel=\"external\"><code>fivefilters</code></a> 建立 full text RSS，貼上你的 feed url 後，按下 Create feed</li>\n<li>把視窗連結記錄下來，這連結即為你的 full text RSS 來源</li>\n</ul>\n<h2 id=\"2-_創建_RSS_to_Evernote_Recipe\">2. 創建 RSS to Evernote Recipe</h2>\n<ul>\n<li>根據此 <a href=\"https://ifttt.com/recipes/183722-save-full-text-of-new-pocket-item-to-evernote\" target=\"_blank\" rel=\"external\"><code>recipe</code></a> 創建你自己的版本</li>\n<li>將上述的 full text RSS 連結貼上</li>\n<li>根據步驟創建你的 IFTTT recipe</li>\n</ul>\n<p>完成上述步驟後，即可在 Evernote 你所命名的筆記本內看到你在 pocket 所封存的項目囉。</p>\n<h2 id=\"使用心得\">使用心得</h2>\n<p>其實在 pocket mobile app 上面，有直接儲存到 Evernote 的選項，但我閱讀文章完如果值得存下來的，我習慣直接 archive 起來。<br>實際使用這個 recipe 後，發現有一些網站的 full text RSS 抓的並不是很準確，速度也沒有很快，通常都要半個小時後才會在 Evernote 出現，但在網頁版並沒有存到 Evernote 的選項，在權衡下，我還是選擇使用此 recipe 來做為未來可以在 Evernote 搜尋的自動化工具。</p>\n<h3 id=\"reference\">reference</h3>\n<p><a href=\"https://capeably.wordpress.com/2014/06/21/automate-full-text-of-pocket-backup-to-evernote-with-ifttt-and-fivefilters/\" target=\"_blank\" rel=\"external\">Automate Full Text of Pocket Backup to Evernote with IFTTT and FiveFilters</a></p>\n",
      "source": "_posts/從Pocket-儲存全文到Evernote.md",
      "raw":
        "title: 從 Pocket 儲存全文到 Evernote\ndate: 2015-07-23 21:21:26\ntags:\n- pocket\n- evernote\n- tool\n- ifttt\n---\n\nPocket 是一款可以稍候待讀的 app，其漂亮的介面和離線閱讀的功能，使我對於它愛不釋手。\n然而從英語語系出發的 Pocket 團隊，雖然在專業版提供全文檢索（full text search）的功能，但是在繁體中文上面還是略顯不足，常常找不到已經封存的文章內容，因此本篇記錄利用 Pocket 儲存到 Evernote 的過程。\n\n![RSS to Evernote](http://i.imgur.com/g9vZzcB.png)\n\n<!-- more -->\n\nPocket 的閱讀介面是它的一大優勢，而 Evernote 的搜尋功能是有目共睹的準確，我們將利用 IFTTT 這個自動化工具來實作「當我從 Pocket 封存項目後，自動儲存全文到 Evernote」。\n\n## 0. IFTTT 內建 Pocket 問題所在\n\n有使用 [IFTTT](https://ifttt.com) 的朋友應該知道說其實它有內建 Pocket 的選項，但是由於它提供的 Pocket 儲存只有所謂的 Excerpt 的功能，也就是只有部分的內容，並沒有辦法全文儲存到 Evernote 的 note 當中。\n\n![ifttt pocket feature](http://i.imgur.com/Q90mCAB.png)\n\n因此我們的解決步驟為：\n1. 建立 Pocket archive item 的 public full text RSS feed\n2. 創建 RSS to Evernote 的 recipe\n3. 問題解決\n\n未來就可以利用 Evernote 強大的搜尋功能來做到找到曾經閱讀封存的文章。\n\n## 1. 建立 Pocket 的 Full Text RSS 來源\n\n- 首先到 [`Pocket > Options > Privacy`](https://getpocket.com/privacy_controls) 把 RSS feed 設為 public\n- 點選 `Archive feed` 取得 Pocket 帳戶底下封存項目的 RSS feed link，連結應該為 `http://getpocket.com/users/<你的帳號>/feed/read`\n- 到 [`fivefilters`](http://fivefilters.org/content-only/) 建立 full text RSS，貼上你的 feed url 後，按下 Create feed\n- 把視窗連結記錄下來，這連結即為你的 full text RSS 來源\n\n## 2. 創建 RSS to Evernote Recipe\n\n- 根據此 [`recipe`](https://ifttt.com/recipes/183722-save-full-text-of-new-pocket-item-to-evernote) 創建你自己的版本\n- 將上述的 full text RSS 連結貼上\n- 根據步驟創建你的 IFTTT recipe\n\n\n完成上述步驟後，即可在 Evernote 你所命名的筆記本內看到你在 pocket 所封存的項目囉。\n\n\n## 使用心得\n\n其實在 pocket mobile app 上面，有直接儲存到 Evernote 的選項，但我閱讀文章完如果值得存下來的，我習慣直接 archive 起來。\n實際使用這個 recipe 後，發現有一些網站的 full text RSS 抓的並不是很準確，速度也沒有很快，通常都要半個小時後才會在 Evernote 出現，但在網頁版並沒有存到 Evernote 的選項，在權衡下，我還是選擇使用此 recipe 來做為未來可以在 Evernote 搜尋的自動化工具。\n\n### reference\n[Automate Full Text of Pocket Backup to Evernote with IFTTT and FiveFilters](https://capeably.wordpress.com/2014/06/21/automate-full-text-of-pocket-backup-to-evernote-with-ifttt-and-fivefilters/)\n",
      "slug": "從Pocket-儲存全文到Evernote",
      "updated": 1496848435000,
      "excerpt":
        "<p>Pocket 是一款可以稍候待讀的 app，其漂亮的介面和離線閱讀的功能，使我對於它愛不釋手。<br>然而從英語語系出發的 Pocket 團隊，雖然在專業版提供全文檢索（full text search）的功能，但是在繁體中文上面還是略顯不足，常常找不到已經封存的文章內容，因此本篇記錄利用 Pocket 儲存到 Evernote 的過程。</p>\n<p><img src=\"http://i.imgur.com/g9vZzcB.png\" alt=\"RSS to Evernote\"></p>\n",
      "_id": "rli0qw4af2o8jfdj",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "從 deploy node.js 專案所學",
      "date": 1442071097000,
      "tags": ["vnujgxi0n9nt9eq3", "j3d4zbqu5et2mw2f", "cngo8pvgdo8ue2a4"],
      "content":
        "<p>學習 Node.js 已經兩年之餘，這段時間陸陸續續在開發上遇到一些問題（雷），然而隨著時間累積的叫做經驗，因此藉由此篇文章記錄從本機 development 環境到遠端 Linux 上的 production 所得到的經驗。</p>\n<p><img src=\"http://i.imgur.com/GtZ5ROB.jpg\" alt=\"Deploy\"></p>\n<a id=\"more\"></a>\n<p>以下的 localhost 環境皆為 Mac 10.10，express.js，<br>而 deploy 的環境皆為 Linux 14.04 環境。</p>\n<h2 id=\"1-_環境變數\">1. 環境變數</h2>\n<p>NODE_ENV 是運行 Node.js 重要的變數，在本機開發的時候預設為 <code>NODE_ENV=development</code>。</p>\n<p>在執行 <code>app.js</code> (aka <code>bin/www</code>) 時，選擇需要的變數 (development || production)，若要運行為 production 環境指令為</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">$ NODE_ENV</span>=<span class=\"string\">production node bin/www</span></div></pre></td></tr></table></figure>\n\n<p>當然這個 <code>NODE_ENV</code> 值可以直接 export 在你所運行的環境當中，</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>export <span class=\"constant\">NODE_ENV</span>=production</div><div class=\"line\"><span class=\"variable\">$ </span>node bin/www</div></pre></td></tr></table></figure>\n\n<p>而若不想每次開啟 shell 都要重新 export 一次，可以將 export 指令寫進 <code>~/.bashrc</code> 內，之後開啟 shell 就會設定 NODE_ENV=production 了！</p>\n<hr>\n<p>Q：那如何在 express.js 框架下的 app.js 拿到環境變數呢？<br>A：只要利用 express 框架為我們做好的 API 如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app.js</span></div><div class=\"line\">app.<span class=\"keyword\">get</span>(<span class=\"string\">'env'</span>)</div></pre></td></tr></table></figure>\n\n<p>即可得到 <code>NODE_ENV</code> 值。</p>\n<h2 id=\"2-_config_檔設定\">2. config 檔設定</h2>\n<p>關於 config 檔的設定，每個人有不同的習慣，我介紹我常用的 config 檔設定方式。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// config.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> config = {</div><div class=\"line\">  development: {</div><div class=\"line\">    port: <span class=\"number\">3000</span>,</div><div class=\"line\">    <span class=\"comment\">// anything else</span></div><div class=\"line\">  },</div><div class=\"line\">  production: {</div><div class=\"line\">    port: <span class=\"number\">3001</span>,</div><div class=\"line\">    <span class=\"comment\">// anything else</span></div><div class=\"line\">  }</div><div class=\"line\">};</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> config = require(<span class=\"string\">'./config.js'</span>)[app.<span class=\"keyword\">get</span>(<span class=\"string\">'env'</span>)];</div><div class=\"line\"><span class=\"keyword\">var</span> port = config.port <span class=\"comment\">// production mode will return 3001</span></div></pre></td></tr></table></figure>\n\n<p>這樣設定 config 檔後，未來就可以利用 NODE_ENV 的不同來判斷應該要連接的資料，例如在 dev DB 和 production DB 的分開等等情況。</p>\n<h2 id=\"3-_ejs_樣板引擎快取問題\">3. ejs 樣板引擎快取問題</h2>\n<p>在樣板引擎方面我習慣 ejs，而 ejs 會在 <code>production</code> 的狀態下把 view template 快取起來，加速 render 的時間，因此需要做 restart node server 的情況才可以解決快取問題。</p>\n<p>ps. 或許這個問題有其他更好解法，非常歡迎協助補充。</p>\n<h2 id=\"4-_node_執行_-js_檔\">4. node 執行 .js 檔</h2>\n<p>因為曾經撞過這些雷，單純就是經驗不足，以致於值得記錄一下 XD</p>\n<p>直接提供 debug 經驗談：</p>\n<ul>\n<li>chmod -x yourfile.js // 權限問題</li>\n<li>讀檔＆寫檔 // 請確定<code>相對路徑</code>和<code>絕對路徑</code>在環境的問題</li>\n<li>第一行請加上 <code>#!/usr/bin/env node</code> // 讓環境找得到 node 去執行它</li>\n</ul>\n<h2 id=\"5-_MongoDB_的匯出和匯入\">5. MongoDB 的匯出和匯入</h2>\n<p>Q：在本機端匯出和匯入都好好的，不知道為什麼到遠端的環境就沒有辦法匯入？<br>A：原因是語系問題，記得在 DB 匯入前先執行 export 或寫入 bashrc 檔</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> LC_ALL=<span class=\"string\">\"en_US.UTF-8\"</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"後記\">後記</h2>\n<p>花時間經歷過的才會印象深刻，上述這幾點都是我利用時間所換來的，將此記錄在這邊，也希望能或多或少幫助到一些人：）</p>\n",
      "source": "_posts/從deploy-node-js-專案所學.md",
      "raw":
        "title: 從 deploy node.js 專案所學\ndate: 2015-09-12 23:18:17\ntags:\n- node.js\n- deploy\n- tips\n---\n\n學習 Node.js 已經兩年之餘，這段時間陸陸續續在開發上遇到一些問題（雷），然而隨著時間累積的叫做經驗，因此藉由此篇文章記錄從本機 development 環境到遠端 Linux 上的 production 所得到的經驗。\n\n![Deploy](http://i.imgur.com/GtZ5ROB.jpg)\n\n<!-- more -->\n\n以下的 localhost 環境皆為 Mac 10.10，express.js，\n而 deploy 的環境皆為 Linux 14.04 環境。\n\n## 1. 環境變數\n\nNODE_ENV 是運行 Node.js 重要的變數，在本機開發的時候預設為 `NODE_ENV=development`。\n\n在執行 `app.js` (aka `bin/www`) 時，選擇需要的變數 (development || production)，若要運行為 production 環境指令為\n```\n$ NODE_ENV=production node bin/www\n```\n\n當然這個 `NODE_ENV` 值可以直接 export 在你所運行的環境當中，\n```\n$ export NODE_ENV=production\n$ node bin/www\n```\n\n而若不想每次開啟 shell 都要重新 export 一次，可以將 export 指令寫進 `~/.bashrc` 內，之後開啟 shell 就會設定 NODE_ENV=production 了！\n\n----\n\nQ：那如何在 express.js 框架下的 app.js 拿到環境變數呢？\nA：只要利用 express 框架為我們做好的 API 如下：\n``` \n// app.js\napp.get('env')\n```\n即可得到 `NODE_ENV` 值。\n\n\n## 2. config 檔設定\n\n關於 config 檔的設定，每個人有不同的習慣，我介紹我常用的 config 檔設定方式。\n\n```\n// config.js\nvar config = {\n  development: {\n    port: 3000,\n    // anything else\n  },\n  production: {\n    port: 3001,\n    // anything else\n  }\n};\nmodule.exports = config;\n```\n```\n// app.js\nvar config = require('./config.js')[app.get('env')];\nvar port = config.port // production mode will return 3001\n```\n\n這樣設定 config 檔後，未來就可以利用 NODE_ENV 的不同來判斷應該要連接的資料，例如在 dev DB 和 production DB 的分開等等情況。\n\n## 3. ejs 樣板引擎快取問題\n\n在樣板引擎方面我習慣 ejs，而 ejs 會在 `production` 的狀態下把 view template 快取起來，加速 render 的時間，因此需要做 restart node server 的情況才可以解決快取問題。\n\nps. 或許這個問題有其他更好解法，非常歡迎協助補充。\n\n## 4. node 執行 .js 檔\n\n因為曾經撞過這些雷，單純就是經驗不足，以致於值得記錄一下 XD\n\n直接提供 debug 經驗談：\n- chmod -x yourfile.js // 權限問題\n- 讀檔＆寫檔 // 請確定`相對路徑`和`絕對路徑`在環境的問題\n- 第一行請加上 `#!/usr/bin/env node` // 讓環境找得到 node 去執行它\n\n## 5. MongoDB 的匯出和匯入\n\nQ：在本機端匯出和匯入都好好的，不知道為什麼到遠端的環境就沒有辦法匯入？\nA：原因是語系問題，記得在 DB 匯入前先執行 export 或寫入 bashrc 檔\n```\nexport LC_ALL=\"en_US.UTF-8\"\n```\n\n## 後記\n\n花時間經歷過的才會印象深刻，上述這幾點都是我利用時間所換來的，將此記錄在這邊，也希望能或多或少幫助到一些人：）",
      "slug": "從deploy-node-js-專案所學",
      "updated": 1496848435000,
      "excerpt":
        "<p>學習 Node.js 已經兩年之餘，這段時間陸陸續續在開發上遇到一些問題（雷），然而隨著時間累積的叫做經驗，因此藉由此篇文章記錄從本機 development 環境到遠端 Linux 上的 production 所得到的經驗。</p>\n<p><img src=\"http://i.imgur.com/GtZ5ROB.jpg\" alt=\"Deploy\"></p>\n",
      "_id": "xa8kqcobz1cbu95b",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "在 slack 建立 hubot",
      "date": 1460990522000,
      "tags": [
        "afdtpynbx6nae4ni",
        "7j54awv04jfskglg",
        "fg4fiyqd1w8jcfzu",
        "fi3jvt9ynb7qstde"
      ],
      "content":
        "<p>slack 推出 bot 在 2016 這個時間點已經不算新鮮事，隨著 messenger 也推出自家的 bot 後，才真正開始接觸架設自己的 bot，網路上查到都是日文的資源較多，因此記錄這篇過程，希望能幫助到其他中文開發者。</p>\n<p><img src=\"http://i.imgur.com/qzHh7bb.png\" alt=\"slakbot &amp; hubot\"></p>\n<a id=\"more\"></a>\n<h2 id=\"零、懶人包指令\">零、懶人包指令</h2>\n<p>先把會用到的全部指令列在這邊，下面會分項目做解釋</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -<span class=\"keyword\">g</span> hubot coffee-script yo generator-hubot</div><div class=\"line\"><span class=\"built_in\">mkdir</span> hubot</div><div class=\"line\"><span class=\"keyword\">cd</span> hubot</div><div class=\"line\">yo hubot</div><div class=\"line\">npm install hubot-slack --save</div><div class=\"line\">git init</div><div class=\"line\">git <span class=\"built_in\">add</span> .</div><div class=\"line\">git commit -<span class=\"keyword\">m</span> <span class=\"string\">\"Initial commit\"</span></div><div class=\"line\">GET HUBOT_SLACK_TOKEN // http<span class=\"variable\">s:</span>//my.slack.<span class=\"keyword\">com</span>/services/<span class=\"keyword\">new</span>/hubot</div><div class=\"line\">Install the Heroku Toolbelt // http<span class=\"variable\">s:</span>//toolbelt.heroku.<span class=\"keyword\">com</span>/ </div><div class=\"line\">heroku create <span class=\"string\">\"project-name\"</span></div><div class=\"line\">heroku confi<span class=\"variable\">g:add</span> HEROKU_URL=http<span class=\"variable\">s:</span>//<span class=\"string\">\"project-name\"</span>.herokuapp.<span class=\"keyword\">com</span></div><div class=\"line\">heroku confi<span class=\"variable\">g:add</span> HUBOT_SLACK_TOKEN=<span class=\"string\">\"xoxb-********-********\"</span></div><div class=\"line\">git push heroku master</div></pre></td></tr></table></figure>\n\n<h2 id=\"一、安裝本地環境\">一、安裝本地環境</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> -g hubot coffee-script yo generator-hubot</span></div></pre></td></tr></table></figure>\n\n<p>hubot 會用到 coffee-script 和 yo 去產生整個專案，所以需要安裝在全域 <code>-g</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">mkdir</span> hubot</div><div class=\"line\"><span class=\"keyword\">cd</span> hubot</div></pre></td></tr></table></figure>\n\n<p>此處創建資料夾可建立自己的名字</p>\n<h2 id=\"二、產生_hubot_專案\">二、產生 hubot 專案</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">yo</span> hubot</div></pre></td></tr></table></figure>\n\n<p>這邊會問你一些問題，記得在 <code>adapter</code> 打 <code>slack</code><br>此舉會讓官方產生預設 heroku 的 <code>Procfile</code> 裡面多了這一行</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">web</span>: <span class=\"string\">bin/hubot -a slack</span></div></pre></td></tr></table></figure>\n\n<p>這是為了讓 heroku 啟動時候知道怎樣運作的指令</p>\n<h2 id=\"三、安裝_hubot-slack_套件\">三、安裝 hubot-slack 套件</h2>\n<p>這是 slack 官方維護的套件，穩定度應該頗高，安裝後一併做一個專案 git 初始化並 commit</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> hubot-slack <span class=\"comment\">--save</span></span></div><div class=\"line\">git init</div><div class=\"line\">git <span class=\"keyword\">add</span> .</div><div class=\"line\">git <span class=\"keyword\">commit</span> -m <span class=\"string\">\"Initial commit\"</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"四、取得_HUBOT_SLACK_TOKEN\">四、取得 HUBOT_SLACK_TOKEN</h2>\n<p>到<a href=\"https://my.slack.com/services/new/hubot\" target=\"_blank\" rel=\"external\">此處</a>建立新的 hubot service<br>若有多個 team 帳號，請記得確定你登入的帳號是在哪一個 team 底下</p>\n<p>取一個 hubot 要在 slack 內的名字，下圖用 <code>hubot</code> 做示範</p>\n<p><img src=\"http://i.imgur.com/bpsLcz7.png\" alt=\"hubot\"></p>\n<p>接著下一步就可以取得 HUBOT_SLACK_TOKEN，記得把這個 TOKEN 記下來</p>\n<h2 id=\"五、本機端測試\">五、本機端測試</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">HUBOT_SLACK_TOKEN=xoxb-<span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"keyword\">*</span>-<span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"keyword\">*</span><span class=\"keyword\">*</span> ./bin/hubot --adapter slack</div></pre></td></tr></table></figure>\n\n<p>本機端記得先安裝 redis，hubot 會用到，<br>順利的話就可以在 slack 啟動 hubot 囉！</p>\n<p><img src=\"http://i.imgur.com/EWkWV3Q.png\" alt=\"hubot in slack\"><br>可以打開 hubot 跟它對話，<br>如果看到 <code>PONG</code> 則代表成功</p>\n<h2 id=\"六、將本地端_server_放上_heroku\">六、將本地端 server 放上 heroku</h2>\n<p>slack 官方推薦的平台是 heroku，這邊介紹如何運作，<br>要記得的原理就是其實上述已經在本機端可以運行了，<br>這個步驟就是將 server 放到 heroku 上面去跑而已。</p>\n<p>首先安裝 Heroku Toolbelt，這部份請看 <a href=\"https://toolbelt.heroku.com/\" target=\"_blank\" rel=\"external\">heroku 官方教學</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">heroku create <span class=\"string\">\"project-name\"</span></div><div class=\"line\">heroku confi<span class=\"variable\">g:add</span> HEROKU_URL=http<span class=\"variable\">s:</span>//<span class=\"string\">\"project-name\"</span>.herokuapp.<span class=\"keyword\">com</span></div><div class=\"line\">heroku confi<span class=\"variable\">g:add</span> HUBOT_SLACK_TOKEN=<span class=\"string\">\"xoxb-********-********\"</span></div><div class=\"line\">git push heroku master</div></pre></td></tr></table></figure>\n\n<p>這個 project-name 其實就是未來你的 herokuapp 的 URL，<br>不能和其他人重複，因此名字可以想自己容易記得即可。</p>\n<p><code>heroku config:add</code> 是將一些變數丟給遠端的 heroku 知道，<br>讓他可以抓到 <code>HEROKU_URL</code> <code>HUBOT_SLACK_TOKEN</code> 等，<br>接著就是將 local 這個 git repo push 到 heroku 上面。</p>\n<h2 id=\"七、注意事項\">七、注意事項</h2>\n<p>等到 heroku 跑完後，hubot 的 server 已經跑在 heroku 上面了，<br>而免費的 heroku dyno 有每 24 小時一定要停機 6 小時的規定，<br>因此若要拿來當正式的 bot 服務，<br>建議自己架 server 或者就付費買 heroku 的服務。</p>\n<p>另外，在 hubot 專案底下的 <code>hubot-heroku-keepalive</code> 就是會固定戳 heroku，避免 30 分鐘後這個 dyno 就休息了。</p>\n<p>在 heroku 上面有免費的 redis add-on 可以用，<br>每個月有 30mb 的免費使用量。</p>\n<h2 id=\"reference\">reference</h2>\n<ul>\n<li><a href=\"https://hubot.github.com/docs/\" target=\"_blank\" rel=\"external\">hubot official doc</a></li>\n<li><a href=\"https://www.npmjs.com/package/hubot-slack\" target=\"_blank\" rel=\"external\">hubot-slack npm README</a></li>\n<li><a href=\"https://github.com/slackhq/hubot-slack#configuration\" target=\"_blank\" rel=\"external\">hubot configuration on heroku</a> 推薦看這份</li>\n</ul>\n<p>有任何問題，歡迎留言討論。</p>\n",
      "source": "_posts/在-slack-建立-hubot.md",
      "raw":
        "title: 在 slack 建立 hubot\ndate: 2016-04-18 22:42:02\ntags:\n- bot\n- slack\n- hubot\n- heroku\n---\n\nslack 推出 bot 在 2016 這個時間點已經不算新鮮事，隨著 messenger 也推出自家的 bot 後，才真正開始接觸架設自己的 bot，網路上查到都是日文的資源較多，因此記錄這篇過程，希望能幫助到其他中文開發者。\n\n![slakbot & hubot](http://i.imgur.com/qzHh7bb.png)\n\n<!-- more -->\n\n## 零、懶人包指令\n\n先把會用到的全部指令列在這邊，下面會分項目做解釋\n\n```\nnpm install -g hubot coffee-script yo generator-hubot\nmkdir hubot\ncd hubot\nyo hubot\nnpm install hubot-slack --save\ngit init\ngit add .\ngit commit -m \"Initial commit\"\nGET HUBOT_SLACK_TOKEN // https://my.slack.com/services/new/hubot\nInstall the Heroku Toolbelt // https://toolbelt.heroku.com/ \nheroku create \"project-name\"\nheroku config:add HEROKU_URL=https://\"project-name\".herokuapp.com\nheroku config:add HUBOT_SLACK_TOKEN=\"xoxb-********-********\"\ngit push heroku master\n```\n\n## 一、安裝本地環境\n\n```\nnpm install -g hubot coffee-script yo generator-hubot\n```\nhubot 會用到 coffee-script 和 yo 去產生整個專案，所以需要安裝在全域 `-g`\n\n```\nmkdir hubot\ncd hubot\n```\n此處創建資料夾可建立自己的名字\n\n## 二、產生 hubot 專案\n\n```\nyo hubot\n```\n這邊會問你一些問題，記得在 `adapter` 打 `slack`\n此舉會讓官方產生預設 heroku 的 `Procfile` 裡面多了這一行\n```\nweb: bin/hubot -a slack\n```\n這是為了讓 heroku 啟動時候知道怎樣運作的指令\n\n## 三、安裝 hubot-slack 套件\n\n這是 slack 官方維護的套件，穩定度應該頗高，安裝後一併做一個專案 git 初始化並 commit\n```\nnpm install hubot-slack --save\ngit init\ngit add .\ngit commit -m \"Initial commit\"\n```\n\n## 四、取得 HUBOT_SLACK_TOKEN\n\n到[此處](https://my.slack.com/services/new/hubot)建立新的 hubot service\n若有多個 team 帳號，請記得確定你登入的帳號是在哪一個 team 底下\n\n取一個 hubot 要在 slack 內的名字，下圖用 `hubot` 做示範\n\n![hubot](http://i.imgur.com/bpsLcz7.png)\n\n接著下一步就可以取得 HUBOT_SLACK_TOKEN，記得把這個 TOKEN 記下來\n\n## 五、本機端測試\n\n```\nHUBOT_SLACK_TOKEN=xoxb-********-******** ./bin/hubot --adapter slack\n```\n\n本機端記得先安裝 redis，hubot 會用到，\n順利的話就可以在 slack 啟動 hubot 囉！\n\n![hubot in slack](http://i.imgur.com/EWkWV3Q.png)\n可以打開 hubot 跟它對話，\n如果看到 `PONG` 則代表成功\n\n## 六、將本地端 server 放上 heroku\n\nslack 官方推薦的平台是 heroku，這邊介紹如何運作，\n要記得的原理就是其實上述已經在本機端可以運行了，\n這個步驟就是將 server 放到 heroku 上面去跑而已。\n\n首先安裝 Heroku Toolbelt，這部份請看 [heroku 官方教學](https://toolbelt.heroku.com/)\n```\nheroku create \"project-name\"\nheroku config:add HEROKU_URL=https://\"project-name\".herokuapp.com\nheroku config:add HUBOT_SLACK_TOKEN=\"xoxb-********-********\"\ngit push heroku master\n```\n這個 project-name 其實就是未來你的 herokuapp 的 URL，\n不能和其他人重複，因此名字可以想自己容易記得即可。\n\n`heroku config:add` 是將一些變數丟給遠端的 heroku 知道，\n讓他可以抓到 `HEROKU_URL` `HUBOT_SLACK_TOKEN` 等，\n接著就是將 local 這個 git repo push 到 heroku 上面。\n\n## 七、注意事項\n\n等到 heroku 跑完後，hubot 的 server 已經跑在 heroku 上面了，\n而免費的 heroku dyno 有每 24 小時一定要停機 6 小時的規定，\n因此若要拿來當正式的 bot 服務，\n建議自己架 server 或者就付費買 heroku 的服務。\n\n另外，在 hubot 專案底下的 `hubot-heroku-keepalive` 就是會固定戳 heroku，避免 30 分鐘後這個 dyno 就休息了。\n\n在 heroku 上面有免費的 redis add-on 可以用，\n每個月有 30mb 的免費使用量。\n\n## reference\n\n* [hubot official doc](https://hubot.github.com/docs/)\n* [hubot-slack npm README](https://www.npmjs.com/package/hubot-slack)\n* [hubot configuration on heroku](https://github.com/slackhq/hubot-slack#configuration) 推薦看這份\n\n\n有任何問題，歡迎留言討論。",
      "slug": "在-slack-建立-hubot",
      "updated": 1496848435000,
      "excerpt":
        "<p>slack 推出 bot 在 2016 這個時間點已經不算新鮮事，隨著 messenger 也推出自家的 bot 後，才真正開始接觸架設自己的 bot，網路上查到都是日文的資源較多，因此記錄這篇過程，希望能幫助到其他中文開發者。</p>\n<p><img src=\"http://i.imgur.com/qzHh7bb.png\" alt=\"slakbot &amp; hubot\"></p>\n",
      "_id": "gkc2b88mvxsdpuqa",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "node.js 爬 Facebook 留言版",
      "date": 1463493244000,
      "tags": [
        "k0p1j1sphex1vtd4",
        "wwgpfwhx6cu8b079",
        "ytyt1gwvphiuwt25",
        "ifzx4x45ejxynoqr"
      ],
      "content":
        "<p>聽到網路爬蟲，有很多專案都是建立在 python 上面，在文字處理分析上， python 有很強大的套件可以使用，然而隨著 node.js 的發展越來越廣泛，也有許多因應的套件產生，今天將會介紹利用 FB 提供的 Graph API 來爬留言版。</p>\n<p><img src=\"http://i.imgur.com/2Qckxbc.jpg\" alt=\"Facebook Comment Plugin\"></p>\n<a id=\"more\"></a>\n<p>本文並非會有教學範例檔，僅會針對 FB 提供的 Graph API 做簡單的範例。<br>此處的範例會利用 ES6 的 <code>template strings</code> 語法。</p>\n<h2 id=\"1-_了解_FB_留言版架構\">1. 了解 FB 留言版架構</h2>\n<p>最近 FB 推出了可以回覆他人的功能，因此留言有可能會有巢狀情形，但可以觀察到的是，目前 FB 的機制就是至多一層的回覆。因此簡單的架構如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">comment <span class=\"number\">1</span></div><div class=\"line\">  - reply_comment <span class=\"number\">1</span></div><div class=\"line\">  - reply_comment <span class=\"number\">2</span></div><div class=\"line\">comment <span class=\"number\">2</span></div><div class=\"line\">  - reply_comment <span class=\"number\">1</span></div><div class=\"line\">  _ reply_comment <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">...</span></div><div class=\"line\"><span class=\"keyword\">...</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"2-_確定該網址的留言數\">2. 確定該網址的留言數</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">`http:<span class=\"comment\">//graph.facebook.com/?id=${URL}`</span></div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET <span class=\"string\">'http://graph.facebook.com/?id=http://www.google.com'</span></div><div class=\"line\">{</div><div class=\"line\">  id: <span class=\"string\">\"http://www.google.com\"</span>,</div><div class=\"line\">  shares: <span class=\"number\">31205003</span>,</div><div class=\"line\">  comments: <span class=\"number\">1323</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>因此可以知道 www.google.com 在 FB Graph API 有 1323 筆留言數。</p>\n<h2 id=\"3-_利用_Graph_API_拿第一層留言\">3. 利用 Graph API 拿第一層留言</h2>\n<p>Graph API 在留言版其實是公開，只要給定 URL 就可以拿到該網址的留言，<br>這邊要注意的是需要確定該 URL 是 OG:URL 的參數給 FB 才拿的到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">`http:<span class=\"comment\">//graph.facebook.com/comments?id=${URL}&limit=${comments}&filter=stream`</span></div></pre></td></tr></table></figure>\n\n<p>底下是 return sample json</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">  created_time: <span class=\"string\">\"2012-04-16T12:45:03+0000\"</span>,</div><div class=\"line\">  from: {</div><div class=\"line\">    name: <span class=\"string\">\"Sunil Maheshwari\"</span>,</div><div class=\"line\">    id: <span class=\"string\">\"100000525493028\"</span></div><div class=\"line\">  },</div><div class=\"line\">  message: <span class=\"string\">\"hello\"</span>,</div><div class=\"line\">  can_remove: <span class=\"literal\">false</span>,</div><div class=\"line\">  like_count: <span class=\"number\">0</span>,</div><div class=\"line\">  user_likes: <span class=\"literal\">false</span>,</div><div class=\"line\">  id: <span class=\"string\">\"381702034999_21746175\"</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>若此處沒有加上 <code>&amp;limit</code> 的話，會拿到比較少的數量。<br>加上 <code>&amp;filter=stream</code> 參數，則會一併將回覆狀態的留言拿回來。<br>因為在此記錄部落格使用，在實作上並不會加上 <code>&amp;filter=stream</code> 這個參數，以免拿第二層的時候重複還需要做額外處理。</p>\n<h2 id=\"4-_拿_Graph_API_第二層留言\">4. 拿 Graph API 第二層留言</h2>\n<p>在拿第一層的時候，因為是 public API 狀態，因此不需要 token，且網址利用 http 就可以。<br>但在拿第二層留言，就需要 https + access_token 狀態。</p>\n<p>最簡單取得 access_token 方式是到 <a href=\"https://developers.facebook.com/tools/explorer/\" target=\"_blank\" rel=\"external\">FB graph explorer</a> 申請 access_token 來實作。</p>\n<p>接著需要串接的 API 格式為：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">`https:<span class=\"comment\">//graph.facebook.com/${id}/comments?access_token=${token}`</span></div></pre></td></tr></table></figure>\n\n<p>上述 id 就是第一層拿回來的 json 格式內的 id，<br>token 則是 access_token。</p>\n<p>在實作上因為無法透過第一層的 API 得到是否有無第二層留言，因此若要完整的拿取全部的留言，則需要將全部的 id 跑過一次才可以得到完整的結果。</p>\n<h2 id=\"reference\">reference</h2>\n<ul>\n<li><a href=\"http://www.oneminuteinfo.com/2015/06/use-api-to-get-fb-comments-plugin-posts.html\" target=\"_blank\" rel=\"external\">Using Facebook Graph API To Crawl Comments from a Facebook Comments Plugin</a></li>\n<li><a href=\"https://developers.facebook.com/tools/explorer/\" target=\"_blank\" rel=\"external\">FB graph explorer</a></li>\n</ul>\n",
      "source": "_posts/node-js-爬-Facebook-留言版.md",
      "raw":
        "title: node.js 爬 Facebook 留言版\ndate: 2016-05-17 21:54:04\ntags:\n- nodejs\n- api\n- facebook\n- parser\n---\n聽到網路爬蟲，有很多專案都是建立在 python 上面，在文字處理分析上， python 有很強大的套件可以使用，然而隨著 node.js 的發展越來越廣泛，也有許多因應的套件產生，今天將會介紹利用 FB 提供的 Graph API 來爬留言版。\n\n![Facebook Comment Plugin](http://i.imgur.com/2Qckxbc.jpg)\n\n<!-- more -->\n\n本文並非會有教學範例檔，僅會針對 FB 提供的 Graph API 做簡單的範例。\n此處的範例會利用 ES6 的 `template strings` 語法。\n\n## 1. 了解 FB 留言版架構\n\n最近 FB 推出了可以回覆他人的功能，因此留言有可能會有巢狀情形，但可以觀察到的是，目前 FB 的機制就是至多一層的回覆。因此簡單的架構如下：\n\n```\ncomment 1\n  - reply_comment 1\n  - reply_comment 2\ncomment 2\n  - reply_comment 1\n  _ reply_comment 2\n...\n...\n```\n\n## 2. 確定該網址的留言數\n\n```javascript\n`http://graph.facebook.com/?id=${URL}`\n```\n\n``` javascript\nGET 'http://graph.facebook.com/?id=http://www.google.com'\n{\n  id: \"http://www.google.com\",\n  shares: 31205003,\n  comments: 1323\n}\n```\n因此可以知道 www.google.com 在 FB Graph API 有 1323 筆留言數。\n\n## 3. 利用 Graph API 拿第一層留言\n\nGraph API 在留言版其實是公開，只要給定 URL 就可以拿到該網址的留言，\n這邊要注意的是需要確定該 URL 是 OG:URL 的參數給 FB 才拿的到。\n\n```javascript\n`http://graph.facebook.com/comments?id=${URL}&limit=${comments}&filter=stream`\n```\n\n底下是 return sample json\n\n```javascript\n{\n  created_time: \"2012-04-16T12:45:03+0000\",\n  from: {\n    name: \"Sunil Maheshwari\",\n    id: \"100000525493028\"\n  },\n  message: \"hello\",\n  can_remove: false,\n  like_count: 0,\n  user_likes: false,\n  id: \"381702034999_21746175\"\n}\n```\n\n若此處沒有加上 `&limit` 的話，會拿到比較少的數量。\n加上 `&filter=stream` 參數，則會一併將回覆狀態的留言拿回來。\n因為在此記錄部落格使用，在實作上並不會加上 `&filter=stream` 這個參數，以免拿第二層的時候重複還需要做額外處理。\n\n## 4. 拿 Graph API 第二層留言\n\n在拿第一層的時候，因為是 public API 狀態，因此不需要 token，且網址利用 http 就可以。\n但在拿第二層留言，就需要 https + access_token 狀態。\n\n最簡單取得 access_token 方式是到 [FB graph explorer](https://developers.facebook.com/tools/explorer/) 申請 access_token 來實作。\n\n接著需要串接的 API 格式為：\n\n```javascript\n`https://graph.facebook.com/${id}/comments?access_token=${token}`\n```\n\n上述 id 就是第一層拿回來的 json 格式內的 id，\ntoken 則是 access_token。\n\n在實作上因為無法透過第一層的 API 得到是否有無第二層留言，因此若要完整的拿取全部的留言，則需要將全部的 id 跑過一次才可以得到完整的結果。\n\n## reference\n\n* [Using Facebook Graph API To Crawl Comments from a Facebook Comments Plugin](http://www.oneminuteinfo.com/2015/06/use-api-to-get-fb-comments-plugin-posts.html)\n* [FB graph explorer](https://developers.facebook.com/tools/explorer/)\n",
      "slug": "node-js-爬-Facebook-留言版",
      "updated": 1496848435000,
      "excerpt":
        "<p>聽到網路爬蟲，有很多專案都是建立在 python 上面，在文字處理分析上， python 有很強大的套件可以使用，然而隨著 node.js 的發展越來越廣泛，也有許多因應的套件產生，今天將會介紹利用 FB 提供的 Graph API 來爬留言版。</p>\n<p><img src=\"http://i.imgur.com/2Qckxbc.jpg\" alt=\"Facebook Comment Plugin\"></p>\n",
      "_id": "81kpaoxwovw6huql",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "babel 相關名詞簡介",
      "date": 1473780431000,
      "tags": ["6e3g2sasu8ku8mn1", "p3xd2mz4dfjclu33", "p54gt5ufespwezlk"],
      "content":
        "<p><img src=\"https://raw.githubusercontent.com/babel/logo/master/babel.png\" alt=\"\"></p>\n<p>babel 是現代前端工程師都不陌生的工具，它可以將 ES6 (+) 的語法轉換為 ES5 甚至是更低的版本，利用 babel 可以讓開發者即刻享受到 ES6 語法所帶來的便利性。<br>然而許多 babel 相關的名詞卻常常困擾想要入門的新手們，因此利用本文簡介那些與 babel 相關的名詞，以 babel 6 為主。</p>\n<p>本篇將會會介紹到：</p>\n<ul>\n<li>.babelrc</li>\n<li>babel-cli (with babel-node)</li>\n<li>babel-preset vs. babel-plugin</li>\n<li>babel-register</li>\n<li>babel-polyfill</li>\n<li>babel-plugin-transform-runtime ＆ babel-runtime</li>\n<li>babel-loader</li>\n<li>babel-eslint</li>\n</ul>\n<a id=\"more\"></a>\n<p>本文用意並非完善的介紹整個 babel 生態系，而是作者整理自己常見且容易搞錯的 babel 相關名詞。</p>\n<h2 id=\"一、-babelrc\">一、.babelrc</h2>\n<p>這是 <code>babel</code> 這個工具需要用到的設定檔，以下所介紹到的各項都需要該設定檔讓 babel 有轉換的依據。</p>\n<p>方法一：</p>\n<p>直接寫獨立的 <code>.babelrc</code> 檔，一個基本的格式如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">  \"<span class=\"attribute\">presets</span>\": <span class=\"value\">[<span class=\"string\">\"es2015\"</span>]</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>方法二：</p>\n<p>直接寫進 <code>package.json</code> 檔</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"my-package\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"babel\"</span>: {</div><div class=\"line\">    <span class=\"comment\">// your babel config here</span></div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>註：方法二雖然可以這樣寫，但不建議使用，因為在 react-native 會出現<a href=\"https://github.com/mjackson/http-client/pull/7\" target=\"_blank\" rel=\"external\">已知的問題</a>。</p>\n<h2 id=\"二、babel-cli\">二、babel-cli</h2>\n<p>利用 npm 安裝 babel-cli 將會同時註冊 <code>babel</code> 和 <code>babel-node</code> 兩個最常使用的指令。</p>\n<p><code>$ npm install babel-cli --save-dev</code></p>\n<p>利用上述指令安裝在 project 的目錄底下。</p>\n<h3 id=\"babel\">babel</h3>\n<p>可以直接在終端機利用 <code>babel</code> 指令做 ES6 的語法轉換，<br>常用的情景為將 <code>src</code> 資料夾 build 成 <code>lib</code> 資料夾，<br>身為 library 開發者，以不要預設使用者有 ES6 的環境為佳，<br>上述簡單的指令如下：</p>\n<p><code>$ babel src -d lib</code></p>\n<p>若需更多參數，請參考官方教學。</p>\n<h3 id=\"babel-node\">babel-node</h3>\n<p>可以利用 <code>babel-node myEs6.js</code> 直接運行 ES6 的 code，<br>當然需要 .babelrc 檔還有相關的 presets 或是 plugins 做為 babel 轉換的依據。</p>\n<p>而 <code>babel-node</code> 執行的時候會預設載入 <code>babel-polyfill</code> 使用，<br>因此會佔大量的記憶體空間，官方不建議在 production 環境使用。</p>\n<h2 id=\"三、babel-preset_vs-_babel-plugin\">三、babel-preset vs. babel-plugin</h2>\n<p>presets 和 plugins 這兩個 key 在 <code>.babelrc</code> 檔內會很常看到，<br>其中的差異便是一個 preset 可以包含其他不同 presets 或是不同的 plugins。</p>\n<p>例如 <code>babel-preset-es2015</code> 當中包含了<br><code>transform-es2015-arrow-functions</code><br><code>transform-es2015-block-scoped-functions</code><br>等 21 個不同的 plugins。</p>\n<p><strong>順序問題</strong></p>\n<p>babel 在執行 transform 的過程，會 plugins 先載入，且按照由上往下（由左向右）的順序載入，<br>但是要注意的事情，presets 會在 plugins 之後，然後載入的順序是由下往上（由右向左）的反向順序。</p>\n<h3 id=\"stage\">stage</h3>\n<p>babel 針對 stage 有實作幾個不同的 presets，包含了</p>\n<ul>\n<li>preset-stage-0</li>\n<li>preset-stage-1</li>\n<li>preset-stage-2</li>\n<li>preset-stage-3</li>\n</ul>\n<p>stage 數字越大的 preset 所包含的 plugins 代表即將進入 <a href=\"https://github.com/tc39/proposals\" target=\"_blank\" rel=\"external\">ECMA262 standard</a>, <a href=\"https://tc39.github.io/process-document/\" target=\"_blank\" rel=\"external\">TC39 Process</a>，<br>官方預設的範例 stage 0 的 preset 使用就是因為其包含了 stage 1, 2, 3 的 presets，<br>而許多開發者直接用 stage 0，會把全部 stage 都載入，建議花時間了解各個 preset-stage 分別載入哪些 plugins 為佳。</p>\n<p>stage 是會隨著時間演進，在不同的階段所看到的 stage 內容可能都不一樣。</p>\n<h2 id=\"四、babel-register\">四、babel-register</h2>\n<p>當載入 <code>babel-register</code> 後，其接下來的 es6 語法都可以被設定的 .babelrc 做轉換，</p>\n<p>載入的方式有兩種：</p>\n<p>方法一：</p>\n<p>額外建立一個進入點檔案，由於在這個進入點 node 並不知道 es6 語法，<br>因此於此需要利用 <code>require(&#39;babel-register&#39;)</code> 的方式載入</p>\n<p>進入點檔名以 <code>entry.js</code> 為例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-register'</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./yourEs6Index'</span>);</div></pre></td></tr></table></figure>\n\n<p>因此未來執行 <code>node entry.js</code> 就可以利用 <code>babel-register</code> 動態載入的方式進行轉換語法。</p>\n<p>方法二：</p>\n<p>在終端機執行 <code>node</code> 的時候，直接利用 <code>-r</code> 參數帶入 <code>babel-register</code>，<code>-r</code> 等於 <code>--require</code> 代表 module to preload</p>\n<p><code>$ node -r babel-register yourEs6Index.js</code></p>\n<h2 id=\"五、babel-polyfill\">五、babel-polyfill</h2>\n<p>什麼是 <code>polyfill</code>?</p>\n<p>wiki: In web development, a polyfill is code that implements a feature on web browsers that do not support the feature.</p>\n<p>因此 <code>babel-polyfill</code> 顧名思義就是 babel 幫我們做了一些現階段還沒有被各家瀏覽器通用支援的 feature，好讓我們在現階段就可以利用一些未來原生的語法，例如：<code>Promise</code>, <code>Array.from</code>, <code>Object.assign</code>, <code>Array.includes</code> 等。<br>像是 Chrome 對於 es6 的支援度一直以來都蠻高的，但是並非每家瀏覽器廠商都能支援，因此需要有 polyfill。</p>\n<p><strong>babel-node</strong><br>當利用 babel-node 去運行 js 檔的時候，會<strong>預設</strong>載入 <code>babel-polyfill</code>，<br>因此你即可利用 babel-node run 一個帶有 promise 的 js 檔，<br>而不需再另外 require <code>bluebird</code> 等套件。</p>\n<p><strong>babel-polyfill</strong><br>主要 includes 了 <a href=\"https://github.com/facebook/regenerator/tree/master/packages/regenerator-runtime\" target=\"_blank\" rel=\"external\">regenerator runtime</a> 和 <a href=\"https://github.com/zloirock/core-js\" target=\"_blank\" rel=\"external\">core-js</a>。<br><code>regenerator runtime</code> 就是將 generator/async 轉換成 es5 語法，而 <code>core-js</code> 是 Modular standard library for JavaScript 集合，詳細請參閱連結。</p>\n<h2 id=\"六、babel-plugin-transform-runtime_＆_babel-runtime\">六、babel-plugin-transform-runtime ＆ babel-runtime</h2>\n<p>在做轉換的時候，若利用 <code>babel-polyfill</code> 會做 global scope，所以當你今天是要做 lib/tool 模式，沒辦法控制你的運行環境，則不適合利用 babel-polyfill，需要用 <code>babel-plugin-transform-runtime</code> 為佳。</p>\n<ol>\n<li><code>babel-plugin-transform-runtime</code> 會把多個檔案 reference 到 <code>babel-runtime</code> 這個 package，因此當你使用 <code>transform-runtime</code> 就一定要裝 <code>babel-runtime</code></li>\n<li><code>babel-plugin-transform-runtime</code> 的轉換機制也是 alias 到 <code>core-js</code>，就和 <code>babel-polyfill</code> 一樣，所以不用再 require <code>babel-polyfill</code></li>\n<li>官方建議安裝方法如下： transform 安裝進 devDependencies</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save-dev babel-plugin-transform-runtime</div><div class=\"line\">$ npm install --save babel-runtime</div></pre></td></tr></table></figure>\n\n<h2 id=\"七、babel-loader\">七、babel-loader</h2>\n<p><code>loader</code> 是 <code>webpack</code> 用來載入各種不同類型檔案的套件，而 <code>babel-loader</code> 讓 webpack 可以用來執行 babel 轉換的的一種套件。</p>\n<p>利用 <code>babel-loader</code> 可以利用 webpack 打包時候同時進行 babel 的轉換，以下是簡單範例檔：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>: {</div><div class=\"line\">  loaders: [</div><div class=\"line\">    {</div><div class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">      loaders: [<span class=\"string\">'babel'</span>],</div><div class=\"line\">      exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">    },</div><div class=\"line\">  ],</div><div class=\"line\">},</div></pre></td></tr></table></figure>\n\n<p>因為 <code>babel-loader</code> 的速度很慢，官方建議把 <code>node_modules</code> exclude 掉。</p>\n<h2 id=\"八、babel-eslint\">八、babel-eslint</h2>\n<p><code>ESLint</code> 堪稱是近代偉大的 linter 發明之一，它可以讓使用者高度客製化的 parser 語法，而目前原生的 ESLint 支援的語法有 <code>ES6/ES7</code>, <code>JSX</code>, and <code>object rest/spread</code>，如果你用到的更多 babel 語法則需要 babel-eslint 來幫忙。</p>\n<p><code>$ npm install eslint@3.x babel-eslint@6 --save-dev</code></p>\n<p>.eslintrc 範例檔</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">  \"<span class=\"attribute\">parser</span>\": <span class=\"value\"><span class=\"string\">\"babel-eslint\"</span></span>,</div><div class=\"line\">  \"<span class=\"attribute\">rules</span>\": <span class=\"value\">{</span></div><div class=\"line\">    \"<span class=\"attribute\">strict</span>\": <span class=\"value\"><span class=\"number\">0</span></span></div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"結論\">結論</h2>\n<p>當然 babel 的套件不僅僅如此，還有 <a href=\"https://github.com/babel/babelify\" target=\"_blank\" rel=\"external\">babelify</a>, <a href=\"https://github.com/babel/babili\" target=\"_blank\" rel=\"external\">babili</a> 等許多相關工具尚未有時間介紹，本篇所提及的介紹希望能對於部分開發者有幫助。<br>若有不清楚或者會誤導讀者的方向，還請不吝指教。</p>\n",
      "source": "_posts/babel-相關名詞簡介.md",
      "raw":
        "title: babel 相關名詞簡介\ndate: 2016-09-13 23:27:11\ntags:\n- babel\n- es6\n- js\n---\n\n![](https://raw.githubusercontent.com/babel/logo/master/babel.png)\n\nbabel 是現代前端工程師都不陌生的工具，它可以將 ES6 (+) 的語法轉換為 ES5 甚至是更低的版本，利用 babel 可以讓開發者即刻享受到 ES6 語法所帶來的便利性。\n然而許多 babel 相關的名詞卻常常困擾想要入門的新手們，因此利用本文簡介那些與 babel 相關的名詞，以 babel 6 為主。\n\n本篇將會會介紹到：\n* .babelrc\n* babel-cli (with babel-node)\n* babel-preset vs. babel-plugin\n* babel-register\n* babel-polyfill\n* babel-plugin-transform-runtime ＆ babel-runtime\n* babel-loader\n* babel-eslint\n\n\n<!-- more -->\n\n本文用意並非完善的介紹整個 babel 生態系，而是作者整理自己常見且容易搞錯的 babel 相關名詞。\n\n## 一、.babelrc\n\n這是 `babel` 這個工具需要用到的設定檔，以下所介紹到的各項都需要該設定檔讓 babel 有轉換的依據。\n\n方法一：\n\n直接寫獨立的 `.babelrc` 檔，一個基本的格式如下：\n\n```json\n{\n  \"presets\": [\"es2015\"]\n}\n```\n\n方法二：\n\n直接寫進 `package.json` 檔\n```\n{\n  \"name\": \"my-package\",\n  \"version\": \"1.0.0\",\n  \"babel\": {\n    // your babel config here\n  }\n}\n```\n\n註：方法二雖然可以這樣寫，但不建議使用，因為在 react-native 會出現[已知的問題](https://github.com/mjackson/http-client/pull/7)。\n\n## 二、babel-cli\n\n利用 npm 安裝 babel-cli 將會同時註冊 `babel` 和 `babel-node` 兩個最常使用的指令。\n\n`$ npm install babel-cli --save-dev`\n\n利用上述指令安裝在 project 的目錄底下。\n\n### babel\n\n可以直接在終端機利用 `babel` 指令做 ES6 的語法轉換，\n常用的情景為將 `src` 資料夾 build 成 `lib` 資料夾，\n身為 library 開發者，以不要預設使用者有 ES6 的環境為佳，\n上述簡單的指令如下：\n\n`$ babel src -d lib`\n\n若需更多參數，請參考官方教學。\n\n### babel-node\n\n可以利用 `babel-node myEs6.js` 直接運行 ES6 的 code，\n當然需要 .babelrc 檔還有相關的 presets 或是 plugins 做為 babel 轉換的依據。\n\n而 `babel-node` 執行的時候會預設載入 `babel-polyfill` 使用，\n因此會佔大量的記憶體空間，官方不建議在 production 環境使用。\n\n## 三、babel-preset vs. babel-plugin\n\npresets 和 plugins 這兩個 key 在 `.babelrc` 檔內會很常看到，\n其中的差異便是一個 preset 可以包含其他不同 presets 或是不同的 plugins。\n\n例如 `babel-preset-es2015` 當中包含了\n`transform-es2015-arrow-functions`\n`transform-es2015-block-scoped-functions`\n等 21 個不同的 plugins。\n\n**順序問題**\n\nbabel 在執行 transform 的過程，會 plugins 先載入，且按照由上往下（由左向右）的順序載入，\n但是要注意的事情，presets 會在 plugins 之後，然後載入的順序是由下往上（由右向左）的反向順序。\n\n### stage\n\nbabel 針對 stage 有實作幾個不同的 presets，包含了\n- preset-stage-0\n- preset-stage-1\n- preset-stage-2\n- preset-stage-3\n\nstage 數字越大的 preset 所包含的 plugins 代表即將進入 [ECMA262 standard](https://github.com/tc39/proposals), [TC39 Process](https://tc39.github.io/process-document/)，\n官方預設的範例 stage 0 的 preset 使用就是因為其包含了 stage 1, 2, 3 的 presets，\n而許多開發者直接用 stage 0，會把全部 stage 都載入，建議花時間了解各個 preset-stage 分別載入哪些 plugins 為佳。\n\nstage 是會隨著時間演進，在不同的階段所看到的 stage 內容可能都不一樣。\n\n## 四、babel-register\n\n當載入 `babel-register` 後，其接下來的 es6 語法都可以被設定的 .babelrc 做轉換，\n\n載入的方式有兩種：\n\n方法一：\n\n額外建立一個進入點檔案，由於在這個進入點 node 並不知道 es6 語法，\n因此於此需要利用 `require('babel-register')` 的方式載入\n\n進入點檔名以 `entry.js` 為例：\n```js\nrequire('babel-register');\nrequire('./yourEs6Index');\n```\n\n因此未來執行 `node entry.js` 就可以利用 `babel-register` 動態載入的方式進行轉換語法。\n\n方法二：\n\n在終端機執行 `node` 的時候，直接利用 `-r` 參數帶入 `babel-register`，`-r` 等於 `--require` 代表 module to preload\n\n`$ node -r babel-register yourEs6Index.js`\n\n\n## 五、babel-polyfill\n\n什麼是 `polyfill`?\n\nwiki: In web development, a polyfill is code that implements a feature on web browsers that do not support the feature.\n\n因此 `babel-polyfill` 顧名思義就是 babel 幫我們做了一些現階段還沒有被各家瀏覽器通用支援的 feature，好讓我們在現階段就可以利用一些未來原生的語法，例如：`Promise`, `Array.from`, `Object.assign`, `Array.includes` 等。\n像是 Chrome 對於 es6 的支援度一直以來都蠻高的，但是並非每家瀏覽器廠商都能支援，因此需要有 polyfill。\n\n**babel-node**\n當利用 babel-node 去運行 js 檔的時候，會**預設**載入 `babel-polyfill`，\n因此你即可利用 babel-node run 一個帶有 promise 的 js 檔，\n而不需再另外 require `bluebird` 等套件。\n\n**babel-polyfill**\n主要 includes 了 [regenerator runtime](https://github.com/facebook/regenerator/tree/master/packages/regenerator-runtime) 和 [core-js](https://github.com/zloirock/core-js)。\n`regenerator runtime` 就是將 generator/async 轉換成 es5 語法，而 `core-js` 是 Modular standard library for JavaScript 集合，詳細請參閱連結。\n\n## 六、babel-plugin-transform-runtime ＆ babel-runtime\n\n在做轉換的時候，若利用 `babel-polyfill` 會做 global scope，所以當你今天是要做 lib/tool 模式，沒辦法控制你的運行環境，則不適合利用 babel-polyfill，需要用 `babel-plugin-transform-runtime` 為佳。\n\n1. `babel-plugin-transform-runtime` 會把多個檔案 reference 到 `babel-runtime` 這個 package，因此當你使用 `transform-runtime` 就一定要裝 `babel-runtime`\n2. `babel-plugin-transform-runtime` 的轉換機制也是 alias 到 `core-js`，就和 `babel-polyfill` 一樣，所以不用再 require `babel-polyfill`\n3. 官方建議安裝方法如下： transform 安裝進 devDependencies\n\n```bash\n$ npm install --save-dev babel-plugin-transform-runtime\n$ npm install --save babel-runtime\n```\n\n\n## 七、babel-loader\n\n`loader` 是 `webpack` 用來載入各種不同類型檔案的套件，而 `babel-loader` 讓 webpack 可以用來執行 babel 轉換的的一種套件。\n\n利用 `babel-loader` 可以利用 webpack 打包時候同時進行 babel 的轉換，以下是簡單範例檔：\n```js\nmodule: {\n  loaders: [\n    {\n      test: /\\.js$/,\n      loaders: ['babel'],\n      exclude: /node_modules/,\n    },\n  ],\n},\n```\n\n因為 `babel-loader` 的速度很慢，官方建議把 `node_modules` exclude 掉。\n\n## 八、babel-eslint\n\n`ESLint` 堪稱是近代偉大的 linter 發明之一，它可以讓使用者高度客製化的 parser 語法，而目前原生的 ESLint 支援的語法有 `ES6/ES7`, `JSX`, and `object rest/spread`，如果你用到的更多 babel 語法則需要 babel-eslint 來幫忙。\n\n`$ npm install eslint@3.x babel-eslint@6 --save-dev`\n\n.eslintrc 範例檔\n\n```json\n{\n  \"parser\": \"babel-eslint\",\n  \"rules\": {\n    \"strict\": 0\n  }\n}\n```\n\n## 結論\n\n當然 babel 的套件不僅僅如此，還有 [babelify](https://github.com/babel/babelify), [babili](https://github.com/babel/babili) 等許多相關工具尚未有時間介紹，本篇所提及的介紹希望能對於部分開發者有幫助。\n若有不清楚或者會誤導讀者的方向，還請不吝指教。\n",
      "slug": "babel-相關名詞簡介",
      "updated": 1496848435000,
      "excerpt":
        "<p><img src=\"https://raw.githubusercontent.com/babel/logo/master/babel.png\" alt=\"\"></p>\n<p>babel 是現代前端工程師都不陌生的工具，它可以將 ES6 (+) 的語法轉換為 ES5 甚至是更低的版本，利用 babel 可以讓開發者即刻享受到 ES6 語法所帶來的便利性。<br>然而許多 babel 相關的名詞卻常常困擾想要入門的新手們，因此利用本文簡介那些與 babel 相關的名詞，以 babel 6 為主。</p>\n<p>本篇將會會介紹到：</p>\n<ul>\n<li>.babelrc</li>\n<li>babel-cli (with babel-node)</li>\n<li>babel-preset vs. babel-plugin</li>\n<li>babel-register</li>\n<li>babel-polyfill</li>\n<li>babel-plugin-transform-runtime ＆ babel-runtime</li>\n<li>babel-loader</li>\n<li>babel-eslint</li>\n</ul>\n",
      "_id": "1y2jntj7dhv1phcg",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "JavaScript 變數宣告",
      "date": 1474098091000,
      "tags": ["p54gt5ufespwezlk"],
      "content":
        "<p>JS 宣告變數的方式在 ES6 之後增加了 <code>let</code> 和 <code>const</code>，這篇文章將會談談 <code>var</code>、<code>let</code> 和 <code>const</code>之間的差異。</p>\n<p><img src=\"http://i.imgur.com/Jgd8jj5.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"變數宣告的過程\">變數宣告的過程</h2>\n<p><img src=\"http://i.imgur.com/ya351ON.png\" alt=\"\"></p>\n<p>如圖所見，JS 內變數的宣告總共會經歷三個階段</p>\n<ul>\n<li>Declaration: 在相對應的作用域範圍內註冊變數名字</li>\n<li>Initialization: 分配記憶體使用</li>\n<li>Assignment: 賦予該變數的值</li>\n</ul>\n<h2 id=\"var\">var</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x; <span class=\"comment\">// Declaration, Initialization</span></div><div class=\"line\">x = <span class=\"string\">\"Hello World\"</span>; <span class=\"comment\">// Assignment</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// all in one line</span></div><div class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"string\">\"Hello World\"</span>;</div></pre></td></tr></table></figure>\n\n<p><code>var</code> 廣泛被使用，直到 ES6 推出後才有了其他的替代方式，而如果 var 被宣告在函數內，則沒有辦法在函數外部取得該變數。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someFunc</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">var</span> innerVar = <span class=\"string\">'hi'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> innerVar;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"built_in\">console</span>.log(innerVar) <span class=\"comment\">// ReferenceError: innerVar is not defined</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"let\">let</h2>\n<p>在 ES6 後，出現了 <code>let</code> 的方式宣告變數，它和 <code>var</code> 有共同的作用，便是在函數中封閉，額外的效果是在 block statement 內也是封閉，作用域變得更小範圍，可以減少錯誤的發生。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> x; <span class=\"comment\">// Declaration, Initialization</span></div><div class=\"line\">x = <span class=\"string\">\"Hello World\"</span>; <span class=\"comment\">// Assignment</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// all in one line</span></div><div class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"string\">\"Hello World\"</span>;</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {</div><div class=\"line\">  <span class=\"keyword\">let</span> innerLet = <span class=\"string\">'hi'</span>;</div><div class=\"line\">} <span class=\"keyword\">else</span> {</div><div class=\"line\">  <span class=\"comment\">// do nothing</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(innerLet); <span class=\"comment\">// ReferenceError: innerLet is not defined</span></div></pre></td></tr></table></figure>\n\n<p>上述例子代表 innerLet 只能在 block statement 內存活，跳出這個 block statement 就無法取得，我們將 let 換成 var 看看：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {</div><div class=\"line\">  <span class=\"keyword\">var</span> innerLet = <span class=\"string\">'hi'</span>;</div><div class=\"line\">} <span class=\"keyword\">else</span> {</div><div class=\"line\">  <span class=\"comment\">// do nothing</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(innerLet); <span class=\"comment\">// hi</span></div></pre></td></tr></table></figure>\n\n<p>由上述可以清楚看到將 <code>let</code> 宣告的方式改成 <code>var</code> 則可以在 block statement 之外取得該變數，這就是 <code>let</code> 相對於 <code>var</code> 作用域更小的關係。</p>\n<h2 id=\"const\">const</h2>\n<p><code>const</code> 顧名思義就是 constant 的縮寫，ES6 新的語法，代表說只要當宣告過後，該賦予的值就不能被更動，更嚴格來說，是該變數指向的記憶體位址不能被更動。因此，當利用 const 宣告了 <code>Array</code> 或是 <code>Object</code>，只要不重新賦予值，而是更動 array 或 object 內部狀況，是可以被接受的操作方式，參考以下例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.14159</span>;</div><div class=\"line\">PI = <span class=\"number\">3.1415926</span>; <span class=\"comment\">// TypeError: Assignment to constant variable.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> arr = [];</div><div class=\"line\">arr.push(PI); <span class=\"comment\">// [ 3.14159 ];</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> obj = {};</div><div class=\"line\">obj.pi = PI; <span class=\"comment\">// { pi: 3.14159 };</span></div><div class=\"line\"></div><div class=\"line\">arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); <span class=\"comment\">// TypeError: Assignment to constant variable.</span></div><div class=\"line\">obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// TypeError: Assignment to constant variable.</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"Hoisting\">Hoisting</h2>\n<p>在利用 <code>var</code>, <code>let</code>, <code>const</code> 宣告變數的時候，變數都會自動的做 <code>Hoisting</code>，也就是被抬升到該作用域的最高處，但是抬升過後，<code>var</code> 會對於變數賦予值 <code>undefined</code>，而 <code>let</code>, <code>const</code>一樣也會被抬升，但是沒有初始值，因此會有 ReferenceError 發生。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(hello); <span class=\"comment\">// undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> hello;</div><div class=\"line\">hello = <span class=\"string\">\"I'm a variable\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(world); <span class=\"comment\">// ReferenceError: world is not defined</span></div><div class=\"line\"><span class=\"keyword\">let</span> world;</div><div class=\"line\">world = <span class=\"string\">\"I'm a variable\"</span>;</div></pre></td></tr></table></figure>\n\n<h2 id=\"結論\">結論</h2>\n<p>在 ES6 推出後，應該盡可能的利用 <code>let</code> 和 <code>const</code> 去宣告變數，因為它們的限制更高，會減少出錯的機會。若有使用 ESLint，甚至有條件限制使用 <code>var</code>。若是情況一定需要使用 <code>var</code>，也應該在作用域的最一開始就宣告變數，以免發生 hoisting 導致無法預期的結果出現。</p>\n<h3 id=\"reference\">reference</h3>\n<ul>\n<li><a href=\"https://www.sitepoint.com/how-to-declare-variables-javascript/\" target=\"_blank\" rel=\"external\">How to Declare Variables in Javascript</a></li>\n<li><a href=\"https://github.com/rccoder/blog/issues/15\" target=\"_blank\" rel=\"external\">如何在 JavaScript 中声明变量</a></li>\n</ul>\n",
      "source": "_posts/JavaScript-變數宣告.md",
      "raw":
        "title: JavaScript 變數宣告\ndate: 2016-09-17 15:41:31\ntags:\n- js\n---\n\nJS 宣告變數的方式在 ES6 之後增加了 `let` 和 `const`，這篇文章將會談談 `var`、`let` 和 `const`之間的差異。\n\n![](http://i.imgur.com/Jgd8jj5.jpg)\n\n<!-- more -->\n\n## 變數宣告的過程\n\n![](http://i.imgur.com/ya351ON.png)\n\n如圖所見，JS 內變數的宣告總共會經歷三個階段\n* Declaration: 在相對應的作用域範圍內註冊變數名字\n* Initialization: 分配記憶體使用\n* Assignment: 賦予該變數的值\n\n## var\n\n```js\nvar x; // Declaration, Initialization\nx = \"Hello World\"; // Assignment\n\n// all in one line\nvar y = \"Hello World\";\n```\n\n`var` 廣泛被使用，直到 ES6 推出後才有了其他的替代方式，而如果 var 被宣告在函數內，則沒有辦法在函數外部取得該變數。\n\n```js\nfunction someFunc() {\n  var innerVar = 'hi';\n  return innerVar;\n}\nconsole.log(innerVar) // ReferenceError: innerVar is not defined\n```\n\n## let\n\n在 ES6 後，出現了 `let` 的方式宣告變數，它和 `var` 有共同的作用，便是在函數中封閉，額外的效果是在 block statement 內也是封閉，作用域變得更小範圍，可以減少錯誤的發生。\n\n```js\nlet x; // Declaration, Initialization\nx = \"Hello World\"; // Assignment\n\n// all in one line\nlet y = \"Hello World\";\n```\n\n```js\nif (true) {\n  let innerLet = 'hi';\n} else {\n  // do nothing\n}\n\nconsole.log(innerLet); // ReferenceError: innerLet is not defined\n```\n\n上述例子代表 innerLet 只能在 block statement 內存活，跳出這個 block statement 就無法取得，我們將 let 換成 var 看看：\n\n```js\nif (true) {\n  var innerLet = 'hi';\n} else {\n  // do nothing\n}\n\nconsole.log(innerLet); // hi\n```\n\n由上述可以清楚看到將 `let` 宣告的方式改成 `var` 則可以在 block statement 之外取得該變數，這就是 `let` 相對於 `var` 作用域更小的關係。\n\n## const\n\n`const` 顧名思義就是 constant 的縮寫，ES6 新的語法，代表說只要當宣告過後，該賦予的值就不能被更動，更嚴格來說，是該變數指向的記憶體位址不能被更動。因此，當利用 const 宣告了 `Array` 或是 `Object`，只要不重新賦予值，而是更動 array 或 object 內部狀況，是可以被接受的操作方式，參考以下例子：\n\n```js\nconst PI = 3.14159;\nPI = 3.1415926; // TypeError: Assignment to constant variable.\n\nconst arr = [];\narr.push(PI); // [ 3.14159 ];\n\nconst obj = {};\nobj.pi = PI; // { pi: 3.14159 };\n\narr = new Array(); // TypeError: Assignment to constant variable.\nobj = new Object(); // TypeError: Assignment to constant variable.\n```\n\n## Hoisting\n\n在利用 `var`, `let`, `const` 宣告變數的時候，變數都會自動的做 `Hoisting`，也就是被抬升到該作用域的最高處，但是抬升過後，`var` 會對於變數賦予值 `undefined`，而 `let`, `const`一樣也會被抬升，但是沒有初始值，因此會有 ReferenceError 發生。\n\n```js\nconsole.log(hello); // undefined\nvar hello;\nhello = \"I'm a variable\";\n\nconsole.log(world); // ReferenceError: world is not defined\nlet world;\nworld = \"I'm a variable\";\n```\n\n## 結論\n\n在 ES6 推出後，應該盡可能的利用 `let` 和 `const` 去宣告變數，因為它們的限制更高，會減少出錯的機會。若有使用 ESLint，甚至有條件限制使用 `var`。若是情況一定需要使用 `var`，也應該在作用域的最一開始就宣告變數，以免發生 hoisting 導致無法預期的結果出現。\n\n### reference\n- [How to Declare Variables in Javascript](https://www.sitepoint.com/how-to-declare-variables-javascript/)\n- [如何在 JavaScript 中声明变量](https://github.com/rccoder/blog/issues/15)\n",
      "slug": "JavaScript-變數宣告",
      "updated": 1496848435000,
      "excerpt":
        "<p>JS 宣告變數的方式在 ES6 之後增加了 <code>let</code> 和 <code>const</code>，這篇文章將會談談 <code>var</code>、<code>let</code> 和 <code>const</code>之間的差異。</p>\n<p><img src=\"http://i.imgur.com/Jgd8jj5.jpg\" alt=\"\"></p>\n",
      "_id": "gs9upngern3u3dk4",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "將 JS Callback 轉成 Promise",
      "date": 1481846277000,
      "tags": ["6qb04dypb46ix2vt", "p54gt5ufespwezlk"],
      "content":
        "<p>隨著越來越多 JS 開發者的提倡，越來越多人擁抱 ES6(+) 的語法，其所帶來的好處讓許多開發者願意接受。</p>\n<p>然而一些新接觸的開發者，在流程控制上會聽聞 Promise 的好處進而開始使用，但較早期的套件會遵循著 node.js style 的 Callback；因此本篇文章將會介紹如何將這類 Callback 利用套件轉成 Promise。</p>\n<p><img src=\"http://i.imgur.com/Xhzct6v.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"Node-js_Style_Callback\">Node.js Style Callback</h2>\n<p>在 JS 的流程處理上，有許多人一定會遇見 Callback function，而 node.js 有獨特的規範，遵循著這類規範會讓更多開發者受益，這類的 Callback 被稱為 <code>Error-First Callbacks</code>。</p>\n<ul>\n<li>非同步的 Callback function 第一個參數是錯誤物件，有錯誤就會回傳錯誤訊息，沒有錯誤則第一個值會是 null。剩下的參數為 Callback function 正常情況下會回傳的值。</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.readFile<span class=\"function\"><span class=\"params\">(<span class=\"string\">'/etc/passwd'</span>, (err, data) =&gt; {</span></span></div><div class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err; <span class=\"regexp\">//</span> 此處為 Node.js Style Callback</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<h2 id=\"thenify_套件使用\">thenify 套件使用</h2>\n<h4 id=\"使用情境\">使用情境</h4>\n<p>將會是把第三方套件 Node.js Style Callback 轉成 Promise，接著就可以 <code>.then()</code> 或者是利用 <code>async</code> <code>await</code> 去處理流程了。值得一提此套件利用的是 <code>any-promise</code>，理論上你可以隨時的設置你想要的 Promise 實作。</p>\n<h4 id=\"使用方法\">使用方法</h4>\n<p>因為 README 上面寫的蠻不清楚，以下列出幾種狀況，也推薦看套件的測試檔案<a href=\"https://github.com/thenables/thenify/blob/master/test/test.js\" target=\"_blank\" rel=\"external\">範例</a>：</p>\n<p>範例一：非同步 function 直接接收 cb</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(cb)</span> </span>{</div><div class=\"line\">  <span class=\"comment\">// 處理複雜流程</span></div><div class=\"line\">  cb(<span class=\"literal\">null</span>, <span class=\"literal\">true</span>)</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> p = thenify(fn); <span class=\"comment\">// p is a promise now.</span></div><div class=\"line\"></div><div class=\"line\">p().then(val =&gt; <span class=\"built_in\">console</span>.log(val)) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n\n<p>範例二：非同步 function 直接接收 cb，該 cb 回傳多個參數</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(cb)</span> </span>{</div><div class=\"line\">  <span class=\"comment\">// 處理複雜流程</span></div><div class=\"line\">  cb(<span class=\"literal\">null</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 除了第一個 error msg 外，回傳多個值</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> p = thenify(fn); <span class=\"comment\">// p is a promise now.</span></div><div class=\"line\"></div><div class=\"line\">p().then(val =&gt; <span class=\"built_in\">console</span>.log(val)) <span class=\"comment\">// [1, 2, 3]，會轉成 array</span></div></pre></td></tr></table></figure>\n\n<p>範例三：非同步 function 直接接收多個參數及 cb，該 cb 亦接受多個參數</p>\n<p><strong>此範例為最常被使用功能，關鍵點為 cb 位在 fn 的最後一個參數，且此 cb 遵循著上述提到的 Node.js Style Callback。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">(a, b, c, cb)</span> </span>{</div><div class=\"line\">  <span class=\"comment\">// 處理複雜流程</span></div><div class=\"line\">  cb(<span class=\"literal\">null</span>, a, b); <span class=\"comment\">// 最後回傳 error msg(null) 和 a, b</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> p = thenify(fn); <span class=\"comment\">// p is a promise now.</span></div><div class=\"line\"></div><div class=\"line\">p(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).then(values =&gt; <span class=\"built_in\">console</span>.log(values)); <span class=\"comment\">// [1, 2]，callback 回傳的值，一樣會包成 array</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"結論\">結論</h2>\n<p>隨著 node 核心原生支援的語法越來越多，選擇利用 babel 搭配就可以在此時享受到 Promise 甚至是 async, await 語法帶來的好處，然而較早期的套件甚至不預設回傳 Promise，此時便需要一些工具的幫助。</p>\n<p>希望這篇文章能幫助到那些一接觸學習 JS 流程控制就享受到 Promise 好處，但實務上卻不太理解如何處理原生或第三方套件這類 Callback function 的開發者。</p>\n<h2 id=\"reference\">reference</h2>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/thenify\" target=\"_blank\" rel=\"external\">thenify package</a></li>\n<li><a href=\"http://eddychang.me/blog/javascript/57-node-js-error-first-callback.html\" target=\"_blank\" rel=\"external\">Node.js error-first callback</a></li>\n<li><a href=\"http://welefen.com/post/how-to-convert-callback-to-promise.html\" target=\"_blank\" rel=\"external\">如何把 Callback 接口包装成 Promise 接口</a></li>\n</ul>\n",
      "source": "_posts/將-JS-Callback-變成-Promise.md",
      "raw":
        "title: 將 JS Callback 轉成 Promise\ndate: 2016-12-16 07:57:57\ntags:\n- promise\n- js\n---\n\n隨著越來越多 JS 開發者的提倡，越來越多人擁抱 ES6(+) 的語法，其所帶來的好處讓許多開發者願意接受。\n\n然而一些新接觸的開發者，在流程控制上會聽聞 Promise 的好處進而開始使用，但較早期的套件會遵循著 node.js style 的 Callback；因此本篇文章將會介紹如何將這類 Callback 利用套件轉成 Promise。\n\n![](http://i.imgur.com/Xhzct6v.png)\n\n<!-- more -->\n\n## Node.js Style Callback\n\n在 JS 的流程處理上，有許多人一定會遇見 Callback function，而 node.js 有獨特的規範，遵循著這類規範會讓更多開發者受益，這類的 Callback 被稱為 `Error-First Callbacks`。\n\n* 非同步的 Callback function 第一個參數是錯誤物件，有錯誤就會回傳錯誤訊息，沒有錯誤則第一個值會是 null。剩下的參數為 Callback function 正常情況下會回傳的值。\n\n```\nfs.readFile('/etc/passwd', (err, data) => {\n  if (err) throw err; // 此處為 Node.js Style Callback\n  console.log(data);\n});\n```\n\n## thenify 套件使用\n\n#### 使用情境\n\n將會是把第三方套件 Node.js Style Callback 轉成 Promise，接著就可以 `.then()` 或者是利用 `async` `await` 去處理流程了。值得一提此套件利用的是 `any-promise`，理論上你可以隨時的設置你想要的 Promise 實作。\n\n#### 使用方法\n\n因為 README 上面寫的蠻不清楚，以下列出幾種狀況，也推薦看套件的測試檔案[範例](https://github.com/thenables/thenify/blob/master/test/test.js)：\n\n範例一：非同步 function 直接接收 cb\n\n```javascript\nfunction fn(cb) {\n  // 處理複雜流程\n  cb(null, true)\n}\n\nconst p = thenify(fn); // p is a promise now.\n\np().then(val => console.log(val)) // true\n```\n\n範例二：非同步 function 直接接收 cb，該 cb 回傳多個參數\n\n```javascript\nfunction fn(cb) {\n  // 處理複雜流程\n  cb(null, 1, 2, 3) // 除了第一個 error msg 外，回傳多個值\n}\n\nconst p = thenify(fn); // p is a promise now.\n\np().then(val => console.log(val)) // [1, 2, 3]，會轉成 array\n```\n\n範例三：非同步 function 直接接收多個參數及 cb，該 cb 亦接受多個參數\n\n**此範例為最常被使用功能，關鍵點為 cb 位在 fn 的最後一個參數，且此 cb 遵循著上述提到的 Node.js Style Callback。**\n\n```javascript\nfunction fn(a, b, c, cb) {\n  // 處理複雜流程\n  cb(null, a, b); // 最後回傳 error msg(null) 和 a, b\n}\n\nconst p = thenify(fn); // p is a promise now.\n\np(1, 2, 3).then(values => console.log(values)); // [1, 2]，callback 回傳的值，一樣會包成 array\n```\n\n## 結論\n\n隨著 node 核心原生支援的語法越來越多，選擇利用 babel 搭配就可以在此時享受到 Promise 甚至是 async, await 語法帶來的好處，然而較早期的套件甚至不預設回傳 Promise，此時便需要一些工具的幫助。\n\n希望這篇文章能幫助到那些一接觸學習 JS 流程控制就享受到 Promise 好處，但實務上卻不太理解如何處理原生或第三方套件這類 Callback function 的開發者。\n\n## reference\n- [thenify package](https://www.npmjs.com/package/thenify)\n- [Node.js error-first callback](http://eddychang.me/blog/javascript/57-node-js-error-first-callback.html)\n- [如何把 Callback 接口包装成 Promise 接口](http://welefen.com/post/how-to-convert-callback-to-promise.html)\n",
      "slug": "將-JS-Callback-變成-Promise",
      "updated": 1496848435000,
      "excerpt":
        "<p>隨著越來越多 JS 開發者的提倡，越來越多人擁抱 ES6(+) 的語法，其所帶來的好處讓許多開發者願意接受。</p>\n<p>然而一些新接觸的開發者，在流程控制上會聽聞 Promise 的好處進而開始使用，但較早期的套件會遵循著 node.js style 的 Callback；因此本篇文章將會介紹如何將這類 Callback 利用套件轉成 Promise。</p>\n<p><img src=\"http://i.imgur.com/Xhzct6v.png\" alt=\"\"></p>\n",
      "_id": "u48mnfv37m006y6c",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    },
    {
      "title": "利用 Hub 來自動發 GitHub PR",
      "date": 1499097319000,
      "tags": ["8qe1gjp32hkal8tu"],
      "content":
        "<h2 id=\"起源\">起源</h2>\n<p>因為工作和平時習慣的 Git 協作平台是 GitHub，因此常常發 pull request (以下簡稱 PR) 到 GitHub 上面，而這個流程對我來說不太順手，因此便想要利用更自動化的方式來做掉。</p>\n<p><img src=\"http://i.imgur.com/jEBYSRO.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"舊有流程\">舊有流程</h2>\n<p>一般來說發 GitHub 的 PR 流程如下：</p>\n<ol>\n<li>在 local commit</li>\n<li>推 local branch 到 remote 上面</li>\n<li>打開 GitHub 網站</li>\n<li>進到你的 repo 頁面</li>\n<li>點開 PR 按鈕</li>\n<li>編輯 PR title</li>\n<li>按下按鈕確認發 PR</li>\n</ol>\n<p>這樣的流程除了需要在瀏覽器 和 terminal 間切換外，最麻煩的是需要操作滑鼠多點好幾下，整個流程會將思緒打斷。</p>\n<h2 id=\"Hub\">Hub</h2>\n<p>這是一套 GitHub 官方所維護的套件，用來加強原生 git 的功能，而這個套件剛好提供了<br><code>$ hub pull-request</code> 的功能，可以在該 local branch 發 PR。</p>\n<p>使用 Hub 套件發 PR 流程如下：</p>\n<ol>\n<li>在 local commit</li>\n<li>推 local branch 到 remote 上面</li>\n<li>$ hub pull-request</li>\n<li>進入 vim 模式</li>\n<li>編輯 vim</li>\n<li>編輯完後需要存檔離開 vim ，Hub 才會自動發 PR</li>\n</ol>\n<p>使用 Hub 後流程已改善，把在瀏覽器上的操作帶回到 terminal，但整體使用卻依舊不便，因此我便思考能不能一鍵發 PR 到 GitHub 上面，而最後找到了下面這個解決方案，雖非最完善，但方便不少。</p>\n<h2 id=\"一鍵自動化流程\">一鍵自動化流程</h2>\n<h3 id=\"Setup\">Setup</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim ~/.oh-my-zsh/lib/aliases.zsh (<span class=\"keyword\">in</span> my <span class=\"keyword\">case</span>)</div><div class=\"line\">alias pr=<span class=\"string\">'hub pull-request -m \"$(git reflog -1 | sed '</span>\\<span class=\"string\">''</span>s/^.*: //<span class=\"string\">'\\'</span><span class=\"string\">')\" | xargs open'</span></div><div class=\"line\">$ <span class=\"built_in\">source</span> ~/.zshrc (<span class=\"keyword\">in</span> my <span class=\"keyword\">case</span>)</div></pre></td></tr></table></figure>\n\n<h3 id=\"usage\">usage</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">1. local commit</span></span></div><div class=\"line\">2. git push origin &lt;branch-name&gt; && pr</div></pre></td></tr></table></figure>\n\n<p>藉由 Hub 的 pull-request 加上自己所寫的 alias，<br>此 alias 會將 commit message 的第一行拿出來自動當做 PR title，<br>且會自動打開瀏覽器，可以再度進行檢視或做最後的修正。</p>\n<h2 id=\"結論\">結論</h2>\n<p>能夠利用小技巧將繁瑣重複的事情給自動化，是每個人都很樂見的，在此分享，希望能幫助到可能也需要的你。</p>\n",
      "source": "_posts/利用-Hub-來自動發-GitHub-PR.md",
      "raw":
        "title: 利用 Hub 來自動發 GitHub PR\ndate: 2017-07-03 23:55:19\ntags:\n- GitHub\n---\n\n## 起源\n\n因為工作和平時習慣的 Git 協作平台是 GitHub，因此常常發 pull request (以下簡稱 PR) 到 GitHub 上面，而這個流程對我來說不太順手，因此便想要利用更自動化的方式來做掉。\n\n![](http://i.imgur.com/jEBYSRO.png)\n\n<!-- more -->\n\n## 舊有流程\n\n一般來說發 GitHub 的 PR 流程如下：\n1. 在 local commit\n2. 推 local branch 到 remote 上面\n3. 打開 GitHub 網站\n4. 進到你的 repo 頁面\n5. 點開 PR 按鈕\n6. 編輯 PR title\n7. 按下按鈕確認發 PR\n\n這樣的流程除了需要在瀏覽器 和 terminal 間切換外，最麻煩的是需要操作滑鼠多點好幾下，整個流程會將思緒打斷。\n\n## Hub\n\n這是一套 GitHub 官方所維護的套件，用來加強原生 git 的功能，而這個套件剛好提供了 \n`$ hub pull-request` 的功能，可以在該 local branch 發 PR。\n\n使用 Hub 套件發 PR 流程如下：\n1. 在 local commit\n2. 推 local branch 到 remote 上面\n3. $ hub pull-request\n4. 進入 vim 模式\n5. 編輯 vim\n6. 編輯完後需要存檔離開 vim ，Hub 才會自動發 PR\n\n使用 Hub 後流程已改善，把在瀏覽器上的操作帶回到 terminal，但整體使用卻依舊不便，因此我便思考能不能一鍵發 PR 到 GitHub 上面，而最後找到了下面這個解決方案，雖非最完善，但方便不少。\n\n## 一鍵自動化流程\n\n### Setup\n```sh\n$ vim ~/.oh-my-zsh/lib/aliases.zsh (in my case)\nalias pr='hub pull-request -m \"$(git reflog -1 | sed '\\''s/^.*: //'\\'')\" | xargs open'\n$ source ~/.zshrc (in my case)\n```\n\n### usage\n```\n1. local commit\n2. git push origin <branch-name> && pr\n```\n\n藉由 Hub 的 pull-request 加上自己所寫的 alias，\n此 alias 會將 commit message 的第一行拿出來自動當做 PR title，\n且會自動打開瀏覽器，可以再度進行檢視或做最後的修正。\n\n## 結論\n\n能夠利用小技巧將繁瑣重複的事情給自動化，是每個人都很樂見的，在此分享，希望能幫助到可能也需要的你。\n\n",
      "slug": "利用-Hub-來自動發-GitHub-PR",
      "updated": 1499097346000,
      "excerpt":
        "<h2 id=\"起源\">起源</h2>\n<p>因為工作和平時習慣的 Git 協作平台是 GitHub，因此常常發 pull request (以下簡稱 PR) 到 GitHub 上面，而這個流程對我來說不太順手，因此便想要利用更自動化的方式來做掉。</p>\n<p><img src=\"http://i.imgur.com/jEBYSRO.png\" alt=\"\"></p>\n",
      "_id": "zmiystff4kjs5yz8",
      "categories": [],
      "comments": true,
      "layout": "post",
      "photos": [],
      "link": ""
    }
  ],
  "Tag": [
    { "name": "PHP", "_id": "kp8bdb92efe0l2ri", "posts": ["0kbfjidkmj4fj5t3"] },
    { "name": "CI", "_id": "ro29hezdbjgnih8i", "posts": ["0kbfjidkmj4fj5t3"] },
    {
      "name": "JSDC",
      "_id": "7ak98nng6pugpx1b",
      "posts": ["bkxt3939odqiznbp"]
    },
    {
      "name": "code",
      "_id": "lb9ysu4zbhwbmj88",
      "posts": [
        "bkxt3939odqiznbp",
        "odbww92ya5pr53s1",
        "v60kc6kvfkjq9774",
        "l0xp36cwkqtgcfp0"
      ]
    },
    { "name": "F2E", "_id": "j3x2e81xp73a9yq8", "posts": ["bkxt3939odqiznbp"] },
    {
      "name": "wordpress",
      "_id": "g31nbiu89od31e6w",
      "posts": ["mgsi3b76l1jpzcm0", "frtl8gxo93ldglit"]
    },
    {
      "name": "Amazon",
      "_id": "vuv8oxmk59z624cy",
      "posts": ["mgsi3b76l1jpzcm0"]
    },
    { "name": "EC2", "_id": "x7q3jmjvnhj51jif", "posts": ["mgsi3b76l1jpzcm0"] },
    {
      "name": "tasksel",
      "_id": "uma6ez8q1uju8y6c",
      "posts": ["mgsi3b76l1jpzcm0"]
    },
    {
      "name": "ubuntu",
      "_id": "450ai4lt8kslgtba",
      "posts": ["mgsi3b76l1jpzcm0"]
    },
    { "name": "AWS", "_id": "521wzo1ebycqm2lh", "posts": ["mgsi3b76l1jpzcm0"] },
    {
      "name": "hexo",
      "_id": "swfap7j4lack6rte",
      "posts": [
        "odbww92ya5pr53s1",
        "irmumunmsl2kiyuo",
        "pk5zcivmsoyoof9m",
        "fe8d5oj2q55zpubm"
      ]
    },
    {
      "name": "github",
      "_id": "v46a3uc2e80dnej6",
      "posts": ["odbww92ya5pr53s1", "5rdejt3usc6gexm2"]
    },
    {
      "name": "nodejs",
      "_id": "k0p1j1sphex1vtd4",
      "posts": ["52gsn7kl2ws832fq", "lawt3q3j6hd8dof0", "81kpaoxwovw6huql"]
    },
    {
      "name": "nginx",
      "_id": "s5jsjciaqe59q87g",
      "posts": ["52gsn7kl2ws832fq", "lawt3q3j6hd8dof0"]
    },
    {
      "name": "server",
      "_id": "i1gzodqjduhmbq2h",
      "posts": ["52gsn7kl2ws832fq", "lawt3q3j6hd8dof0"]
    },
    {
      "name": "static file",
      "_id": "gwkizfs2hcz2dn3v",
      "posts": ["lawt3q3j6hd8dof0"]
    },
    {
      "name": "sublime text 2",
      "_id": "8h6rpape37x0ds9u",
      "posts": ["uuci0lbt5ekqcraf", "38j44yedulg9mirp"]
    },
    {
      "name": "goodui",
      "_id": "tg9pn3ap6pjqet54",
      "posts": ["mk7uxm1b6x0fwgvf", "0kd5j6xueym1uso0"]
    },
    {
      "name": "UI",
      "_id": "qyjaf6d038k86y05",
      "posts": ["mk7uxm1b6x0fwgvf", "0kd5j6xueym1uso0"]
    },
    {
      "name": "sublime text 3",
      "_id": "mgz8bmo3ig3qq2x9",
      "posts": ["3o8ydsgqek7hoa1r"]
    },
    {
      "name": "sublime text",
      "_id": "0z6dvaxhkqub1xa9",
      "posts": ["3o8ydsgqek7hoa1r", "fku1x5v3fz8s4kby"]
    },
    {
      "name": "apache2",
      "_id": "h0k2oy59geohi3wn",
      "posts": ["frtl8gxo93ldglit"]
    },
    {
      "name": "htaccess",
      "_id": "tkego6qbvrejl77i",
      "posts": ["frtl8gxo93ldglit"]
    },
    { "name": "css", "_id": "q3d9p74ytmbx1wif", "posts": ["v60kc6kvfkjq9774"] },
    {
      "name": "html",
      "_id": "m2xl2ukrwhpvqmkk",
      "posts": ["v60kc6kvfkjq9774"]
    },
    { "name": "rss", "_id": "rfborlcfi2cb0due", "posts": ["irmumunmsl2kiyuo"] },
    {
      "name": "theme",
      "_id": "hsbp1fsewfx23pdl",
      "posts": ["pk5zcivmsoyoof9m"]
    },
    {
      "name": "domain",
      "_id": "mrnvdrdqisitzwl6",
      "posts": ["fe8d5oj2q55zpubm"]
    },
    {
      "name": "subdomain",
      "_id": "o1spi99koun3v2b3",
      "posts": ["fe8d5oj2q55zpubm"]
    },
    { "name": "url", "_id": "xa734cbzr8u7irel", "posts": ["fe8d5oj2q55zpubm"] },
    {
      "name": "alias",
      "_id": "2zeqrnepl19dkknk",
      "posts": ["up6g8dqrikcxp8qr"]
    },
    {
      "name": "terminal",
      "_id": "wyfpdd08p7ksndsu",
      "posts": ["up6g8dqrikcxp8qr", "fku1x5v3fz8s4kby"]
    },
    { "name": "mac", "_id": "3aovg6atm6nnd1eg", "posts": ["up6g8dqrikcxp8qr"] },
    {
      "name": "tips",
      "_id": "cngo8pvgdo8ue2a4",
      "posts": ["fku1x5v3fz8s4kby", "xa8kqcobz1cbu95b"]
    },
    {
      "name": "linux",
      "_id": "6jeol8jo7keikjor",
      "posts": ["l0xp36cwkqtgcfp0", "yqpcbisubuf7cpao"]
    },
    {
      "name": "crontab",
      "_id": "f332vourvshedzi5",
      "posts": ["l0xp36cwkqtgcfp0"]
    },
    {
      "name": "command line",
      "_id": "i2nrcs9t2t4a70jx",
      "posts": ["yqpcbisubuf7cpao"]
    },
    {
      "name": "iterm2",
      "_id": "yz5591xn6jfer0yk",
      "posts": ["yqpcbisubuf7cpao"]
    },
    {
      "name": "終端機",
      "_id": "ft9so80zwmr9ady3",
      "posts": ["yqpcbisubuf7cpao"]
    },
    {
      "name": "pocket",
      "_id": "899tsoqydar0c4bw",
      "posts": ["rli0qw4af2o8jfdj"]
    },
    {
      "name": "evernote",
      "_id": "ap6ge908bss4zs8w",
      "posts": ["rli0qw4af2o8jfdj"]
    },
    {
      "name": "tool",
      "_id": "7sry6pf9i6701nmf",
      "posts": ["rli0qw4af2o8jfdj"]
    },
    {
      "name": "ifttt",
      "_id": "3kvhtbin5gn3mwzp",
      "posts": ["rli0qw4af2o8jfdj"]
    },
    {
      "name": "node.js",
      "_id": "vnujgxi0n9nt9eq3",
      "posts": ["xa8kqcobz1cbu95b"]
    },
    {
      "name": "deploy",
      "_id": "j3d4zbqu5et2mw2f",
      "posts": ["xa8kqcobz1cbu95b"]
    },
    { "name": "bot", "_id": "afdtpynbx6nae4ni", "posts": ["gkc2b88mvxsdpuqa"] },
    {
      "name": "slack",
      "_id": "7j54awv04jfskglg",
      "posts": ["gkc2b88mvxsdpuqa"]
    },
    {
      "name": "hubot",
      "_id": "fg4fiyqd1w8jcfzu",
      "posts": ["gkc2b88mvxsdpuqa"]
    },
    {
      "name": "heroku",
      "_id": "fi3jvt9ynb7qstde",
      "posts": ["gkc2b88mvxsdpuqa"]
    },
    { "name": "api", "_id": "wwgpfwhx6cu8b079", "posts": ["81kpaoxwovw6huql"] },
    {
      "name": "facebook",
      "_id": "ytyt1gwvphiuwt25",
      "posts": ["81kpaoxwovw6huql"]
    },
    {
      "name": "parser",
      "_id": "ifzx4x45ejxynoqr",
      "posts": ["81kpaoxwovw6huql"]
    },
    {
      "name": "babel",
      "_id": "6e3g2sasu8ku8mn1",
      "posts": ["1y2jntj7dhv1phcg"]
    },
    { "name": "es6", "_id": "p3xd2mz4dfjclu33", "posts": ["1y2jntj7dhv1phcg"] },
    {
      "name": "js",
      "_id": "p54gt5ufespwezlk",
      "posts": ["1y2jntj7dhv1phcg", "gs9upngern3u3dk4", "u48mnfv37m006y6c"]
    },
    {
      "name": "promise",
      "_id": "6qb04dypb46ix2vt",
      "posts": ["u48mnfv37m006y6c"]
    },
    {
      "name": "GitHub",
      "_id": "8qe1gjp32hkal8tu",
      "posts": ["zmiystff4kjs5yz8"]
    }
  ]
}
